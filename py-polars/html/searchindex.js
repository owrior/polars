Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 81, 90, 105, 118, 121, 122, 217, 219, 237, 249, 539, 615], "refer": [0, 92, 93, 95, 407, 465, 539, 793, 856, 894], "input": [0, 55, 83, 92, 93, 95, 186, 214, 237, 381, 392, 488, 506, 514, 515, 518, 539, 548, 593, 610, 621, 775, 894], "output": [0, 25, 27, 28, 65, 95, 112, 122, 144, 145, 156, 166, 171, 174, 183, 186, 210, 214, 237, 245, 249, 383, 384, 391, 483, 488, 514, 525, 539, 548, 569, 570, 579, 584, 593, 610, 613, 615, 621, 630, 882, 894], "seri": [0, 1, 20, 46, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 85, 90, 111, 112, 114, 118, 122, 128, 136, 138, 140, 141, 146, 149, 150, 152, 154, 162, 163, 167, 179, 180, 186, 194, 198, 203, 204, 214, 218, 237, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 270, 271, 278, 279, 282, 283, 284, 287, 293, 294, 298, 299, 311, 313, 315, 318, 321, 323, 325, 328, 332, 333, 335, 338, 341, 349, 350, 356, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 382, 383, 403, 407, 408, 409, 410, 411, 413, 425, 426, 429, 432, 433, 440, 459, 465, 469, 474, 475, 476, 477, 482, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 506, 507, 509, 511, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 526, 527, 528, 529, 530, 539, 548, 565, 593, 610, 621, 886, 888, 890, 893, 897, 898, 899], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 44, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 235, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 629, 649, 667, 676, 691, 838, 840, 852, 853, 863, 864, 873, 874, 882, 894], "lazyfram": [0, 1, 43, 45, 55, 56, 57, 58, 59, 62, 63, 103, 104, 105, 106, 107, 108, 110, 114, 160, 173, 237, 284, 353, 539, 548, 620, 900], "express": [0, 60, 62, 65, 112, 114, 115, 122, 134, 136, 143, 169, 174, 182, 186, 192, 214, 217, 219, 237, 245, 246, 248, 249, 266, 284, 295, 296, 297, 300, 306, 308, 312, 329, 347, 350, 353, 360, 362, 366, 369, 374, 377, 382, 383, 384, 385, 389, 390, 391, 392, 403, 404, 405, 410, 424, 425, 426, 428, 430, 435, 441, 449, 465, 471, 474, 480, 482, 485, 489, 492, 493, 497, 498, 499, 500, 504, 505, 506, 507, 508, 509, 513, 514, 515, 518, 520, 522, 523, 524, 525, 527, 528, 531, 538, 548, 554, 562, 565, 587, 593, 595, 596, 597, 598, 600, 610, 611, 614, 615, 621, 649, 680, 681, 682, 690, 698, 719, 741, 811, 818, 832, 840, 894], "extend": [0, 83, 237, 350, 539, 548, 629, 741, 894], "function": [0, 56, 57, 58, 59, 60, 64, 81, 92, 93, 95, 103, 113, 122, 131, 138, 165, 172, 173, 174, 202, 205, 208, 209, 219, 237, 246, 249, 284, 306, 333, 344, 345, 346, 383, 384, 385, 401, 413, 414, 415, 416, 417, 418, 420, 421, 422, 434, 478, 486, 488, 498, 499, 506, 507, 509, 514, 522, 539, 548, 579, 583, 586, 607, 615, 621, 630, 667, 690, 723, 735, 736, 737, 738, 799, 813, 814, 820, 825, 877, 894], "data": [0, 1, 13, 16, 30, 46, 55, 56, 58, 63, 70, 71, 75, 77, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 110, 111, 113, 114, 115, 121, 123, 124, 133, 142, 144, 156, 157, 158, 160, 173, 177, 182, 183, 184, 190, 197, 201, 202, 214, 216, 235, 237, 292, 311, 334, 341, 361, 368, 370, 407, 423, 424, 434, 465, 478, 480, 492, 525, 539, 548, 552, 553, 562, 569, 586, 597, 598, 610, 614, 621, 629, 674, 679, 683, 695, 697, 731, 793, 809, 810, 820, 825, 856, 875, 876, 877, 878, 880, 884, 893, 894], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 70, 80, 82, 83, 84, 85, 86, 90, 92, 93, 94, 95, 103, 104, 109, 110, 111, 114, 117, 118, 122, 132, 138, 142, 144, 145, 146, 157, 197, 201, 202, 204, 206, 207, 237, 249, 271, 284, 292, 293, 295, 296, 297, 313, 315, 318, 321, 323, 325, 328, 332, 335, 347, 358, 364, 366, 367, 410, 460, 461, 462, 465, 478, 488, 493, 501, 502, 503, 505, 506, 513, 539, 548, 554, 562, 569, 570, 587, 596, 597, 598, 605, 606, 621, 654, 667, 674, 676, 680, 681, 682, 699, 701, 704, 710, 712, 715, 718, 722, 725, 749, 820, 851, 852, 853, 875, 876, 878, 885, 894], "config": [0, 55, 186, 214, 237, 548, 593, 610, 621], "except": [0, 147, 159, 195, 237, 548, 575, 621, 876, 884, 894], "test": [0, 95, 548, 571, 578, 621], "util": [0, 509, 548, 562, 621], "sql": [0, 43, 102, 158, 237, 548], "These": [1, 119, 338, 538, 728], "allow": [1, 46, 70, 81, 103, 105, 106, 107, 108, 114, 115, 121, 156, 159, 160, 182, 183, 184, 202, 216, 237, 329, 409, 424, 465, 539, 574, 575, 579, 597, 598, 611, 621, 719, 795, 810, 812, 856, 877, 894], "you": [1, 29, 55, 80, 82, 83, 84, 86, 90, 92, 93, 95, 100, 103, 110, 118, 122, 129, 133, 156, 159, 169, 183, 199, 201, 205, 219, 237, 249, 266, 295, 296, 297, 347, 353, 362, 383, 385, 409, 414, 415, 416, 417, 418, 420, 421, 422, 450, 453, 465, 489, 498, 507, 539, 554, 559, 571, 575, 578, 596, 598, 615, 621, 629, 649, 680, 681, 682, 795, 841, 844, 856, 876, 884, 894], "regist": [1, 56, 57, 58, 59], "custom": [1, 56, 57, 58, 59, 122, 219, 237, 249, 284, 383, 413, 488, 514, 539, 579, 615, 621, 630, 667, 799, 894], "dedic": [1, 81, 156, 183, 237], "namespac": [1, 236, 538, 548, 620], "underli": [1, 66, 73, 80, 82, 83, 84, 86, 100, 114, 115, 133, 156, 157, 183, 197, 237, 288, 311, 312, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 332, 334, 339, 340, 341, 342, 409, 423, 441, 443, 539, 629, 670, 697, 698, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 722, 724, 729, 730, 731, 732, 795, 809, 820, 832, 834, 872, 876, 894], "polar": [1, 237, 538, 539, 548, 621, 894, 900, 901], "class": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 85, 112, 113, 201, 202, 237, 539, 548, 621, 875, 876, 894, 900], "without": [1, 64, 94, 97, 101, 104, 105, 208, 209, 237, 306, 333, 385, 414, 415, 416, 417, 418, 420, 421, 422, 524, 539, 607, 621, 690, 695, 723, 894], "requir": [1, 29, 85, 110, 111, 171, 172, 202, 237, 344, 345, 346, 429, 465, 480, 539, 598, 621, 736, 737, 738, 819, 856, 876, 877, 880, 894], "subclass": [1, 237], "mixin": 1, "expr": [1, 55, 56, 57, 58, 59, 60, 63, 65, 132, 134, 136, 143, 144, 145, 158, 169, 174, 182, 186, 192, 214, 217, 237, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 539, 540, 543, 544, 545, 561, 563, 565, 568, 569, 570, 574, 588, 593, 595, 600, 610, 614, 621, 649, 690, 698, 742, 818, 832, 836, 854, 867, 894], "ar": [1, 9, 15, 29, 46, 65, 72, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 100, 103, 104, 105, 106, 107, 110, 111, 113, 114, 117, 119, 121, 122, 129, 131, 134, 138, 144, 145, 156, 159, 160, 165, 166, 172, 182, 183, 186, 198, 202, 209, 210, 214, 237, 246, 284, 302, 304, 305, 309, 310, 333, 338, 343, 344, 345, 346, 362, 364, 366, 367, 368, 370, 371, 372, 375, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 434, 436, 437, 450, 453, 454, 472, 489, 490, 495, 525, 532, 533, 535, 538, 539, 540, 543, 544, 545, 548, 559, 563, 569, 570, 571, 575, 578, 579, 583, 584, 587, 590, 593, 597, 598, 607, 610, 611, 621, 627, 629, 667, 688, 689, 723, 728, 734, 735, 736, 737, 738, 748, 757, 760, 761, 762, 763, 764, 765, 771, 793, 797, 799, 805, 822, 825, 841, 844, 845, 865, 876, 877, 884, 886, 888, 890, 894, 897, 898, 899], "all": [1, 6, 12, 15, 20, 23, 30, 62, 63, 65, 80, 83, 85, 86, 87, 92, 93, 94, 95, 96, 100, 103, 106, 107, 112, 113, 115, 129, 135, 147, 152, 154, 156, 157, 160, 165, 168, 169, 177, 182, 183, 191, 195, 200, 206, 210, 237, 247, 248, 266, 271, 281, 284, 286, 300, 306, 347, 357, 358, 361, 364, 367, 371, 372, 374, 377, 379, 383, 384, 396, 400, 404, 407, 412, 429, 435, 442, 448, 449, 452, 455, 456, 458, 464, 471, 483, 493, 505, 527, 539, 548, 554, 557, 559, 562, 564, 579, 583, 587, 596, 599, 605, 611, 621, 649, 654, 664, 667, 690, 755, 768, 793, 826, 833, 839, 840, 843, 846, 847, 849, 855, 894], "support": [1, 29, 63, 80, 81, 82, 83, 84, 85, 86, 94, 95, 102, 104, 112, 115, 119, 121, 156, 157, 183, 191, 199, 202, 237, 279, 435, 459, 465, 539, 599, 621, 662, 826, 850, 856, 877, 894], "target": [1, 61, 447, 465, 838, 856], "thi": [1, 6, 23, 25, 27, 29, 45, 46, 55, 60, 62, 63, 64, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 121, 122, 129, 130, 131, 133, 138, 143, 144, 145, 146, 150, 152, 154, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 182, 183, 184, 186, 189, 191, 193, 194, 197, 199, 201, 202, 205, 206, 208, 209, 210, 211, 212, 214, 215, 217, 219, 236, 237, 246, 248, 249, 258, 260, 266, 271, 284, 293, 300, 306, 311, 319, 329, 332, 333, 341, 347, 349, 360, 361, 362, 366, 377, 382, 383, 385, 389, 390, 391, 392, 398, 399, 401, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 426, 428, 429, 430, 435, 436, 437, 451, 452, 457, 458, 464, 465, 468, 469, 479, 480, 481, 482, 483, 486, 489, 494, 496, 498, 500, 505, 506, 507, 509, 524, 528, 539, 548, 549, 551, 554, 559, 562, 568, 569, 570, 572, 575, 579, 583, 584, 587, 590, 593, 595, 596, 597, 598, 599, 605, 607, 610, 611, 612, 613, 615, 620, 621, 629, 630, 639, 642, 649, 654, 676, 690, 695, 697, 698, 705, 719, 722, 723, 731, 735, 740, 747, 748, 753, 754, 759, 760, 766, 769, 772, 776, 777, 778, 779, 781, 782, 784, 785, 787, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 806, 807, 808, 810, 813, 814, 815, 818, 819, 820, 821, 826, 827, 829, 842, 843, 848, 849, 855, 856, 859, 860, 863, 864, 865, 872, 874, 875, 876, 877, 879, 880, 883, 884, 894], "featur": [1, 29, 46, 61, 237], "i": [1, 12, 25, 27, 28, 46, 55, 61, 62, 63, 64, 65, 67, 69, 70, 72, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 94, 96, 100, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 121, 122, 129, 131, 139, 142, 143, 144, 145, 146, 150, 151, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 173, 174, 182, 183, 184, 191, 194, 197, 202, 205, 206, 208, 209, 210, 217, 219, 236, 237, 246, 247, 248, 249, 266, 269, 279, 283, 284, 306, 312, 329, 333, 338, 344, 345, 346, 349, 358, 360, 362, 375, 383, 385, 392, 401, 407, 409, 411, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 430, 431, 434, 435, 436, 437, 441, 442, 447, 448, 449, 451, 452, 454, 457, 458, 459, 462, 464, 465, 468, 483, 489, 490, 494, 496, 498, 499, 500, 507, 513, 524, 528, 539, 554, 559, 562, 568, 569, 570, 573, 575, 577, 579, 583, 584, 587, 596, 597, 598, 599, 605, 607, 613, 615, 621, 628, 629, 630, 649, 652, 662, 666, 690, 698, 719, 723, 728, 735, 736, 737, 738, 740, 748, 749, 752, 753, 754, 756, 766, 767, 769, 770, 771, 793, 795, 797, 810, 811, 812, 813, 814, 815, 821, 822, 825, 826, 829, 832, 833, 838, 839, 840, 842, 843, 845, 848, 849, 850, 853, 855, 856, 859, 872, 876, 877, 882, 883, 884, 894], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 29, 46, 55, 65, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 118, 122, 134, 135, 138, 144, 145, 152, 154, 156, 157, 159, 163, 165, 168, 169, 173, 174, 182, 184, 186, 192, 194, 200, 202, 205, 206, 209, 210, 214, 217, 219, 237, 244, 249, 266, 284, 288, 289, 293, 306, 309, 310, 341, 343, 344, 345, 346, 347, 352, 353, 361, 362, 375, 383, 385, 388, 407, 409, 411, 414, 415, 416, 417, 418, 420, 421, 422, 424, 426, 429, 430, 434, 436, 437, 443, 444, 445, 450, 451, 457, 459, 461, 463, 465, 488, 489, 490, 493, 495, 498, 500, 507, 509, 513, 515, 518, 523, 524, 528, 538, 539, 548, 554, 557, 563, 564, 569, 570, 571, 575, 577, 578, 583, 593, 598, 600, 605, 607, 610, 615, 621, 630, 649, 667, 670, 671, 676, 690, 731, 734, 736, 737, 738, 742, 743, 748, 771, 793, 795, 797, 810, 813, 814, 815, 819, 821, 825, 829, 834, 835, 841, 842, 848, 850, 852, 856, 867, 873, 875, 876, 877, 883, 884, 894], "librari": [1, 66, 73, 383, 539, 901], "author": 1, "domain": 1, "specif": [1, 23, 80, 82, 84, 86, 94, 102, 104, 114, 156, 237, 413, 465, 527, 539, 799, 856, 894], "capabl": 1, "which": [1, 15, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 83, 92, 93, 94, 95, 102, 103, 104, 110, 129, 133, 144, 145, 192, 206, 237, 246, 284, 350, 362, 364, 367, 368, 370, 371, 372, 392, 414, 415, 416, 417, 418, 420, 421, 422, 454, 539, 559, 569, 570, 597, 598, 605, 613, 621, 629, 741, 757, 761, 762, 763, 764, 765, 813, 845, 894], "mai": [1, 29, 63, 64, 80, 82, 83, 84, 86, 92, 94, 96, 104, 105, 106, 122, 131, 133, 159, 188, 189, 208, 209, 237, 278, 283, 284, 306, 311, 319, 333, 347, 385, 414, 415, 416, 417, 418, 420, 421, 422, 427, 428, 465, 498, 499, 507, 522, 539, 575, 579, 594, 595, 598, 607, 612, 615, 621, 629, 661, 666, 690, 697, 705, 723, 735, 817, 818, 856, 894], "exist": [1, 80, 94, 104, 114, 214, 237, 312, 610, 621, 698], "belong": [1, 144, 237, 569, 621], "core": [1, 202, 237], "cannot": [1, 81, 92, 93, 110, 122, 184, 219, 237, 249, 288, 424, 443, 461, 539, 596, 615, 621, 670, 810, 834, 852, 894], "overrid": [1, 80, 82, 83, 84, 85, 86, 112, 113, 115, 237], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 32, 40, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 64, 65, 80, 82, 83, 84, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 140, 142, 143, 144, 145, 147, 149, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 249, 263, 264, 269, 270, 271, 279, 282, 284, 308, 313, 329, 332, 333, 336, 338, 347, 349, 350, 351, 353, 355, 360, 362, 366, 369, 384, 385, 391, 393, 401, 404, 410, 412, 414, 415, 416, 417, 418, 420, 421, 422, 428, 429, 436, 437, 469, 470, 471, 474, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 539, 543, 554, 555, 556, 557, 558, 559, 561, 562, 565, 567, 568, 569, 570, 572, 574, 575, 583, 584, 587, 589, 590, 591, 593, 595, 596, 597, 598, 599, 600, 605, 606, 607, 610, 611, 612, 613, 615, 616, 617, 621, 626, 647, 654, 667, 674, 691, 699, 719, 722, 723, 726, 728, 740, 743, 776, 779, 784, 785, 796, 813, 814, 860, 862, 873, 874, 894, 897], "dt": [1, 55, 145, 237, 465, 545, 570, 621, 856, 899], "attempt": [1, 201, 237], "do": [1, 55, 62, 103, 133, 159, 197, 205, 208, 237, 266, 306, 452, 458, 464, 486, 539, 554, 575, 579, 587, 596, 597, 598, 621, 629, 649, 690, 843, 849, 855, 876, 884, 894], "so": [1, 46, 102, 103, 104, 142, 144, 145, 174, 237, 269, 362, 452, 458, 464, 490, 539, 569, 570, 621, 652, 843, 849, 855], "rais": [1, 11, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 110, 111, 182, 237, 283, 288, 391, 403, 441, 443, 465, 513, 539, 666, 670, 832, 834, 856, 876, 884, 894], "an": [1, 56, 58, 59, 62, 65, 66, 70, 71, 73, 80, 92, 93, 94, 95, 100, 102, 103, 106, 113, 114, 115, 122, 123, 124, 131, 134, 136, 138, 144, 145, 156, 157, 159, 169, 171, 174, 180, 182, 197, 201, 208, 214, 219, 237, 245, 246, 249, 266, 269, 283, 284, 288, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 312, 341, 350, 353, 362, 374, 383, 384, 392, 405, 413, 414, 415, 416, 417, 418, 420, 421, 422, 441, 443, 448, 465, 474, 489, 493, 504, 509, 513, 522, 524, 539, 548, 552, 553, 554, 557, 562, 565, 569, 570, 575, 579, 587, 596, 600, 610, 611, 615, 621, 649, 652, 666, 670, 674, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 698, 731, 735, 741, 799, 800, 801, 802, 803, 804, 806, 807, 808, 813, 814, 832, 834, 839, 856, 876, 884, 894], "attributeerror": 1, "howev": [1, 83, 131, 237, 735, 894], "can": [1, 55, 65, 71, 83, 92, 93, 95, 96, 103, 105, 106, 113, 114, 115, 122, 130, 138, 143, 144, 152, 154, 169, 174, 186, 192, 205, 208, 214, 217, 219, 237, 249, 266, 284, 302, 305, 306, 329, 338, 347, 350, 361, 362, 396, 409, 414, 415, 416, 417, 418, 420, 421, 422, 426, 429, 431, 434, 449, 452, 458, 464, 483, 486, 489, 493, 500, 505, 509, 515, 528, 538, 539, 554, 569, 593, 600, 610, 612, 615, 621, 630, 649, 667, 690, 719, 728, 741, 780, 795, 813, 814, 815, 819, 822, 825, 840, 843, 849, 855, 894], "other": [1, 15, 65, 92, 93, 95, 103, 110, 111, 129, 133, 139, 158, 159, 165, 166, 182, 186, 209, 214, 235, 237, 248, 263, 295, 296, 297, 308, 366, 385, 437, 478, 539, 548, 559, 574, 575, 583, 584, 593, 607, 610, 611, 621, 629, 646, 680, 681, 682, 693, 760, 812, 878, 885, 893, 894], "onli": [1, 15, 23, 46, 55, 61, 63, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 114, 115, 119, 122, 129, 143, 156, 159, 163, 183, 192, 194, 199, 237, 244, 294, 295, 296, 297, 329, 356, 409, 481, 523, 527, 539, 554, 559, 571, 575, 578, 600, 621, 677, 680, 681, 682, 719, 746, 795, 872, 894], "gener": [1, 87, 102, 112, 113, 114, 115, 174, 184, 200, 205, 237, 284, 424, 430, 539, 667, 810, 821, 873, 894], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 539, 549, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 792, 793, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 821, 822, 823, 824, 826, 827, 828, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "register_expr_namespac": [1, 56, 58, 59], "greet": 1, "def": [1, 56, 57, 58, 59, 113, 114, 115, 173, 205, 237, 586, 621], "__init__": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 112], "self": [1, 56, 57, 58, 59, 62, 122, 123, 124, 126, 127, 129, 133, 135, 143, 144, 145, 147, 149, 150, 151, 161, 162, 163, 164, 165, 166, 167, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 200, 205, 206, 207, 208, 210, 211, 212, 215, 237, 401, 539, 551, 553, 554, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 590, 591, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 608, 610, 611, 612, 621, 629, 813, 814, 885, 894], "_expr": [1, 57], "hello": [1, 452, 458, 464, 486, 654, 843, 849, 855], "return": [1, 23, 25, 27, 28, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 72, 74, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 118, 122, 123, 127, 129, 130, 131, 132, 134, 135, 138, 142, 147, 149, 155, 156, 157, 158, 160, 161, 168, 169, 171, 172, 173, 174, 182, 183, 184, 195, 196, 202, 205, 206, 214, 216, 217, 219, 222, 226, 231, 237, 246, 247, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 264, 267, 269, 270, 271, 282, 283, 287, 289, 298, 299, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 339, 340, 342, 349, 359, 362, 364, 365, 366, 367, 368, 370, 371, 372, 378, 382, 392, 396, 410, 411, 424, 425, 431, 432, 433, 440, 442, 444, 446, 447, 448, 449, 450, 451, 453, 454, 457, 459, 460, 461, 462, 468, 473, 474, 475, 476, 477, 479, 481, 482, 483, 488, 489, 493, 501, 502, 503, 509, 511, 513, 514, 524, 529, 531, 539, 554, 557, 559, 560, 562, 571, 577, 578, 579, 586, 587, 596, 597, 598, 604, 605, 610, 613, 616, 617, 621, 626, 627, 628, 630, 637, 638, 640, 641, 644, 645, 647, 650, 652, 653, 654, 665, 666, 669, 671, 691, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 735, 740, 748, 750, 755, 757, 758, 760, 761, 762, 763, 764, 765, 768, 770, 773, 780, 797, 798, 810, 811, 812, 814, 822, 831, 832, 833, 835, 837, 838, 839, 840, 841, 842, 844, 845, 848, 850, 851, 852, 853, 856, 859, 866, 868, 879, 881, 885, 894], "lit": [1, 90, 118, 287, 362, 374, 498, 500, 507, 528, 531, 539, 669, 743, 894], "alia": [1, 55, 57, 59, 144, 145, 161, 207, 214, 237, 249, 260, 266, 295, 296, 297, 301, 302, 303, 304, 305, 307, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 323, 325, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 353, 355, 360, 362, 365, 366, 374, 377, 378, 385, 394, 401, 402, 409, 425, 441, 442, 445, 448, 450, 453, 459, 461, 462, 463, 478, 479, 485, 491, 492, 494, 495, 500, 503, 504, 508, 523, 527, 528, 539, 569, 570, 572, 578, 606, 610, 614, 621, 642, 649, 697, 699, 702, 719, 722, 727, 731, 773, 852, 853, 894], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 452, 458, 464, 654, 843, 849, 855], "select": [1, 55, 56, 57, 58, 60, 91, 92, 93, 94, 96, 100, 102, 103, 105, 122, 155, 159, 169, 173, 182, 191, 203, 207, 210, 237, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 284, 285, 286, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 354, 356, 357, 358, 360, 361, 363, 364, 366, 367, 369, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 451, 452, 454, 457, 458, 460, 461, 462, 464, 466, 467, 469, 470, 471, 472, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 488, 489, 491, 493, 494, 496, 497, 500, 503, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 555, 572, 575, 586, 599, 606, 611, 613, 621, 649, 667, 813, 814, 826, 838, 840, 867, 894], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 77, 80, 82, 83, 84, 85, 86, 87, 90, 103, 105, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 554, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 615, 616, 617, 621, 629, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 755, 757, 760, 761, 762, 763, 764, 765, 768, 770, 773, 780, 788, 789, 790, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 814, 817, 821, 822, 823, 824, 826, 827, 828, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 866, 867, 868, 869, 870, 873, 874, 878, 880, 881, 882, 885, 894], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 95, 102, 103, 105, 109, 110, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 246, 249, 258, 259, 260, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 324, 326, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 379, 380, 381, 382, 384, 385, 396, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 436, 437, 438, 441, 444, 445, 447, 450, 453, 454, 459, 460, 461, 462, 463, 469, 470, 471, 473, 474, 475, 479, 481, 482, 483, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 504, 505, 506, 508, 511, 513, 515, 516, 517, 518, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 631, 633, 634, 635, 637, 638, 639, 640, 641, 648, 649, 650, 653, 656, 661, 662, 665, 667, 674, 676, 677, 678, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 710, 712, 713, 714, 716, 718, 720, 722, 723, 724, 727, 728, 730, 731, 735, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 792, 793, 796, 798, 799, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 821, 823, 824, 825, 826, 827, 829, 835, 836, 838, 841, 844, 845, 850, 854, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 880, 881, 882, 883, 885, 894], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 102, 103, 104, 105, 109, 110, 111, 112, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 527, 528, 529, 530, 531, 539, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 652, 653, 656, 661, 662, 665, 667, 674, 676, 677, 678, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 792, 793, 796, 797, 798, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 838, 840, 852, 853, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 80, 82, 83, 84, 85, 86, 87, 102, 103, 105, 109, 110, 111, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 247, 248, 249, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 312, 313, 315, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 338, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 434, 435, 436, 437, 438, 440, 442, 445, 448, 449, 450, 452, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 621, 626, 629, 630, 632, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 676, 677, 678, 683, 684, 687, 688, 689, 690, 691, 692, 693, 698, 703, 707, 708, 714, 716, 721, 723, 724, 728, 730, 732, 734, 735, 736, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 754, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 792, 793, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 821, 823, 825, 826, 827, 828, 829, 831, 833, 839, 840, 843, 844, 845, 846, 847, 849, 852, 853, 855, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 894], "column_0": [1, 80, 122, 205, 237], "register_dataframe_namespac": [1, 57, 58, 59], "split": [1, 56, 157, 171, 217, 237, 461, 462, 852, 853], "splitfram": [1, 56], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 56, 57, 60, 80, 81, 82, 83, 84, 85, 86, 87, 93, 103, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 555, 557, 558, 559, 561, 562, 563, 564, 566, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 594, 595, 596, 599, 600, 601, 602, 603, 605, 606, 607, 608, 612, 613, 615, 616, 617, 621, 649, 667, 676, 838, 840, 847, 852, 853, 874, 894], "_df": [1, 56], "by_alternate_row": 1, "list": [1, 32, 55, 56, 58, 62, 64, 80, 82, 83, 84, 86, 87, 89, 91, 92, 93, 94, 96, 100, 102, 103, 104, 113, 114, 115, 125, 130, 131, 132, 136, 141, 144, 149, 156, 168, 171, 182, 183, 186, 192, 198, 199, 205, 206, 207, 208, 214, 218, 237, 244, 263, 265, 266, 267, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 347, 349, 355, 383, 392, 393, 401, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 428, 436, 437, 448, 460, 469, 470, 474, 493, 494, 500, 504, 515, 518, 527, 528, 539, 555, 558, 559, 560, 561, 565, 569, 583, 593, 605, 606, 610, 611, 621, 643, 646, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 678, 735, 740, 744, 747, 760, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 839, 851, 862, 867, 875, 894], "with_row_count": [1, 237, 385, 539, 621, 814, 894], "name": [1, 13, 17, 19, 27, 45, 56, 57, 58, 59, 64, 65, 69, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 106, 107, 108, 111, 112, 113, 114, 115, 122, 125, 128, 129, 137, 140, 142, 156, 158, 159, 165, 174, 178, 182, 183, 185, 186, 198, 200, 204, 205, 207, 209, 214, 215, 216, 237, 245, 249, 284, 333, 338, 347, 362, 374, 384, 391, 393, 404, 469, 470, 471, 486, 487, 493, 497, 500, 505, 511, 512, 515, 518, 520, 521, 523, 525, 528, 529, 539, 555, 558, 574, 575, 583, 590, 592, 593, 600, 606, 607, 610, 612, 613, 614, 621, 626, 667, 679, 723, 728, 796, 860, 862, 873, 874, 877, 894], "n": [1, 10, 12, 20, 28, 32, 33, 56, 57, 58, 59, 65, 89, 90, 92, 93, 103, 118, 122, 133, 144, 147, 156, 157, 161, 171, 183, 184, 195, 196, 199, 222, 231, 237, 265, 270, 282, 306, 307, 311, 312, 316, 337, 341, 350, 359, 378, 402, 410, 424, 434, 461, 462, 473, 475, 479, 509, 511, 523, 529, 539, 554, 569, 571, 578, 603, 604, 616, 617, 621, 629, 648, 653, 665, 690, 692, 697, 698, 702, 727, 731, 741, 750, 773, 788, 810, 825, 829, 852, 853, 866, 868, 879, 883, 894], "filter": [1, 56, 94, 103, 104, 105, 129, 152, 153, 154, 219, 237, 445, 463, 485, 489, 539, 559, 562, 572, 615, 621, 813, 894], "col": [1, 25, 55, 56, 57, 58, 60, 84, 86, 103, 113, 114, 122, 136, 143, 144, 145, 153, 155, 169, 173, 182, 186, 192, 207, 214, 217, 237, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 280, 281, 284, 285, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 350, 353, 354, 355, 356, 360, 361, 362, 363, 365, 366, 368, 369, 370, 373, 374, 375, 376, 380, 381, 382, 385, 386, 387, 388, 395, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 494, 495, 500, 503, 506, 508, 509, 510, 515, 518, 521, 527, 528, 531, 539, 565, 568, 569, 570, 572, 586, 593, 600, 606, 610, 611, 614, 621, 649, 667, 676, 719, 797, 813, 814, 838, 840, 856, 894], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 29, 55, 56, 57, 59, 60, 64, 87, 92, 93, 95, 96, 100, 102, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 118, 122, 123, 124, 126, 127, 130, 134, 135, 138, 139, 141, 142, 144, 146, 150, 155, 156, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 172, 175, 176, 180, 184, 185, 186, 189, 191, 192, 193, 194, 200, 202, 203, 205, 208, 210, 211, 214, 215, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 243, 244, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 266, 269, 275, 284, 292, 294, 296, 297, 298, 299, 301, 306, 309, 310, 317, 320, 321, 323, 324, 328, 334, 335, 344, 345, 346, 348, 349, 350, 351, 352, 356, 358, 361, 364, 367, 368, 370, 371, 372, 374, 375, 380, 381, 383, 385, 386, 387, 388, 395, 398, 399, 400, 402, 403, 406, 407, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 429, 431, 432, 433, 434, 438, 439, 447, 468, 472, 476, 477, 478, 484, 489, 491, 492, 494, 497, 498, 500, 504, 507, 516, 517, 520, 521, 525, 528, 530, 531, 539, 552, 553, 558, 560, 563, 564, 569, 574, 577, 582, 587, 588, 592, 593, 595, 596, 598, 600, 601, 608, 610, 611, 612, 615, 621, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 649, 652, 674, 677, 679, 684, 685, 690, 691, 693, 703, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 718, 724, 725, 734, 736, 737, 738, 740, 742, 746, 749, 757, 759, 761, 762, 763, 764, 765, 770, 771, 777, 778, 788, 792, 793, 799, 801, 802, 804, 805, 806, 808, 810, 822, 823, 824, 828, 829, 831, 838, 840, 859, 869, 870, 873, 877, 878, 883, 884, 894], "drop": [1, 83, 122, 128, 129, 206, 214, 237, 265, 307, 309, 310, 539, 559, 605, 610, 621, 648, 692, 694, 894], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 46, 55, 56, 63, 64, 65, 67, 69, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 114, 121, 122, 127, 128, 129, 130, 132, 137, 140, 142, 143, 144, 145, 149, 150, 156, 158, 159, 162, 163, 164, 165, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 192, 193, 194, 198, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 237, 246, 247, 249, 258, 260, 263, 267, 283, 284, 312, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 334, 339, 340, 342, 347, 349, 353, 355, 362, 374, 385, 390, 391, 393, 401, 404, 408, 410, 414, 415, 416, 417, 418, 420, 421, 422, 429, 436, 437, 446, 454, 461, 462, 465, 471, 485, 486, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 507, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 531, 539, 558, 559, 560, 561, 568, 569, 570, 574, 575, 579, 580, 581, 582, 583, 585, 586, 588, 590, 592, 593, 600, 601, 602, 605, 606, 607, 608, 610, 611, 612, 613, 621, 627, 628, 646, 650, 666, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 724, 729, 730, 732, 740, 819, 837, 845, 852, 853, 864, 873, 874, 894], "txt": 1, "utf8": [1, 8, 15, 46, 83, 92, 93, 103, 112, 130, 131, 138, 185, 201, 237, 271, 349, 385, 440, 444, 447, 448, 449, 450, 459, 460, 461, 462, 465, 493, 495, 539, 560, 592, 621, 654, 726, 740, 769, 831, 835, 838, 839, 840, 841, 850, 851, 852, 853, 856, 894], "register_lazyframe_namespac": [1, 56, 57, 59], "dtypeoper": [1, 58], "ldf": [1, 58, 568, 593, 597, 598, 610, 614, 615, 616, 617, 621], "_ldf": [1, 58], "upcast_integer_typ": [1, 58], "with_column": [1, 58, 145, 173, 237, 249, 266, 292, 293, 295, 296, 297, 302, 305, 307, 358, 361, 362, 365, 368, 370, 371, 372, 374, 385, 401, 402, 445, 450, 453, 455, 456, 459, 461, 462, 463, 465, 468, 470, 478, 489, 492, 494, 495, 500, 504, 527, 528, 531, 539, 570, 586, 621, 649, 676, 856], "tp": [1, 58], "cast": [1, 57, 58, 80, 117, 138, 144, 145, 173, 202, 214, 237, 248, 293, 304, 305, 311, 385, 409, 449, 468, 472, 478, 495, 539, 569, 570, 586, 610, 621, 676, 688, 689, 697, 795, 840, 865, 874, 878, 894], "int64": [1, 27, 57, 58, 90, 118, 130, 138, 144, 145, 173, 185, 197, 202, 237, 304, 305, 315, 318, 321, 323, 325, 328, 335, 347, 409, 472, 478, 489, 493, 505, 539, 560, 569, 570, 586, 592, 613, 621, 688, 689, 701, 704, 710, 712, 715, 718, 725, 795, 812, 865, 876, 877, 878, 894], "int8": [1, 58, 138, 237, 304, 305, 472, 539, 688, 689, 692, 798, 865, 894], "int16": [1, 58, 304, 305, 472, 539, 688, 689, 865, 894], "int32": [1, 58, 83, 114, 115, 144, 145, 157, 237, 292, 319, 342, 478, 539, 569, 570, 621, 705, 732, 878, 894], "b": [1, 24, 25, 26, 29, 46, 58, 63, 80, 82, 83, 84, 85, 86, 87, 95, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 245, 248, 249, 259, 263, 266, 271, 273, 286, 292, 293, 300, 308, 309, 310, 347, 351, 352, 353, 355, 357, 358, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 377, 379, 384, 396, 400, 404, 412, 429, 435, 446, 455, 469, 470, 471, 481, 483, 485, 486, 491, 492, 493, 495, 496, 497, 500, 504, 505, 506, 508, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 617, 621, 629, 649, 676, 691, 693, 734, 735, 743, 760, 769, 796, 812, 837, 846, 864, 877, 881, 894], "4": [1, 12, 20, 24, 25, 26, 29, 46, 55, 56, 57, 58, 59, 60, 63, 65, 80, 82, 83, 84, 85, 86, 87, 103, 109, 110, 111, 115, 122, 123, 124, 126, 129, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 165, 168, 169, 171, 173, 174, 175, 179, 183, 187, 195, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 248, 249, 259, 265, 266, 267, 270, 278, 279, 282, 286, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 314, 318, 324, 325, 326, 330, 331, 333, 334, 335, 338, 339, 340, 342, 348, 351, 352, 355, 356, 357, 359, 360, 361, 362, 371, 372, 374, 377, 379, 381, 384, 385, 401, 403, 404, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 425, 427, 428, 431, 435, 436, 437, 438, 441, 450, 451, 453, 457, 459, 461, 462, 465, 471, 473, 474, 475, 478, 479, 491, 492, 493, 495, 496, 497, 500, 504, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 531, 539, 552, 553, 554, 557, 559, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 594, 595, 596, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 612, 615, 616, 617, 621, 629, 632, 639, 648, 649, 650, 653, 661, 662, 665, 677, 678, 680, 690, 691, 693, 703, 704, 709, 711, 714, 715, 716, 717, 721, 723, 724, 725, 726, 728, 729, 730, 742, 743, 752, 755, 760, 762, 763, 764, 765, 768, 781, 788, 789, 790, 793, 802, 804, 805, 806, 807, 808, 810, 812, 822, 826, 827, 832, 841, 842, 844, 848, 850, 852, 853, 856, 864, 867, 868, 877, 878, 885, 894], "c": [1, 24, 25, 26, 29, 46, 56, 58, 83, 85, 95, 103, 113, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 201, 202, 203, 205, 208, 209, 211, 212, 214, 220, 221, 222, 223, 224, 225, 227, 230, 231, 237, 249, 263, 271, 273, 362, 374, 429, 461, 465, 481, 483, 486, 491, 492, 493, 495, 496, 497, 500, 506, 508, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 565, 568, 569, 574, 577, 583, 587, 590, 591, 592, 593, 596, 599, 600, 607, 610, 611, 616, 617, 621, 691, 769, 852, 856, 881, 894], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 29, 55, 56, 58, 59, 60, 63, 64, 80, 83, 84, 85, 86, 89, 90, 93, 109, 114, 115, 118, 122, 123, 124, 126, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 155, 156, 159, 160, 161, 163, 165, 168, 169, 174, 175, 176, 179, 183, 187, 195, 196, 197, 198, 199, 204, 208, 210, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 260, 266, 267, 270, 275, 281, 282, 292, 293, 294, 295, 296, 297, 306, 307, 308, 312, 313, 315, 332, 334, 335, 336, 339, 346, 347, 350, 356, 359, 362, 365, 368, 370, 371, 372, 374, 379, 401, 402, 404, 406, 407, 411, 412, 413, 414, 415, 417, 421, 423, 425, 431, 442, 449, 450, 453, 454, 468, 471, 473, 475, 479, 491, 494, 496, 497, 500, 503, 504, 505, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 528, 529, 530, 539, 552, 553, 554, 557, 561, 562, 563, 564, 566, 568, 569, 570, 571, 573, 575, 576, 577, 578, 581, 582, 583, 587, 594, 595, 596, 599, 601, 602, 603, 604, 609, 610, 612, 615, 616, 617, 621, 629, 632, 636, 639, 642, 649, 650, 653, 656, 665, 676, 678, 680, 686, 690, 691, 692, 693, 698, 699, 700, 701, 722, 724, 725, 729, 730, 738, 741, 752, 781, 788, 789, 790, 792, 793, 799, 800, 801, 803, 804, 807, 810, 812, 822, 828, 833, 840, 841, 845, 879, 885, 894], "6": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 80, 83, 84, 85, 86, 87, 122, 125, 127, 128, 129, 130, 132, 133, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 155, 156, 158, 161, 162, 163, 164, 165, 167, 170, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 214, 215, 217, 222, 230, 231, 237, 249, 267, 286, 292, 304, 305, 308, 312, 329, 331, 334, 343, 351, 352, 357, 359, 361, 379, 401, 405, 407, 408, 411, 414, 415, 416, 417, 418, 420, 421, 422, 425, 436, 437, 442, 446, 450, 453, 454, 473, 475, 486, 500, 504, 527, 528, 539, 554, 555, 557, 558, 559, 560, 561, 562, 565, 566, 568, 569, 570, 571, 573, 574, 576, 578, 579, 583, 587, 590, 592, 593, 594, 595, 596, 599, 600, 603, 604, 606, 607, 609, 610, 612, 613, 616, 617, 621, 629, 650, 678, 684, 688, 689, 691, 693, 719, 730, 781, 793, 802, 804, 805, 806, 808, 812, 833, 837, 841, 845, 865, 894], "7": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 65, 125, 126, 127, 128, 130, 132, 136, 137, 139, 144, 145, 147, 149, 151, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 208, 209, 210, 211, 212, 237, 305, 312, 314, 330, 332, 333, 338, 340, 342, 348, 359, 361, 401, 411, 415, 421, 473, 475, 527, 528, 539, 555, 558, 560, 561, 565, 569, 570, 571, 573, 574, 578, 588, 590, 592, 593, 600, 603, 604, 607, 613, 621, 636, 698, 700, 705, 723, 728, 730, 807, 894], "float32": [1, 25, 58, 138, 237, 756, 894], "lazi": [1, 58, 63, 65, 90, 103, 114, 118, 159, 173, 217, 237, 249, 284, 401, 489, 509, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 615, 621], "i16": [1, 58, 429, 539], "i32": [1, 58, 83, 114, 186, 237, 292, 319, 342, 429, 454, 531, 539, 593, 621, 705, 732, 845], "f32": [1, 58, 237, 266, 407, 429, 504, 539, 649, 793, 894], "i64": [1, 12, 16, 56, 57, 58, 59, 63, 80, 82, 83, 84, 85, 86, 90, 103, 115, 118, 122, 123, 124, 125, 127, 129, 130, 132, 133, 135, 136, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 165, 167, 171, 173, 174, 175, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 194, 195, 196, 198, 203, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 230, 231, 237, 245, 248, 249, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 279, 280, 281, 282, 285, 286, 293, 295, 296, 297, 302, 303, 304, 305, 307, 308, 315, 316, 318, 321, 323, 325, 328, 335, 337, 347, 350, 352, 353, 354, 355, 357, 359, 360, 361, 362, 365, 368, 370, 371, 372, 374, 376, 379, 382, 383, 384, 396, 401, 402, 404, 405, 408, 409, 411, 412, 424, 426, 427, 429, 430, 431, 435, 436, 455, 456, 470, 471, 472, 473, 474, 475, 479, 480, 482, 485, 486, 493, 495, 500, 504, 505, 506, 511, 515, 518, 524, 527, 528, 529, 531, 539, 552, 554, 558, 559, 561, 562, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 583, 585, 586, 587, 590, 591, 593, 594, 595, 599, 600, 602, 603, 604, 605, 606, 607, 610, 612, 615, 616, 617, 621, 629, 630, 648, 649, 650, 653, 661, 662, 665, 676, 680, 683, 686, 687, 688, 689, 691, 701, 702, 704, 710, 712, 715, 718, 722, 725, 727, 741, 743, 744, 750, 752, 760, 773, 780, 796, 800, 803, 807, 810, 813, 814, 817, 821, 822, 826, 827, 864, 866, 867, 868, 874, 880, 882, 885, 894], "register_series_namespac": [1, 56, 57, 58], "math": [1, 59, 684, 823, 869, 894], "mathshortcut": [1, 59], "": [1, 25, 59, 64, 92, 93, 115, 127, 129, 131, 143, 144, 150, 158, 159, 179, 180, 196, 217, 237, 270, 271, 278, 279, 282, 316, 336, 347, 375, 392, 396, 398, 399, 401, 402, 409, 413, 437, 450, 451, 453, 457, 459, 460, 462, 465, 468, 470, 500, 503, 505, 508, 509, 515, 518, 520, 528, 539, 559, 568, 569, 575, 604, 614, 615, 621, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 650, 653, 654, 656, 661, 662, 665, 674, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 698, 702, 722, 723, 728, 735, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 784, 785, 788, 789, 790, 792, 793, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 821, 822, 823, 824, 826, 827, 829, 832, 833, 835, 836, 837, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 859, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 880, 881, 882, 883, 884, 894], "_": [1, 55, 59, 87, 174, 200, 237, 461, 852, 873, 894], "squar": [1, 59, 219, 375, 438, 539, 615, 771, 828, 894], "cube": [1, 59], "s2": [1, 111, 138, 237, 629, 678, 693, 760, 781, 812, 877, 885, 894], "renam": [1, 83, 92, 93, 186, 214, 237, 245, 384, 394, 470, 524, 539, 593, 610, 621, 862, 874, 894], "n2": 1, "in_plac": [1, 149, 190, 212, 237, 794, 796, 820, 827, 894], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 60, 62, 63, 65, 80, 81, 85, 89, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 119, 121, 123, 124, 126, 135, 138, 139, 141, 142, 144, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 186, 192, 198, 202, 205, 206, 207, 208, 210, 214, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 244, 246, 247, 248, 249, 264, 283, 288, 292, 301, 302, 303, 304, 305, 333, 334, 338, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 409, 419, 424, 429, 434, 436, 437, 441, 443, 445, 449, 460, 461, 463, 465, 469, 470, 474, 479, 480, 483, 488, 489, 496, 523, 525, 527, 531, 539, 552, 553, 554, 556, 557, 562, 564, 568, 569, 574, 575, 577, 579, 587, 593, 596, 597, 598, 600, 605, 606, 610, 621, 627, 628, 629, 630, 640, 666, 670, 674, 678, 679, 723, 724, 728, 734, 736, 737, 738, 744, 748, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 771, 781, 789, 790, 795, 805, 812, 825, 827, 832, 834, 836, 840, 851, 852, 854, 856, 876, 877, 879, 884, 885, 894], "s3": [1, 94, 104, 105, 894], "n3": 1, "8": [1, 24, 25, 26, 27, 28, 29, 39, 52, 54, 55, 56, 58, 59, 63, 109, 113, 114, 122, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 147, 149, 158, 162, 163, 164, 167, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 208, 209, 211, 212, 214, 237, 248, 259, 265, 266, 300, 302, 305, 306, 309, 310, 312, 361, 377, 401, 403, 404, 411, 412, 415, 416, 418, 420, 422, 429, 435, 451, 457, 465, 471, 475, 491, 496, 497, 500, 504, 506, 511, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 539, 555, 558, 559, 560, 561, 565, 571, 574, 578, 579, 587, 590, 592, 593, 600, 603, 604, 607, 610, 613, 621, 648, 649, 690, 705, 788, 799, 802, 804, 805, 806, 808, 842, 848, 856, 894], "9": [1, 24, 25, 26, 29, 55, 63, 122, 138, 145, 147, 151, 172, 186, 195, 208, 209, 212, 214, 217, 230, 237, 248, 259, 265, 277, 280, 300, 302, 305, 309, 310, 312, 314, 330, 339, 340, 361, 366, 374, 377, 401, 411, 413, 415, 421, 431, 435, 475, 492, 494, 527, 539, 570, 571, 573, 578, 593, 600, 603, 607, 610, 621, 648, 700, 709, 711, 717, 723, 724, 728, 729, 760, 799, 807, 809, 822, 894], "27": [1, 59, 230, 305, 319, 331, 342, 403, 539], "16": [1, 36, 49, 57, 109, 144, 145, 214, 237, 260, 302, 305, 349, 361, 415, 454, 503, 504, 539, 569, 570, 596, 610, 621, 642, 723, 728, 740, 788, 823, 845, 869, 894], "64": [1, 29, 35, 38, 51, 57, 59, 237, 403, 539, 598, 621, 788, 894], "25": [1, 59, 65, 144, 145, 159, 210, 214, 237, 307, 319, 333, 338, 342, 509, 539, 569, 570, 575, 581, 608, 610, 621, 692, 723, 728, 734, 788, 894], "125": [1, 59, 788, 894], "arg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 173, 202, 237, 508, 586, 621, 630, 876, 877, 894], "ani": [2, 3, 4, 6, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 61, 80, 81, 82, 83, 84, 86, 92, 93, 94, 95, 96, 100, 103, 104, 106, 108, 112, 114, 115, 119, 122, 129, 133, 135, 136, 138, 155, 156, 157, 171, 172, 173, 182, 183, 198, 199, 201, 202, 208, 237, 249, 263, 266, 292, 334, 352, 366, 383, 385, 394, 411, 413, 425, 428, 436, 465, 474, 488, 506, 513, 525, 539, 559, 564, 586, 621, 629, 630, 646, 649, 693, 724, 743, 760, 770, 797, 799, 811, 814, 856, 867, 875, 876, 877, 894], "kwarg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 172, 173, 202, 237, 586, 621, 876, 877, 894], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 539, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 900], "method": [2, 3, 4, 6, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 81, 92, 93, 95, 112, 129, 151, 156, 169, 176, 183, 206, 214, 229, 237, 246, 350, 361, 406, 407, 414, 415, 416, 417, 418, 420, 421, 422, 481, 521, 532, 533, 535, 539, 540, 543, 544, 545, 548, 559, 573, 588, 605, 610, 621, 630, 741, 752, 792, 793, 804, 878, 886, 888, 890, 894, 897, 898, 899], "A": [4, 25, 43, 62, 65, 87, 92, 93, 100, 102, 103, 104, 138, 144, 159, 171, 174, 183, 198, 200, 208, 209, 210, 214, 237, 243, 284, 312, 315, 318, 321, 323, 325, 328, 335, 350, 364, 367, 368, 370, 383, 384, 392, 404, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 441, 442, 447, 448, 449, 468, 471, 493, 494, 504, 508, 539, 569, 575, 590, 600, 607, 610, 621, 667, 698, 701, 704, 710, 712, 715, 718, 725, 741, 799, 800, 801, 803, 806, 807, 808, 832, 833, 838, 839, 840, 846, 847, 856, 859, 894], "encod": [4, 54, 92, 93, 103, 200, 237, 288, 443, 670, 834], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 28, 56, 65, 81, 83, 86, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 111, 113, 114, 115, 119, 121, 125, 146, 156, 159, 165, 184, 186, 191, 205, 214, 237, 249, 279, 283, 284, 341, 347, 358, 366, 385, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 430, 434, 435, 452, 458, 459, 464, 493, 505, 539, 555, 574, 575, 579, 583, 593, 597, 598, 599, 610, 613, 615, 621, 629, 630, 662, 666, 667, 731, 749, 760, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 814, 821, 825, 826, 843, 849, 850, 855, 876, 894], "string": [4, 5, 7, 10, 11, 15, 25, 27, 28, 32, 46, 54, 65, 92, 93, 103, 112, 113, 115, 117, 138, 142, 144, 145, 159, 186, 192, 208, 210, 214, 237, 271, 290, 293, 329, 333, 338, 349, 355, 362, 414, 415, 416, 417, 418, 420, 421, 422, 440, 441, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 493, 495, 508, 515, 518, 539, 556, 557, 567, 569, 570, 575, 593, 610, 613, 621, 654, 672, 676, 719, 723, 728, 740, 830, 831, 832, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 894], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 567, 589, 621], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 119, 186, 214, 237, 593, 610, 621], "previous": 5, "save": [5, 548], "share": [5, 46, 131, 237, 735, 894], "option": [5, 6, 7, 15, 55, 65, 92, 94, 95, 96, 100, 104, 106, 108, 109, 112, 113, 114, 115, 129, 159, 165, 169, 198, 200, 205, 210, 237, 350, 375, 413, 414, 415, 416, 417, 418, 420, 421, 422, 434, 459, 486, 488, 489, 513, 514, 527, 539, 548, 574, 575, 583, 621, 771, 799, 800, 801, 802, 803, 804, 806, 807, 808, 814, 825, 850, 874, 894], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 43, 45, 47, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 118, 121, 122, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 222, 229, 231, 237, 245, 248, 249, 258, 260, 263, 264, 265, 266, 269, 270, 271, 278, 279, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 316, 329, 332, 333, 337, 338, 341, 343, 344, 345, 346, 347, 350, 352, 353, 357, 358, 359, 361, 362, 366, 375, 378, 380, 383, 384, 385, 401, 402, 406, 407, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 473, 474, 479, 480, 483, 484, 485, 486, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 505, 507, 508, 509, 511, 513, 514, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 539, 554, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 574, 575, 578, 579, 583, 584, 586, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 603, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 639, 642, 646, 647, 648, 649, 652, 653, 654, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 676, 680, 681, 682, 686, 687, 688, 689, 690, 692, 693, 697, 698, 699, 702, 719, 722, 723, 727, 728, 731, 734, 735, 736, 737, 738, 741, 742, 743, 744, 749, 750, 752, 767, 771, 773, 788, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 821, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 838, 839, 840, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 862, 866, 867, 873, 874, 875, 876, 877, 879, 880, 882, 883, 884, 885, 894], "json": [5, 7, 27, 28, 98, 99, 107, 237, 449, 548, 567, 589, 613, 621, 840], "produc": [5, 114, 115, 391, 514, 579, 621], "reset": [6, 119], "default": [6, 23, 24, 25, 26, 27, 28, 29, 80, 82, 83, 84, 85, 86, 90, 92, 93, 100, 103, 112, 113, 114, 115, 118, 131, 143, 145, 146, 156, 159, 165, 174, 182, 183, 184, 206, 215, 237, 279, 283, 284, 293, 343, 344, 345, 346, 358, 380, 385, 398, 399, 402, 407, 424, 430, 447, 452, 454, 458, 459, 464, 465, 489, 490, 509, 513, 525, 539, 557, 568, 570, 575, 583, 598, 605, 613, 621, 662, 666, 667, 676, 734, 735, 736, 737, 738, 749, 784, 785, 788, 793, 810, 821, 829, 838, 843, 845, 849, 850, 855, 883, 894], "state": [6, 62, 73, 498, 548, 554, 562, 587, 596, 621], "note": [6, 15, 55, 65, 80, 81, 82, 84, 86, 90, 92, 94, 100, 102, 104, 113, 114, 115, 118, 119, 121, 122, 134, 143, 144, 145, 156, 158, 159, 169, 172, 173, 182, 183, 199, 201, 205, 209, 210, 214, 237, 266, 283, 304, 305, 309, 310, 329, 333, 338, 362, 368, 370, 414, 415, 416, 417, 418, 420, 421, 422, 434, 450, 452, 453, 458, 464, 465, 470, 472, 498, 507, 522, 539, 554, 562, 563, 568, 569, 570, 571, 575, 578, 590, 596, 607, 610, 621, 649, 666, 688, 689, 719, 728, 813, 814, 820, 825, 841, 843, 844, 849, 855, 856, 865, 894], "oper": [6, 46, 63, 70, 71, 80, 82, 83, 84, 85, 86, 92, 100, 122, 133, 138, 143, 150, 160, 166, 169, 171, 173, 177, 197, 201, 202, 205, 208, 216, 217, 237, 244, 284, 301, 302, 303, 304, 305, 306, 374, 394, 407, 409, 486, 487, 504, 539, 562, 568, 571, 574, 578, 584, 621, 629, 686, 687, 688, 689, 690, 793, 795, 872, 875, 876, 877, 884, 894], "remov": [6, 127, 209, 237, 260, 347, 349, 452, 458, 464, 505, 539, 558, 607, 621, 642, 740, 843, 849, 855, 894], "from": [6, 25, 55, 65, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 126, 127, 131, 133, 142, 144, 145, 156, 157, 159, 160, 165, 178, 182, 184, 186, 205, 206, 208, 210, 237, 301, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 347, 361, 375, 398, 399, 402, 424, 436, 437, 447, 454, 465, 481, 483, 492, 493, 501, 502, 503, 505, 513, 525, 538, 539, 558, 562, 567, 569, 570, 575, 583, 589, 590, 593, 605, 611, 621, 629, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 754, 771, 784, 785, 786, 788, 810, 838, 845, 882, 885, 894], "environ": [6, 23], "local": [6, 94, 104, 789, 790, 894], "non": [6, 55, 157, 165, 186, 209, 214, 237, 402, 413, 414, 415, 416, 417, 418, 420, 421, 422, 442, 448, 492, 495, 539, 583, 593, 607, 610, 621, 667, 788, 799, 800, 801, 802, 803, 804, 806, 807, 808, 833, 839, 876, 894], "env": 6, "back": [6, 55, 133, 202, 237, 629, 877, 894], "valu": [6, 9, 10, 23, 25, 27, 40, 41, 53, 55, 63, 64, 83, 85, 92, 93, 102, 103, 105, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 129, 133, 134, 135, 139, 142, 144, 145, 146, 147, 151, 156, 162, 163, 164, 165, 167, 169, 171, 174, 175, 176, 178, 182, 183, 184, 188, 189, 192, 193, 194, 195, 198, 199, 202, 208, 209, 210, 211, 220, 221, 223, 224, 225, 227, 228, 237, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 268, 269, 270, 272, 274, 275, 276, 278, 281, 282, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 305, 306, 307, 309, 310, 312, 314, 326, 330, 339, 344, 345, 346, 348, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 376, 377, 381, 382, 383, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 406, 407, 410, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 447, 448, 449, 455, 456, 459, 461, 462, 463, 468, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 492, 495, 496, 498, 499, 500, 506, 507, 513, 515, 516, 517, 518, 519, 522, 523, 528, 531, 539, 559, 563, 564, 569, 570, 572, 573, 580, 581, 582, 583, 585, 588, 590, 594, 595, 600, 601, 602, 607, 608, 613, 614, 621, 625, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 648, 651, 652, 653, 655, 657, 658, 659, 661, 665, 668, 670, 671, 672, 673, 676, 677, 680, 681, 682, 684, 685, 690, 691, 692, 694, 695, 698, 700, 716, 720, 729, 735, 736, 737, 738, 741, 742, 743, 746, 748, 749, 752, 755, 757, 758, 760, 761, 762, 763, 764, 765, 768, 776, 777, 779, 780, 782, 784, 785, 786, 787, 788, 791, 792, 793, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 811, 812, 813, 814, 817, 818, 822, 823, 824, 825, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 844, 846, 847, 850, 852, 853, 854, 859, 865, 867, 868, 869, 870, 877, 878, 881, 882, 884, 885, 894], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 493, 494, 495, 496, 497, 500, 503, 504, 505, 506, 508, 509, 511, 513, 515, 516, 517, 518, 519, 520, 524, 525, 526, 527, 528, 529, 530, 531, 539, 548, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621, 626, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 648, 649, 650, 653, 654, 656, 661, 662, 665, 667, 674, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 741, 742, 743, 744, 746, 749, 750, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 788, 789, 790, 792, 793, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 817, 821, 822, 823, 824, 826, 827, 829, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 880, 881, 882, 883, 884, 885, 894], "current": [7, 23, 81, 121, 123, 124, 237, 284, 333, 402, 539, 548, 552, 553, 621, 679, 683, 723, 788, 894], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 266, 649], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 40, 55, 60, 62, 63, 80, 81, 85, 92, 93, 96, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 121, 123, 124, 135, 136, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 159, 171, 174, 184, 190, 192, 198, 202, 205, 206, 207, 210, 212, 214, 221, 223, 224, 227, 237, 246, 247, 248, 249, 258, 260, 264, 266, 280, 283, 288, 292, 301, 302, 303, 304, 305, 306, 334, 343, 344, 345, 346, 350, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 389, 390, 407, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 428, 429, 434, 436, 437, 441, 443, 445, 455, 456, 460, 461, 463, 465, 469, 470, 479, 480, 483, 488, 489, 490, 492, 498, 513, 523, 525, 527, 531, 539, 552, 554, 556, 557, 562, 564, 565, 568, 569, 574, 575, 579, 587, 596, 597, 598, 600, 605, 606, 610, 621, 627, 628, 629, 630, 639, 642, 647, 649, 663, 666, 670, 674, 679, 686, 687, 688, 689, 690, 724, 734, 736, 737, 738, 744, 748, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 789, 790, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 814, 815, 820, 825, 827, 832, 834, 836, 846, 847, 851, 852, 854, 856, 875, 876, 877, 879, 880, 882, 884, 894], "ascii": [8, 15, 451, 453, 457, 468, 842, 844, 848, 859], "charact": [8, 10, 15, 21, 25, 92, 93, 103, 237, 329, 446, 450, 451, 452, 457, 458, 460, 461, 464, 468, 587, 621, 719, 837, 841, 842, 843, 848, 849, 851, 852, 855, 859], "print": [8, 10, 12, 14, 20, 93, 109, 130, 142, 143, 157, 160, 216, 237, 360, 539, 572, 621, 760, 799, 894], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 45, 80, 92, 93, 94, 103, 104, 174, 197, 202, 208, 209, 237, 607, 621, 877, 894], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 55, 60, 62, 65, 81, 92, 93, 95, 96, 100, 103, 107, 108, 110, 111, 112, 113, 114, 115, 121, 123, 124, 126, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 184, 190, 192, 198, 202, 205, 210, 212, 214, 220, 221, 223, 224, 225, 227, 230, 237, 246, 247, 249, 258, 260, 264, 266, 280, 283, 301, 302, 303, 304, 305, 306, 334, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 407, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 426, 429, 434, 436, 437, 441, 445, 455, 456, 460, 461, 463, 465, 479, 480, 483, 489, 490, 498, 513, 523, 525, 527, 531, 539, 552, 553, 554, 556, 557, 562, 568, 569, 574, 575, 577, 579, 587, 596, 597, 598, 600, 610, 621, 629, 639, 642, 649, 663, 666, 674, 678, 679, 686, 687, 688, 689, 690, 724, 734, 736, 737, 738, 744, 753, 755, 757, 760, 761, 762, 763, 764, 765, 767, 768, 771, 781, 789, 790, 793, 794, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 815, 820, 825, 827, 832, 836, 846, 847, 851, 852, 854, 856, 875, 876, 877, 879, 880, 882, 884, 885, 894], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 455, 846], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 442, 448, 833, 839, 874, 894], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 55, 57, 59, 64, 83, 105, 114, 123, 124, 126, 127, 129, 130, 134, 135, 138, 141, 142, 150, 158, 159, 163, 164, 172, 175, 176, 191, 192, 193, 211, 214, 221, 223, 224, 225, 226, 227, 229, 230, 237, 243, 250, 251, 252, 253, 254, 255, 275, 292, 294, 298, 299, 306, 309, 310, 334, 343, 344, 345, 346, 347, 348, 356, 361, 368, 370, 371, 372, 374, 375, 380, 381, 386, 387, 388, 395, 398, 399, 402, 403, 406, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 432, 433, 434, 438, 439, 476, 477, 484, 491, 492, 494, 497, 505, 516, 517, 520, 525, 526, 530, 539, 552, 558, 559, 563, 564, 574, 575, 581, 582, 588, 600, 601, 608, 610, 611, 621, 631, 632, 633, 634, 635, 636, 677, 684, 685, 690, 691, 724, 737, 738, 742, 746, 788, 799, 801, 802, 804, 805, 806, 808, 809, 823, 824, 828, 869, 870, 894], "fmt": [9, 336, 360, 465, 508, 539, 572, 621, 726, 856], "mix": [9, 465, 691, 856, 894], "control": [9, 113, 557, 621], "how": [9, 46, 63, 83, 86, 102, 129, 158, 208, 209, 237, 265, 293, 307, 361, 410, 539, 559, 574, 607, 621, 648, 676, 692, 894], "float": [9, 34, 35, 40, 64, 105, 110, 111, 112, 114, 115, 131, 134, 159, 176, 184, 189, 229, 237, 264, 294, 295, 296, 297, 309, 310, 334, 343, 344, 345, 346, 350, 351, 356, 361, 362, 364, 367, 368, 370, 371, 372, 380, 386, 395, 398, 399, 403, 406, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 428, 491, 492, 500, 515, 516, 517, 518, 521, 523, 526, 528, 530, 539, 563, 575, 588, 595, 596, 621, 647, 674, 677, 680, 681, 682, 693, 724, 734, 735, 736, 737, 738, 742, 746, 759, 771, 774, 776, 777, 778, 779, 784, 785, 791, 792, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 813, 814, 825, 829, 865, 883, 894], "point": [9, 34, 35, 104, 114, 115, 134, 144, 160, 184, 237, 294, 309, 310, 334, 351, 356, 368, 370, 423, 424, 539, 563, 569, 579, 590, 621, 677, 724, 742, 746, 759, 809, 810, 894], "displai": [9, 14, 18], "full": [9, 32, 61, 92, 93, 94, 103, 104, 579, 621], "format": [9, 11, 15, 25, 91, 92, 93, 103, 105, 132, 142, 156, 165, 183, 199, 235, 237, 333, 336, 454, 465, 561, 567, 583, 613, 621, 726, 845, 856, 893], "number": [9, 10, 12, 20, 21, 25, 29, 55, 74, 80, 82, 84, 86, 89, 90, 92, 93, 95, 103, 107, 113, 114, 118, 131, 132, 134, 135, 147, 156, 157, 160, 161, 168, 169, 184, 188, 189, 195, 208, 220, 222, 231, 237, 265, 270, 278, 282, 284, 286, 300, 306, 307, 317, 319, 324, 326, 334, 339, 340, 342, 344, 345, 346, 350, 352, 357, 359, 368, 370, 377, 378, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 427, 428, 430, 450, 453, 461, 462, 473, 479, 496, 511, 525, 529, 539, 561, 562, 563, 564, 571, 578, 587, 594, 595, 598, 603, 616, 617, 621, 648, 653, 661, 665, 667, 690, 692, 703, 705, 714, 716, 724, 729, 730, 732, 735, 736, 737, 738, 741, 743, 750, 759, 773, 781, 782, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 817, 818, 821, 829, 841, 844, 852, 853, 866, 879, 883, 894], "int": [10, 12, 20, 21, 25, 29, 40, 57, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 116, 118, 122, 131, 134, 135, 137, 146, 147, 148, 150, 156, 157, 159, 161, 162, 163, 167, 168, 169, 180, 182, 184, 187, 188, 189, 191, 193, 194, 195, 196, 203, 208, 211, 213, 215, 222, 231, 237, 264, 265, 269, 270, 278, 279, 282, 283, 284, 286, 295, 296, 297, 306, 307, 344, 345, 346, 350, 351, 352, 357, 358, 359, 362, 378, 402, 403, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 430, 435, 439, 447, 451, 454, 457, 459, 461, 462, 468, 469, 470, 473, 474, 475, 479, 484, 489, 492, 496, 500, 501, 502, 503, 509, 511, 515, 517, 518, 519, 520, 523, 525, 526, 527, 528, 529, 530, 539, 562, 563, 564, 571, 575, 578, 587, 594, 595, 598, 599, 601, 603, 604, 608, 609, 612, 616, 617, 621, 637, 638, 647, 648, 652, 653, 661, 662, 665, 666, 667, 674, 678, 680, 681, 682, 690, 692, 735, 736, 737, 738, 741, 742, 743, 749, 750, 772, 773, 776, 777, 779, 781, 782, 784, 785, 786, 787, 788, 791, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 817, 818, 821, 826, 829, 838, 842, 845, 848, 850, 852, 853, 859, 865, 866, 867, 868, 879, 883, 894], "liter": [11, 15, 60, 65, 95, 115, 142, 156, 162, 163, 167, 168, 171, 182, 183, 186, 194, 198, 214, 237, 246, 247, 312, 350, 362, 374, 408, 441, 455, 456, 489, 501, 502, 509, 513, 523, 527, 531, 539, 564, 593, 610, 621, 627, 628, 698, 741, 813, 814, 832, 846, 847, 894], "left": [11, 65, 110, 111, 144, 145, 158, 159, 209, 237, 344, 345, 346, 361, 362, 414, 415, 416, 417, 418, 420, 421, 422, 425, 451, 468, 478, 492, 498, 499, 507, 522, 539, 569, 570, 574, 575, 607, 621, 736, 737, 738, 811, 842, 859, 878, 894], "center": [11, 344, 345, 346, 413, 414, 415, 416, 417, 418, 420, 421, 422, 539, 736, 737, 738, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "right": [11, 13, 65, 92, 93, 110, 111, 144, 145, 158, 159, 237, 344, 345, 346, 362, 414, 415, 416, 417, 418, 420, 421, 422, 425, 434, 457, 492, 539, 569, 570, 574, 575, 621, 736, 737, 738, 811, 825, 848, 894], "cell": 11, "align": [11, 55, 468, 859], "keyerror": [11, 15], "recognis": [11, 15, 112], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 28, 29, 46, 61, 64, 65, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 121, 122, 133, 142, 144, 145, 156, 159, 165, 169, 171, 183, 184, 191, 199, 201, 205, 209, 237, 249, 279, 284, 295, 296, 297, 312, 353, 375, 383, 385, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 430, 434, 435, 436, 437, 450, 452, 453, 458, 459, 460, 461, 462, 464, 465, 479, 486, 488, 489, 490, 496, 498, 507, 513, 525, 539, 569, 570, 574, 575, 579, 583, 590, 598, 599, 607, 613, 615, 621, 629, 630, 662, 680, 681, 682, 698, 748, 771, 795, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 815, 821, 825, 826, 841, 843, 844, 849, 850, 851, 852, 853, 855, 856, 872, 876, 879, 884, 894], "rang": [12, 64, 65, 102, 131, 144, 157, 237, 314, 326, 330, 331, 333, 338, 339, 361, 489, 494, 501, 502, 539, 569, 621, 700, 716, 720, 721, 723, 728, 729, 735, 788, 894], "100": [12, 83, 86, 92, 93, 103, 107, 237, 468, 489, 800, 801, 803, 894], "98": [12, 150, 237, 436, 437, 474, 479, 539], "99": [12, 134, 135, 150, 153, 237, 244, 350, 352, 436, 437, 474, 479, 492, 539, 563, 564, 621, 734, 741, 894], "10": [12, 24, 25, 26, 29, 55, 63, 64, 65, 102, 103, 109, 114, 115, 124, 133, 141, 144, 145, 147, 149, 150, 151, 168, 173, 175, 179, 180, 186, 195, 214, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 248, 256, 257, 258, 259, 260, 265, 270, 278, 279, 282, 295, 300, 302, 305, 307, 309, 310, 312, 333, 338, 341, 358, 359, 361, 366, 374, 377, 378, 381, 402, 415, 435, 468, 473, 504, 509, 511, 529, 539, 554, 569, 570, 571, 573, 578, 586, 587, 593, 598, 602, 603, 610, 621, 630, 648, 653, 661, 662, 665, 680, 692, 698, 728, 731, 734, 750, 760, 773, 775, 788, 813, 814, 866, 894], "95": [12, 244, 539], "96": [12, 244, 539], "97": [12, 150, 237, 244, 539], "move": [13, 344, 345, 346, 414, 415, 417, 421, 539, 736, 737, 738, 800, 801, 803, 807, 894], "inlin": 13, "parenthes": 13, "below": [14, 94, 104, 129, 143, 237, 361, 531, 539, 559, 621], "when": [14, 18, 29, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 87, 92, 93, 96, 100, 103, 104, 106, 107, 114, 115, 117, 122, 130, 131, 133, 135, 138, 144, 173, 182, 186, 200, 237, 295, 296, 297, 344, 345, 346, 352, 383, 385, 392, 452, 458, 464, 465, 498, 507, 539, 564, 569, 579, 593, 598, 621, 629, 680, 681, 682, 735, 736, 737, 738, 743, 813, 814, 843, 849, 855, 873, 894], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 55], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 442, 447, 448, 449, 833, 838, 839, 840], "none": [15, 23, 24, 25, 26, 27, 28, 29, 32, 41, 45, 55, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 126, 129, 134, 135, 142, 144, 145, 146, 151, 158, 159, 160, 163, 165, 169, 170, 182, 184, 186, 189, 191, 198, 200, 202, 205, 206, 207, 208, 209, 210, 214, 237, 245, 248, 249, 259, 269, 279, 284, 286, 295, 296, 297, 300, 302, 305, 309, 310, 332, 333, 338, 344, 345, 346, 347, 350, 351, 352, 357, 358, 361, 362, 368, 369, 370, 371, 372, 377, 383, 385, 400, 402, 408, 413, 414, 415, 416, 417, 418, 420, 421, 422, 424, 428, 429, 430, 431, 435, 440, 441, 444, 445, 449, 450, 451, 452, 453, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 470, 478, 486, 488, 489, 492, 495, 496, 502, 503, 505, 506, 513, 514, 523, 524, 526, 527, 530, 539, 552, 553, 559, 563, 564, 569, 570, 573, 574, 575, 577, 579, 583, 593, 595, 596, 597, 598, 599, 600, 605, 606, 607, 610, 611, 613, 615, 621, 630, 637, 638, 652, 662, 667, 679, 680, 691, 693, 707, 708, 722, 723, 728, 733, 734, 736, 737, 738, 741, 742, 743, 745, 748, 749, 751, 752, 764, 765, 771, 776, 777, 778, 779, 783, 792, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 816, 818, 821, 822, 825, 826, 829, 831, 832, 835, 836, 840, 841, 842, 843, 844, 848, 849, 850, 852, 853, 854, 855, 856, 871, 874, 877, 878, 883, 884, 894], "rounded_corn": 15, "style": [15, 174, 237], "border": 15, "line": [15, 92, 93, 95, 103, 142, 152, 154, 237], "includ": [15, 23, 25, 61, 94, 104, 114, 131, 144, 205, 208, 237, 334, 362, 460, 461, 498, 539, 569, 621, 724, 735, 851, 852, 884, 894], "row": [15, 20, 25, 27, 29, 55, 56, 58, 72, 74, 79, 83, 84, 86, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 113, 114, 122, 129, 133, 136, 138, 142, 144, 146, 147, 152, 154, 156, 157, 159, 160, 161, 165, 169, 191, 195, 196, 199, 206, 208, 209, 215, 219, 222, 231, 237, 249, 267, 349, 359, 378, 402, 411, 435, 446, 473, 498, 499, 507, 511, 515, 518, 522, 529, 539, 554, 559, 562, 565, 566, 569, 571, 575, 576, 578, 579, 583, 598, 599, 603, 604, 605, 607, 612, 615, 616, 617, 621, 629, 650, 740, 750, 773, 788, 797, 826, 837, 866, 894], "divid": [15, 333, 338, 344, 345, 346, 375, 539, 723, 728, 736, 737, 738, 771, 894], "same": [15, 46, 55, 62, 113, 122, 206, 214, 219, 237, 243, 248, 249, 349, 413, 414, 415, 416, 417, 418, 420, 421, 422, 493, 539, 579, 605, 610, 615, 621, 625, 629, 630, 698, 740, 799, 800, 801, 802, 803, 804, 806, 807, 808, 885, 894], "dens": [15, 142, 237, 407, 539, 793, 894], "space": 15, "horizont": [15, 63, 138, 149, 208, 237, 495, 498, 499, 500, 504, 507, 515, 518, 522, 528], "markdown": 15, "compat": [15, 29, 102, 104, 237, 598, 621], "No": 15, "appli": [15, 25, 60, 63, 103, 112, 114, 115, 138, 173, 217, 237, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 334, 339, 340, 342, 345, 346, 383, 401, 413, 414, 415, 417, 421, 465, 486, 489, 498, 499, 507, 514, 522, 539, 571, 578, 579, 586, 621, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 724, 729, 730, 732, 737, 738, 799, 800, 801, 803, 807, 856, 894], "round": [15, 57, 294, 356, 476, 539, 677, 746, 894], "corner": 15, "op": [15, 115, 237, 410, 539, 894], "The": [15, 29, 40, 47, 55, 61, 80, 82, 83, 84, 86, 89, 92, 100, 102, 103, 104, 122, 130, 142, 144, 145, 146, 151, 156, 159, 166, 182, 183, 186, 207, 210, 214, 219, 237, 249, 283, 284, 286, 287, 288, 289, 314, 326, 329, 330, 333, 338, 339, 350, 357, 358, 383, 407, 410, 413, 414, 415, 416, 417, 418, 420, 421, 422, 431, 434, 437, 440, 443, 444, 450, 451, 452, 457, 458, 464, 468, 490, 509, 524, 532, 533, 535, 539, 540, 543, 544, 545, 552, 569, 570, 571, 573, 575, 578, 579, 584, 587, 593, 598, 606, 610, 615, 621, 666, 669, 670, 671, 679, 700, 716, 719, 720, 723, 728, 729, 741, 749, 752, 793, 799, 800, 801, 802, 803, 804, 806, 807, 808, 822, 825, 831, 834, 835, 841, 842, 843, 848, 849, 855, 859, 886, 888, 890, 894, 897, 898, 899], "one": [15, 55, 72, 80, 82, 83, 84, 85, 86, 115, 135, 136, 142, 144, 145, 156, 165, 174, 182, 183, 200, 204, 217, 218, 237, 244, 352, 374, 413, 436, 437, 469, 474, 486, 515, 518, 527, 528, 539, 558, 564, 565, 569, 570, 583, 611, 621, 629, 743, 799, 860, 894], "more": [15, 27, 29, 55, 79, 80, 81, 82, 83, 84, 85, 86, 94, 100, 104, 114, 115, 122, 143, 156, 160, 165, 169, 172, 182, 183, 184, 206, 219, 237, 249, 295, 296, 297, 374, 375, 383, 424, 434, 480, 515, 518, 528, 539, 568, 583, 598, 605, 615, 621, 630, 680, 681, 682, 771, 810, 825, 880, 894, 901], "semigraph": 15, "box": [15, 122, 237], "draw": [15, 20, 21], "found": [15, 25, 67, 76, 78, 83, 130, 209, 237, 385, 425, 449, 465, 539, 607, 621, 811, 840, 894], "unicod": 15, "block": [15, 590, 612, 621, 813, 814, 894], "http": [15, 81, 102, 121, 447, 838, 901], "en": 15, "wikipedia": 15, "org": [15, 81, 121], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19], "etc": [16, 80, 92, 94, 96, 100, 104, 106, 108, 489, 813, 814, 894], "inform": [18, 61, 94, 104, 172, 237, 295, 296, 297, 375, 434, 539, 587, 621, 680, 681, 682, 771, 825, 894], "separ": [19, 25, 87, 174, 200, 205, 237, 267, 271, 446, 495, 498, 499, 650, 654, 837, 864, 873, 894], "between": [19, 63, 112, 113, 114, 115, 176, 229, 237, 271, 292, 308, 362, 402, 406, 418, 440, 497, 520, 521, 525, 539, 588, 621, 654, 674, 693, 788, 792, 804, 831, 894], "set_tbl_column_data_type_inlin": 19, "max": [20, 29, 114, 115, 126, 135, 144, 145, 174, 237, 295, 296, 302, 352, 401, 407, 414, 426, 462, 539, 564, 569, 570, 598, 614, 621, 667, 680, 681, 686, 691, 743, 793, 800, 815, 853, 894], "both": [20, 25, 46, 65, 144, 145, 158, 159, 166, 182, 237, 248, 362, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 574, 575, 584, 621], "element": [20, 90, 115, 118, 250, 251, 252, 253, 254, 255, 266, 267, 298, 299, 301, 302, 303, 304, 305, 306, 348, 358, 366, 381, 402, 407, 410, 425, 431, 432, 433, 438, 461, 462, 476, 477, 479, 539, 630, 631, 632, 633, 634, 635, 636, 649, 650, 684, 685, 686, 687, 688, 689, 690, 739, 744, 760, 775, 788, 793, 811, 822, 823, 824, 828, 829, 852, 853, 869, 870, 879, 880, 883, 894], "width": [21, 92, 93, 237, 451, 457, 468, 621, 842, 848, 859], "char": [21, 46, 453, 844], "enabl": [22, 186, 214, 237, 426, 539, 593, 610, 621, 815, 894], "addit": [22, 83, 94, 104, 112, 113, 186, 214, 237, 350, 524, 539, 593, 610, 621, 741, 894], "verbos": 22, "debug": [22, 554, 562, 579, 621], "log": [22, 57, 343, 479, 539, 734, 879, 894], "if_set": 23, "dict": [23, 29, 56, 58, 61, 80, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 114, 156, 171, 172, 178, 182, 183, 185, 198, 199, 237, 385, 527, 539, 590, 592, 621], "show": [23, 129, 142, 160, 170, 237, 559, 587, 596, 621], "variabl": [23, 87, 165, 200, 237, 583, 621, 873, 894], "chang": [23, 55, 64, 92, 93, 105, 208, 209, 210, 237, 306, 307, 333, 385, 402, 414, 415, 416, 417, 418, 420, 421, 422, 539, 607, 621, 690, 722, 723, 788, 820, 894], "restrict": [23, 462, 853], "dictionari": [23, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 156, 171, 182, 183, 198, 199, 237, 385, 539, 691, 894], "those": [23, 407, 539, 793, 894], "_have_": 23, "been": [23, 407, 539, 793, 894], "set_stat": 23, "all_stat": 23, "file": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 133, 237, 562, 589, 597, 598, 613, 621, 629, 894], "binaryio": [24, 26, 91, 92, 95, 96, 97, 100, 101, 237], "bytesio": [24, 25, 26, 29, 91, 92, 93, 95, 96, 100, 237], "path": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 237, 426, 449, 539, 589, 597, 598, 613, 621, 815, 840, 894], "compress": [24, 26, 29, 237, 597, 598, 621], "avrocompress": [24, 237], "uncompress": [24, 26, 29, 96, 106, 237, 598, 621], "write": [24, 25, 26, 27, 29, 93, 237, 295, 296, 297, 539, 577, 596, 598, 613, 621, 680, 681, 682, 894], "apach": [24, 29, 91, 237], "avro": [24, 91, 237, 548], "should": [24, 25, 26, 27, 28, 29, 80, 82, 84, 86, 90, 94, 112, 113, 115, 118, 121, 122, 144, 156, 159, 183, 199, 219, 237, 244, 249, 266, 293, 306, 341, 368, 370, 413, 414, 415, 416, 417, 418, 420, 421, 422, 425, 434, 465, 513, 539, 558, 569, 574, 575, 579, 596, 597, 598, 613, 615, 621, 630, 649, 676, 690, 731, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 825, 856, 894], "written": [24, 25, 26, 27, 28, 29, 237, 597, 598, 613, 621], "snappi": [24, 29, 237, 598, 621], "deflat": [24, 237], "import": [24, 25, 26, 29, 32, 65, 80, 84, 85, 103, 104, 105, 110, 111, 112, 113, 114, 115, 126, 142, 144, 157, 159, 186, 202, 208, 210, 237, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 503, 513, 569, 575, 579, 593, 621, 684, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 754, 757, 761, 762, 763, 799, 823, 869, 894], "pathlib": [24, 25, 26, 27, 28, 29, 91, 95, 96, 98, 99, 103, 106, 107, 237, 589, 597, 598, 613, 621], "foo": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 171, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 211, 212, 213, 216, 217, 237, 245, 264, 268, 269, 272, 273, 295, 296, 297, 329, 359, 360, 403, 411, 427, 428, 440, 442, 444, 446, 448, 452, 458, 460, 462, 464, 466, 467, 473, 475, 486, 489, 491, 493, 496, 497, 506, 510, 511, 513, 515, 516, 517, 518, 519, 520, 521, 524, 525, 526, 529, 530, 531, 539, 555, 558, 559, 560, 565, 572, 573, 574, 590, 592, 593, 600, 605, 606, 609, 611, 613, 621, 654, 680, 719, 833, 835, 837, 839, 853, 894], "bar": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 147, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 171, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 203, 206, 207, 211, 212, 216, 217, 237, 245, 273, 360, 434, 444, 446, 460, 462, 486, 491, 493, 496, 497, 506, 511, 515, 516, 517, 518, 519, 520, 524, 525, 526, 529, 530, 531, 539, 555, 558, 559, 560, 565, 572, 573, 574, 590, 592, 593, 600, 605, 606, 609, 613, 621, 654, 825, 835, 837, 853, 894], "ham": [24, 25, 26, 29, 87, 125, 127, 128, 129, 130, 136, 137, 139, 146, 147, 149, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 200, 201, 202, 203, 206, 211, 212, 237, 493, 555, 558, 559, 560, 565, 574, 590, 592, 593, 600, 605, 611, 621], "d": [24, 25, 26, 29, 46, 63, 83, 105, 126, 142, 146, 147, 150, 158, 161, 195, 197, 208, 212, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 316, 336, 362, 429, 442, 448, 461, 465, 492, 509, 539, 574, 600, 621, 702, 726, 833, 839, 852, 856], "e": [24, 25, 26, 29, 46, 81, 92, 93, 95, 96, 100, 106, 108, 126, 142, 147, 161, 195, 197, 208, 237, 343, 347, 362, 380, 385, 426, 429, 434, 505, 539, 577, 590, 621, 734, 812, 815, 825, 876, 894], "dirpath": [24, 25, 26, 29, 103, 237], "new_fil": [24, 25, 26, 29, 237], "has_head": [25, 92, 93, 95, 103, 237], "sep": [25, 89, 92, 93, 103, 237, 495], "quot": [25, 92, 93, 103, 237], "batch_siz": [25, 92, 93, 107, 237], "1024": [25, 29, 92, 93, 107, 237, 598, 621], "datetime_format": [25, 237], "date_format": [25, 237, 336], "time_format": [25, 237], "float_precis": [25, 237], "null_valu": [25, 92, 93, 103, 237], "_io": [25, 91, 95, 96, 237], "comma": [25, 237], "csv": [25, 92, 93, 95, 103, 237, 548, 597, 598, 614, 621], "result": [25, 27, 28, 55, 80, 84, 86, 94, 102, 103, 105, 106, 108, 115, 133, 144, 155, 169, 189, 217, 237, 344, 345, 346, 350, 375, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 426, 428, 460, 461, 489, 498, 499, 500, 514, 528, 539, 551, 569, 579, 587, 595, 597, 598, 613, 621, 629, 736, 737, 738, 771, 797, 799, 800, 801, 802, 803, 804, 806, 807, 808, 815, 818, 851, 852, 876, 894], "instead": [25, 27, 28, 90, 100, 114, 118, 122, 144, 156, 169, 171, 182, 183, 186, 202, 214, 237, 258, 260, 450, 452, 458, 464, 489, 539, 563, 569, 593, 610, 613, 621, 639, 642, 813, 814, 841, 843, 849, 855, 877, 894], "whether": [25, 60, 65, 84, 86, 115, 237, 389, 390, 579, 621], "header": [25, 29, 92, 93, 95, 103, 130, 174, 205, 237, 598, 621], "field": [25, 47, 76, 78, 83, 207, 237, 284, 385, 461, 462, 470, 498, 499, 527, 539, 606, 621, 667, 852, 853, 862, 864], "symbol": [25, 237], "byte": [25, 40, 92, 93, 95, 96, 97, 100, 101, 103, 131, 237, 287, 290, 291, 350, 450, 453, 539, 598, 621, 669, 672, 673, 735, 841, 844, 894], "process": [25, 237, 597, 598, 621], "per": [25, 113, 114, 142, 169, 170, 226, 228, 229, 237, 266, 269, 283, 649, 652, 666], "thread": [25, 89, 92, 93, 102, 116, 237, 266, 649], "specifi": [25, 55, 65, 67, 76, 78, 80, 114, 131, 135, 182, 186, 214, 237, 344, 345, 346, 352, 385, 410, 451, 457, 524, 539, 564, 593, 610, 621, 735, 736, 737, 738, 743, 842, 848, 894], "defin": [25, 32, 65, 112, 113, 114, 122, 144, 145, 169, 173, 219, 237, 249, 283, 362, 414, 415, 416, 417, 418, 420, 421, 422, 488, 513, 527, 539, 569, 570, 586, 615, 621, 630, 666, 894], "chrono": [25, 237, 336, 465, 726, 856], "rust": [25, 29, 73, 96, 100, 122, 219, 237, 249, 539, 615], "crate": [25, 237], "fraction": [25, 110, 111, 184, 237, 334, 402, 424, 465, 539, 724, 788, 810, 894], "second": [25, 65, 144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 465, 490, 502, 503, 539, 569, 570, 575, 621, 719, 723, 728], "precis": [25, 156, 183, 199, 237, 311, 465, 697], "infer": [25, 80, 82, 83, 84, 85, 86, 92, 93, 95, 103, 107, 112, 122, 237, 411, 465, 539, 797, 894], "maximum": [25, 92, 93, 103, 113, 114, 115, 162, 237, 261, 295, 296, 386, 398, 407, 515, 539, 580, 621, 644, 680, 681, 706, 776, 784, 789, 793, 894], "timeunit": [25, 32, 33, 65, 237, 311, 312, 337, 341, 697, 698, 727, 731], "frame": [25, 55, 83, 95, 110, 114, 122, 156, 157, 166, 169, 173, 182, 183, 202, 208, 237, 584, 586, 621], "datetim": [25, 40, 65, 126, 142, 144, 145, 157, 159, 210, 237, 264, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 362, 414, 415, 416, 417, 418, 420, 421, 422, 465, 478, 492, 503, 509, 513, 518, 539, 569, 570, 575, 621, 647, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 754, 776, 779, 784, 785, 814, 856, 878, 894], "decim": [25, 40, 237, 350, 423, 539, 809, 894], "place": [25, 128, 149, 150, 179, 188, 189, 192, 212, 237, 258, 260, 271, 278, 427, 428, 539, 594, 595, 600, 621, 639, 642, 654, 661, 794, 796, 817, 818, 827, 894], "float64": [25, 83, 90, 114, 118, 130, 131, 138, 185, 202, 214, 237, 250, 251, 252, 253, 254, 255, 292, 298, 299, 334, 347, 368, 370, 432, 433, 476, 477, 492, 493, 505, 539, 560, 592, 610, 621, 724, 877, 894], "datatyp": [25, 27, 40, 47, 53, 80, 82, 83, 84, 86, 88, 90, 95, 97, 101, 115, 118, 130, 138, 185, 186, 237, 267, 292, 429, 446, 465, 478, 488, 489, 493, 505, 513, 514, 527, 539, 548, 592, 593, 613, 621, 630, 650, 674, 691, 754, 766, 769, 819, 837, 856, 878, 894], "repres": [25, 41, 53, 65, 80, 82, 84, 85, 86, 237, 368, 370, 493, 513, 539, 814, 829, 883, 894], "null": [25, 55, 63, 83, 92, 93, 103, 105, 121, 126, 129, 135, 138, 139, 151, 158, 163, 164, 170, 176, 188, 189, 192, 193, 194, 198, 202, 207, 209, 211, 214, 237, 245, 248, 249, 258, 260, 265, 268, 269, 272, 278, 283, 284, 286, 288, 295, 296, 297, 300, 302, 305, 307, 309, 310, 315, 318, 321, 323, 325, 328, 335, 344, 345, 346, 347, 350, 351, 352, 353, 357, 361, 368, 369, 370, 371, 372, 377, 385, 400, 402, 408, 413, 414, 415, 416, 417, 418, 420, 421, 422, 427, 428, 429, 431, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 457, 459, 461, 462, 463, 468, 478, 485, 486, 492, 494, 495, 505, 513, 527, 539, 559, 564, 573, 574, 594, 595, 600, 606, 607, 610, 611, 613, 621, 630, 639, 642, 648, 661, 666, 667, 670, 680, 692, 695, 701, 704, 710, 712, 715, 718, 725, 736, 737, 738, 741, 743, 748, 764, 765, 787, 788, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 812, 817, 818, 822, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 848, 850, 852, 853, 854, 876, 877, 878, 884, 894], "empti": [25, 71, 83, 92, 93, 95, 103, 123, 124, 153, 165, 237, 524, 552, 553, 583, 621, 679, 683, 756, 894], "ipccompress": [26, 237], "arrow": [26, 66, 80, 96, 106, 197, 237, 597, 621, 872, 876, 894], "ipc": [26, 96, 97, 105, 106, 237, 548], "binari": [26, 237, 287, 289, 290, 291, 669, 671, 672, 673], "stream": [26, 62, 237, 554, 556, 562, 579, 587, 596, 597, 598, 621], "feather": [26, 96, 106, 237, 548], "lz4": [26, 29, 237, 597, 598, 621], "zstd": [26, 29, 237, 597, 598, 621], "pretti": [27, 237], "row_ori": [27, 237], "io": [27, 28, 98, 99, 237, 589, 613, 621, 901], "iobas": [27, 28, 98, 99, 237, 589, 613, 621], "serial": [27, 28, 237], "represent": [27, 28, 237, 293, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 334, 339, 340, 342, 478, 539, 556, 557, 577, 621, 676, 700, 703, 705, 709, 711, 714, 716, 717, 720, 721, 724, 729, 730, 732, 878, 894], "orient": [27, 56, 58, 84, 86, 237], "slower": [27, 84, 86, 122, 171, 210, 219, 237, 249, 539, 615], "common": [27, 237], "write_ndjson": [27, 237], "newlin": [28, 99, 107, 237], "delimit": [28, 87, 92, 93, 99, 103, 107, 174, 200, 237, 440, 831, 873, 894], "parquetcompress": [29, 237], "compression_level": [29, 237, 598, 621], "statist": [29, 92, 93, 126, 237, 345, 346, 375, 414, 415, 416, 417, 418, 419, 420, 421, 422, 434, 539, 598, 621, 691, 737, 738, 771, 805, 825, 894], "row_group_s": [29, 237, 598, 621], "use_pyarrow": [29, 92, 96, 100, 237, 598, 621, 875, 876, 894], "pyarrow_opt": [29, 94, 100, 104, 237], "object": [29, 65, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 113, 114, 115, 121, 160, 202, 237, 513, 548, 553, 568, 572, 577, 589, 621, 643, 675, 696, 830, 872, 894], "parquet": [29, 100, 101, 108, 237, 548, 598, 621], "gzip": [29, 237, 598, 621], "lzo": [29, 237, 598, 621], "brotli": [29, 237, 598, 621], "choos": [29, 237, 597, 598, 621], "good": [29, 156, 237, 597, 598, 621], "perform": [29, 71, 81, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 144, 145, 159, 177, 219, 237, 249, 539, 569, 570, 575, 597, 598, 612, 615, 621], "fast": [29, 237, 350, 426, 539, 597, 598, 621, 741, 815, 894], "decompress": [29, 237, 597, 598, 621], "backward": [29, 135, 159, 237, 286, 352, 539, 564, 575, 598, 621, 743, 894], "guarante": [29, 81, 92, 93, 237, 562, 598, 621], "deal": [29, 237, 407, 465, 539, 598, 621, 793, 856, 894], "older": [29, 237, 598, 621], "reader": [29, 89, 92, 93, 96, 100, 237, 549, 598, 621], "level": [29, 103, 106, 107, 108, 114, 122, 138, 169, 237, 353, 539, 571, 578, 598, 621], "higher": [29, 176, 229, 237, 406, 418, 521, 539, 588, 598, 621, 792, 804, 894], "mean": [29, 87, 92, 93, 100, 103, 126, 135, 174, 200, 237, 349, 352, 415, 434, 447, 491, 539, 564, 579, 598, 621, 691, 740, 743, 748, 801, 825, 838, 894], "smaller": [29, 131, 237, 562, 598, 621, 735, 894], "disk": [29, 237, 596, 597, 598, 621], "min": [29, 114, 115, 126, 135, 144, 145, 174, 237, 295, 297, 303, 352, 407, 417, 524, 539, 564, 569, 570, 598, 621, 680, 682, 687, 691, 743, 793, 803, 894], "11": [29, 143, 145, 237, 309, 310, 319, 329, 333, 338, 361, 402, 421, 435, 468, 493, 528, 539, 554, 568, 570, 571, 578, 587, 598, 603, 621, 630, 719, 723, 728, 799, 894], "22": [29, 237, 333, 338, 341, 465, 493, 598, 621, 723, 728, 731, 856], "extra": [29, 92, 94, 95, 96, 100, 104, 106, 108, 133, 171, 237, 598, 621, 629, 894], "comput": [29, 62, 63, 68, 131, 159, 202, 206, 229, 237, 243, 250, 251, 252, 253, 254, 255, 274, 275, 276, 298, 299, 301, 302, 303, 304, 305, 308, 343, 348, 375, 380, 381, 396, 402, 405, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 438, 476, 477, 497, 504, 520, 525, 539, 572, 574, 575, 598, 605, 611, 621, 625, 631, 632, 633, 634, 635, 636, 657, 658, 659, 684, 685, 686, 687, 688, 689, 693, 734, 735, 739, 771, 774, 775, 780, 788, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 822, 823, 824, 825, 828, 869, 870, 877, 894], "size": [29, 92, 93, 113, 114, 115, 116, 131, 144, 208, 237, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 489, 539, 569, 598, 621, 735, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 894], "group": [29, 93, 143, 144, 145, 157, 169, 171, 174, 208, 210, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 249, 266, 355, 401, 436, 437, 447, 474, 488, 539, 568, 569, 570, 598, 614, 615, 616, 617, 621, 649, 838], "chunk": [29, 89, 92, 93, 103, 106, 107, 108, 114, 115, 133, 157, 168, 237, 248, 408, 539, 598, 621, 629, 678, 747, 781, 794, 872, 894], "reduc": [29, 92, 93, 100, 103, 106, 107, 108, 224, 225, 227, 230, 237, 429, 507, 539, 598, 621, 777, 791, 819, 865, 894], "memori": [29, 63, 80, 81, 84, 85, 86, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 133, 190, 219, 237, 249, 408, 429, 539, 598, 615, 621, 629, 794, 819, 820, 894], "pressur": [29, 100, 107, 108, 237, 429, 539, 598, 621, 819, 894], "improv": [29, 96, 106, 237, 598, 621], "speed": [29, 237, 598, 621], "minimum": [29, 113, 114, 115, 138, 167, 237, 295, 297, 344, 345, 346, 395, 399, 407, 518, 539, 585, 598, 621, 680, 682, 713, 736, 737, 738, 785, 790, 793, 894], "implement": [29, 81, 104, 121, 122, 219, 237, 249, 539, 615, 813, 814, 894], "v": [29, 64, 131, 237, 425, 539, 811, 894], "At": [29, 237], "moment": [29, 172, 237, 375, 434, 539, 771, 825, 894], "argument": [29, 92, 94, 100, 104, 144, 145, 163, 172, 173, 174, 186, 194, 202, 210, 214, 237, 333, 338, 362, 414, 415, 416, 417, 418, 420, 421, 422, 452, 458, 464, 524, 539, 569, 570, 586, 593, 610, 621, 723, 728, 843, 849, 855, 877, 894], "pass": [29, 55, 65, 82, 95, 104, 113, 114, 115, 172, 173, 186, 214, 237, 249, 316, 332, 350, 360, 452, 458, 464, 509, 539, 572, 579, 586, 593, 596, 610, 621, 630, 702, 722, 741, 843, 849, 855, 894], "pyarrow": [29, 80, 85, 92, 94, 96, 100, 104, 105, 109, 157, 197, 201, 202, 237, 549, 872, 875, 876, 877, 894], "write_t": [29, 237], "base": [30, 129, 136, 144, 145, 237, 343, 344, 345, 346, 380, 381, 454, 515, 518, 539, 548, 559, 565, 569, 570, 621, 734, 736, 737, 738, 774, 775, 845, 885, 894], "calendar": [31, 32, 144, 145, 159, 210, 237, 319, 329, 333, 338, 342, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 705, 719, 723, 728, 732], "date": [32, 40, 55, 65, 92, 93, 102, 103, 105, 126, 142, 144, 145, 157, 159, 237, 264, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 350, 362, 414, 415, 416, 417, 418, 420, 421, 422, 465, 478, 492, 509, 518, 539, 548, 569, 570, 575, 621, 647, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 754, 776, 779, 784, 785, 814, 856, 878, 894], "time": [32, 33, 40, 61, 62, 65, 103, 133, 144, 145, 159, 210, 237, 263, 264, 284, 311, 312, 313, 316, 329, 332, 337, 341, 350, 362, 465, 478, 479, 494, 495, 501, 502, 503, 509, 523, 539, 548, 554, 569, 570, 575, 587, 621, 629, 646, 697, 698, 699, 702, 719, 722, 727, 731, 856, 878, 879, 894], "time_unit": [32, 33, 65, 341, 731], "u": [32, 33, 65, 156, 183, 199, 237, 311, 312, 316, 337, 341, 465, 509, 523, 697, 698, 702, 727, 731], "time_zon": [32, 65, 313, 332, 699, 722], "m": [32, 33, 65, 171, 237, 311, 312, 316, 336, 337, 341, 465, 503, 509, 697, 698, 702, 726, 727, 731, 856], "unit": [32, 33, 65, 114, 115, 131, 237, 311, 312, 316, 337, 341, 382, 392, 482, 509, 539, 587, 621, 697, 698, 702, 727, 731, 735, 894], "timezon": [32, 65, 465, 856], "zoneinfo": 32, "run": [32, 62, 122, 160, 219, 237, 249, 266, 306, 523, 524, 539, 554, 562, 579, 587, 596, 597, 598, 615, 621, 649, 690, 894, 900], "available_timezon": 32, "attribut": [32, 33, 40, 112, 237, 532, 533, 535, 540, 543, 544, 545, 621, 886, 888, 890, 897, 898, 899], "delta": [33, 94, 104, 520, 525, 548, 829, 883, 894], "32": [34, 37, 50, 57, 109, 145, 155, 237, 429, 539, 570, 621, 693, 720, 788, 804, 894], "bit": [34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 409, 441, 539, 795, 832, 894], "sign": [36, 37, 38, 39, 329, 409, 468, 539, 719, 795, 859, 894], "integ": [36, 37, 38, 39, 49, 50, 51, 52, 113, 114, 144, 145, 237, 294, 334, 356, 409, 414, 415, 416, 417, 418, 419, 420, 421, 422, 454, 489, 509, 513, 539, 569, 570, 621, 637, 638, 677, 724, 746, 795, 805, 814, 845, 894], "inner": [40, 46, 158, 209, 237, 271, 308, 539, 574, 607, 613, 621, 654, 693, 894], "union": [40, 47, 55, 62, 63, 88, 127, 129, 132, 143, 162, 163, 165, 167, 169, 171, 192, 194, 205, 207, 209, 210, 217, 237, 350, 366, 486, 487, 488, 489, 490, 492, 493, 494, 495, 499, 500, 505, 509, 513, 514, 515, 518, 522, 527, 528, 539, 554, 561, 562, 568, 587, 596, 600, 607, 614, 621, 693, 760, 814, 894], "datatypeclass": [40, 47, 88, 488, 489, 493, 505, 513, 514, 527], "timedelta": [40, 65, 144, 145, 210, 237, 314, 316, 317, 319, 324, 326, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 350, 414, 415, 416, 417, 418, 420, 421, 422, 492, 539, 569, 570, 621, 706, 708, 713, 719, 723, 728, 776, 779, 784, 785, 894], "tupl": [40, 102, 122, 156, 182, 183, 187, 216, 237, 411, 539, 587, 596, 621, 797, 894], "nest": [40, 46, 131, 237, 548, 735, 894], "arrai": [40, 80, 84, 92, 93, 131, 197, 201, 202, 237, 263, 273, 274, 275, 276, 277, 280, 281, 289, 295, 296, 297, 301, 302, 303, 304, 305, 381, 414, 415, 417, 420, 421, 422, 426, 442, 444, 447, 448, 449, 494, 504, 539, 646, 656, 657, 658, 659, 660, 663, 664, 671, 680, 681, 682, 686, 687, 688, 689, 693, 735, 775, 800, 801, 803, 806, 807, 808, 815, 820, 833, 835, 838, 839, 840, 872, 876, 877, 884, 894], "within": [40, 110, 111, 159, 237, 575, 621], "wrap": [42, 104, 362, 539], "arbitrari": [42, 114], "python": [42, 65, 92, 93, 109, 122, 156, 183, 199, 219, 237, 249, 312, 383, 488, 539, 615, 630, 698, 706, 707, 708, 713, 875, 894], "queri": [43, 62, 96, 102, 103, 106, 107, 108, 133, 160, 173, 237, 284, 449, 554, 556, 557, 562, 571, 578, 587, 596, 612, 615, 621, 629, 840, 894, 900], "pars": [43, 92, 93, 95, 103, 106, 107, 186, 214, 237, 454, 465, 509, 593, 610, 621, 845, 856], "given": [43, 45, 55, 64, 65, 80, 82, 83, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 122, 131, 173, 182, 188, 189, 209, 237, 264, 278, 313, 337, 343, 362, 380, 407, 410, 411, 414, 415, 417, 420, 421, 422, 425, 427, 428, 448, 465, 479, 486, 539, 579, 586, 594, 595, 607, 615, 621, 630, 647, 661, 699, 727, 734, 735, 774, 786, 793, 797, 800, 801, 803, 806, 807, 808, 811, 817, 818, 839, 856, 879, 885, 894], "transform": [43, 122, 237, 383, 466, 467, 539], "lf": [45, 560, 565, 592, 609, 621], "under": [45, 56, 57, 58, 59, 532, 533, 535, 540, 543, 544, 545, 886, 888, 890, 897, 898, 899], "add": [45, 93, 122, 133, 144, 214, 215, 237, 404, 471, 503, 531, 539, 569, 574, 610, 611, 612, 621, 629, 894], "context": [46, 169, 237, 244, 249, 266, 353, 391, 436, 437, 483, 488, 496, 506, 509, 524, 538, 539, 548, 611, 621, 649], "manag": [46, 548], "categor": [46, 87, 117, 158, 237, 293, 478, 539, 675, 676, 878, 894], "temporarili": [46, 144, 145, 237, 569, 570, 621], "cach": [46, 62, 96, 103, 106, 108, 117, 414, 415, 416, 417, 418, 420, 421, 422, 465, 539, 554, 562, 587, 596, 621, 856], "categori": [46, 64, 117, 293, 676], "until": [46, 160, 237], "finish": [46, 68, 133, 237, 629, 894], "global": [46, 114, 117], "invalid": [46, 92, 93, 103, 449, 840], "outermost": 46, "exit": [46, 119], "df1": [46, 55, 63, 110, 133, 139, 202, 212, 237], "color": [46, 219, 615], "red": [46, 219, 615], "green": [46, 219, 615], "blue": 46, "orang": [46, 125, 220, 221, 223, 224, 225, 227, 229, 230, 237], "uint8": [46, 112, 304, 305, 472, 539, 688, 689, 865, 894], "df2": [46, 55, 63, 110, 133, 139, 202, 212, 237], "yellow": 46, "black": [46, 122, 237], "join": [46, 55, 62, 159, 209, 237, 361, 401, 539, 554, 562, 575, 587, 596, 607, 611, 621], "succe": [46, 92, 93, 103], "df_join": 46, "cat": [46, 64, 441, 466, 467, 478, 495, 535, 539, 832, 890], "u8": [46, 87, 200, 237, 873, 894], "sequenc": [47, 55, 62, 80, 82, 83, 84, 86, 89, 113, 114, 115, 127, 129, 132, 133, 143, 144, 145, 158, 159, 165, 169, 171, 173, 174, 192, 200, 205, 206, 207, 208, 209, 210, 217, 237, 347, 366, 383, 486, 487, 488, 490, 492, 493, 494, 495, 498, 499, 500, 505, 507, 509, 514, 515, 518, 522, 527, 528, 539, 561, 568, 569, 570, 574, 575, 586, 600, 605, 607, 614, 621, 629, 693, 760, 814, 894], "map": [47, 82, 83, 92, 93, 96, 97, 100, 101, 103, 106, 122, 130, 156, 178, 182, 183, 198, 237, 333, 338, 384, 385, 483, 488, 527, 539, 560, 590, 621, 723, 728], "composit": 47, "make": [47, 63, 80, 85, 92, 93, 96, 100, 102, 106, 108, 143, 144, 145, 166, 169, 177, 210, 237, 345, 346, 410, 461, 468, 539, 568, 569, 570, 584, 621, 737, 738, 852, 859, 894], "up": [47, 102, 156, 159, 183, 199, 237, 294, 468, 539, 574, 575, 579, 621, 677, 859, 894], "dai": [48, 65, 144, 145, 157, 159, 210, 237, 316, 319, 326, 329, 330, 331, 333, 337, 338, 339, 340, 342, 414, 415, 416, 417, 418, 420, 421, 422, 501, 502, 503, 539, 569, 570, 575, 621, 719, 720, 723, 728, 730], "unsign": [49, 50, 51, 52, 409, 539, 795, 894], "could": [53, 68, 129, 144, 237, 292, 498, 507, 539, 559, 569, 621, 674, 894], "determin": [53, 55, 63, 83, 86, 92, 93, 95, 100, 108, 122, 138, 144, 145, 156, 157, 205, 210, 237, 284, 293, 391, 410, 414, 415, 416, 417, 418, 420, 421, 422, 434, 490, 539, 569, 570, 621, 667, 676, 825, 894], "static": [53, 615], "utf": 54, "intern": [55, 60, 65, 95, 156, 182, 198, 237, 355, 489, 500, 509, 515, 518, 523, 527, 528, 539, 643, 675, 696, 811, 830, 894], "revers": [55, 131, 192, 237, 258, 260, 280, 301, 302, 303, 304, 305, 384, 404, 407, 426, 436, 437, 471, 479, 490, 539, 600, 621, 639, 642, 663, 686, 687, 688, 689, 767, 793, 815, 827, 879, 894], "uniqu": [55, 112, 113, 115, 154, 169, 228, 237, 259, 365, 373, 397, 465, 481, 483, 519, 539, 621, 641, 691, 758, 768, 782, 856, 881, 882, 894], "kei": [55, 61, 144, 159, 166, 171, 174, 178, 181, 237, 569, 575, 584, 590, 591, 621], "contain": [55, 61, 82, 85, 94, 104, 110, 157, 169, 174, 237, 249, 366, 442, 445, 447, 448, 449, 462, 463, 539, 587, 621, 781, 833, 836, 838, 839, 840, 853, 854, 872, 894], "have": [55, 81, 92, 93, 95, 114, 115, 117, 133, 156, 177, 183, 199, 237, 306, 344, 345, 346, 392, 407, 465, 539, 596, 612, 621, 629, 690, 722, 736, 737, 738, 748, 793, 856, 894], "inject": 55, "fill": [55, 63, 90, 118, 134, 135, 189, 208, 237, 286, 302, 305, 351, 352, 357, 361, 414, 415, 417, 420, 421, 422, 428, 451, 457, 468, 508, 539, 563, 564, 595, 611, 621, 742, 743, 786, 800, 801, 803, 806, 807, 808, 818, 842, 848, 859, 894], "each": [55, 93, 107, 110, 111, 113, 122, 142, 157, 159, 202, 216, 219, 220, 222, 231, 237, 249, 270, 282, 333, 338, 407, 448, 461, 462, 488, 539, 575, 587, 615, 616, 617, 621, 653, 665, 678, 723, 728, 793, 839, 852, 853, 864, 894], "sort": [55, 56, 110, 143, 144, 145, 159, 166, 171, 173, 174, 210, 217, 222, 231, 237, 258, 260, 293, 353, 426, 437, 483, 485, 490, 539, 557, 569, 570, 575, 584, 586, 587, 596, 616, 617, 621, 639, 642, 676, 767, 815, 880, 882, 894], "origin": [55, 92, 93, 206, 237, 332, 374, 385, 409, 442, 447, 448, 449, 451, 457, 468, 539, 605, 621, 722, 833, 838, 839, 840, 842, 848, 859], "order": [55, 83, 110, 143, 144, 145, 171, 173, 174, 184, 206, 210, 237, 258, 260, 293, 407, 424, 425, 426, 436, 437, 470, 480, 481, 490, 539, 568, 569, 570, 597, 598, 600, 605, 621, 639, 642, 676, 767, 793, 798, 810, 811, 815, 862, 880, 881, 894], "unless": [55, 82, 202, 237, 877, 884, 894], "case": [55, 80, 82, 83, 84, 86, 108, 122, 133, 144, 145, 156, 237, 383, 391, 392, 531, 539, 569, 570, 621, 629, 894], "final": [55, 108, 344, 345, 346, 539, 562, 621, 736, 737, 738, 894], "doe": [55, 74, 80, 82, 83, 84, 86, 92, 93, 94, 95, 103, 104, 105, 110, 111, 133, 157, 182, 183, 214, 237, 341, 481, 506, 539, 562, 568, 579, 610, 621, 629, 731, 748, 820, 884, 894], "receiv": [55, 122, 173, 237, 586, 621], "now": [55, 145, 237, 570, 621], "ha": [55, 104, 121, 210, 237, 249, 306, 374, 392, 479, 488, 539, 552, 615, 621, 679, 690, 748, 759, 879, 894], "whose": [55, 159, 174, 237, 347, 505, 539, 575, 621], "post": 55, "constrain": 55, "newli": 55, "descend": [55, 192, 237, 258, 260, 426, 539, 600, 621, 639, 642, 767, 815, 894], "singl": [55, 63, 92, 93, 102, 103, 113, 129, 133, 140, 182, 192, 217, 237, 283, 329, 353, 383, 408, 411, 440, 485, 488, 493, 514, 523, 539, 559, 600, 614, 621, 629, 666, 719, 794, 797, 831, 872, 894], "boolean": [55, 60, 136, 138, 237, 246, 247, 264, 287, 353, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 485, 539, 565, 621, 627, 628, 640, 647, 669, 744, 753, 755, 757, 758, 760, 761, 762, 763, 764, 765, 768, 789, 790, 813, 832, 885, 894], "associ": 55, "2022": [55, 65, 109, 126, 142, 237, 312, 465, 503, 509, 698, 705, 856], "x": [55, 92, 93, 102, 103, 113, 114, 131, 149, 152, 154, 158, 165, 237, 249, 263, 271, 358, 383, 410, 431, 434, 461, 478, 500, 528, 539, 574, 579, 583, 599, 621, 626, 630, 743, 769, 822, 825, 852, 878, 894], "y": [55, 113, 114, 131, 152, 154, 158, 165, 237, 263, 271, 336, 410, 465, 500, 528, 539, 574, 583, 599, 621, 626, 726, 856, 894], "12": [55, 64, 65, 144, 145, 159, 210, 237, 304, 312, 317, 319, 326, 331, 333, 338, 342, 402, 429, 501, 502, 539, 569, 570, 571, 575, 578, 596, 603, 621, 630, 698, 716, 723, 728, 809, 894], "df3": [55, 237], "set_tbl_format": 55, "09": [55, 145, 237, 312, 319, 570, 621, 700], "01": [55, 65, 126, 142, 144, 145, 210, 237, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 465, 503, 569, 570, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 856], "02": [55, 65, 142, 144, 145, 210, 237, 311, 312, 316, 317, 318, 324, 325, 326, 334, 335, 337, 339, 341, 423, 503, 539, 569, 570, 621, 697, 698, 702, 703, 704, 706, 707, 708, 709, 711, 713, 714, 715, 716, 717, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731], "03": [55, 65, 144, 145, 210, 237, 311, 312, 313, 315, 316, 318, 325, 326, 332, 333, 334, 335, 336, 337, 338, 339, 341, 569, 570, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 711, 713, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731], "af1": 55, "af2": 55, "af3": 55, "keep": [55, 92, 93, 103, 171, 206, 209, 210, 237, 374, 385, 492, 539, 605, 607, 621], "easili": [55, 186, 214, 237, 593, 610, 621], "calcul": [55, 144, 237, 265, 307, 344, 345, 346, 375, 382, 419, 434, 482, 539, 569, 621, 648, 692, 736, 737, 738, 771, 805, 825, 829, 883, 894], "wise": [55, 138, 237, 250, 251, 252, 253, 254, 255, 298, 299, 348, 381, 431, 432, 433, 476, 477, 498, 499, 507, 522, 539, 631, 632, 633, 634, 635, 636, 684, 685, 739, 775, 822, 823, 824, 869, 870, 894], "dot": [55, 539, 596, 621, 894], "product": [55, 172, 237, 304, 308, 539, 688, 693, 894], "fill_nul": [55, 134, 237, 465, 539, 563, 611, 621, 856, 894], "sum": [55, 131, 138, 143, 145, 155, 174, 217, 237, 249, 284, 304, 305, 343, 353, 401, 414, 415, 417, 420, 421, 422, 485, 486, 498, 500, 507, 515, 518, 539, 554, 557, 562, 568, 570, 587, 596, 621, 688, 689, 734, 735, 800, 801, 803, 806, 807, 808, 894], "167": 55, "47": 55, "callabl": [56, 57, 58, 59, 103, 122, 138, 173, 219, 237, 249, 284, 383, 384, 413, 488, 498, 499, 507, 514, 522, 539, 579, 586, 615, 621, 630, 667, 799, 894], "decor": [56, 57, 58, 59, 114, 115], "access": [56, 57, 58, 59, 156, 182, 183, 237, 385, 539, 611, 621], "by_first_letter_of_column_nam": 56, "f": [56, 93, 104, 122, 126, 142, 157, 161, 197, 205, 208, 219, 237, 249, 284, 383, 384, 429, 446, 465, 488, 494, 498, 499, 507, 514, 522, 539, 579, 615, 621, 667, 837, 856], "fromkei": [56, 58], "by_first_letter_of_column_valu": 56, "starts_with": [56, 441, 445, 836], "slice": [56, 62, 131, 147, 157, 195, 237, 270, 282, 413, 414, 415, 416, 417, 418, 420, 421, 422, 539, 554, 562, 579, 587, 596, 597, 598, 621, 653, 665, 735, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "to_seri": [56, 60, 237, 284, 667], "xx": [56, 58], "xy": [56, 58], "yy": [56, 58], "yz": [56, 58], "schema": [56, 57, 58, 63, 75, 76, 78, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 107, 113, 114, 122, 123, 124, 130, 131, 166, 169, 237, 284, 391, 492, 527, 552, 553, 560, 579, 584, 613, 615, 621, 683, 894], "a1": [56, 58], "a2": [56, 58], "b1": [56, 58], "b2": [56, 58], "pow_n": 57, "powersofn": 57, "next": [57, 286, 407, 539, 793, 894], "p": [57, 173, 237, 586, 621], "ceil": [57, 539, 894], "previou": [57, 119, 402, 539, 788, 894], "floor": [57, 539, 894], "nearest": [57, 159, 176, 229, 237, 294, 356, 406, 418, 521, 539, 575, 588, 621, 677, 746, 752, 792, 804, 894], "24": [57, 122, 131, 145, 237, 304, 306, 318, 539, 570, 621, 690, 704, 894], "55": 57, "001": [57, 320, 321, 323, 328, 503, 710, 712, 718], "next_pow2": 57, "prev_pow2": 57, "nearest_pow2": 57, "128": [57, 788, 894], "split_by_column_dtyp": 58, "dtype": [58, 80, 82, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 121, 144, 145, 159, 202, 237, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 271, 283, 292, 295, 296, 297, 298, 299, 304, 305, 315, 318, 321, 323, 325, 328, 335, 341, 347, 349, 382, 383, 409, 410, 414, 415, 416, 417, 418, 420, 421, 422, 429, 432, 433, 440, 459, 472, 474, 476, 477, 478, 482, 483, 488, 489, 493, 494, 496, 505, 509, 513, 514, 527, 539, 569, 570, 575, 621, 644, 645, 646, 654, 666, 674, 679, 680, 681, 682, 688, 689, 692, 701, 704, 710, 712, 715, 718, 725, 731, 735, 740, 756, 798, 812, 819, 831, 850, 856, 865, 876, 877, 878, 894], "collect": [58, 62, 104, 105, 160, 197, 237, 249, 401, 489, 494, 509, 523, 527, 539, 558, 559, 561, 562, 563, 564, 565, 566, 568, 569, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 585, 586, 588, 590, 591, 593, 594, 595, 599, 600, 601, 602, 603, 604, 605, 608, 610, 611, 612, 615, 621], "31": [59, 109, 312, 314, 315, 326, 339, 465, 501, 502, 509, 698, 700, 701, 856], "42": [59, 145, 146, 237, 570, 621, 749, 894], "961": 59, "1764": 59, "4160": 59, "condit": [60, 129, 136, 182, 237, 445, 463, 559, 565, 621], "eager": [60, 144, 208, 237, 489, 509, 513, 523, 527, 538, 548, 569, 621], "indic": [60, 87, 91, 92, 93, 96, 100, 103, 112, 113, 115, 144, 145, 237, 283, 364, 367, 368, 370, 371, 372, 414, 415, 416, 417, 418, 420, 421, 422, 425, 431, 474, 539, 569, 570, 621, 666, 757, 761, 762, 763, 764, 765, 811, 822, 867, 894], "where": [60, 102, 129, 133, 156, 165, 183, 237, 340, 343, 425, 434, 525, 531, 539, 559, 583, 621, 629, 640, 730, 734, 811, 825, 829, 883, 885, 894], "evalu": [60, 134, 136, 159, 237, 306, 360, 362, 366, 487, 489, 504, 527, 539, 565, 572, 574, 575, 621, 640, 690, 885, 894], "eagerli": [60, 523], "oppos": 60, "lazili": [60, 92, 93, 103, 104, 106, 107, 108], "u32": [60, 144, 170, 215, 220, 228, 230, 237, 244, 256, 257, 258, 259, 260, 261, 262, 273, 300, 301, 314, 317, 320, 324, 326, 330, 331, 334, 339, 340, 377, 385, 397, 400, 407, 425, 442, 450, 453, 478, 481, 496, 519, 539, 569, 612, 621, 639, 640, 641, 656, 674, 700, 703, 709, 711, 714, 716, 717, 720, 721, 724, 729, 730, 793, 833, 841, 844, 878, 881, 882, 894], "build": [61, 81], "wa": [61, 385, 539], "compil": [61, 261, 262, 644, 645], "gate": 61, "info": [61, 94, 104, 109], "otherwis": [61, 166, 186, 237, 288, 295, 296, 297, 344, 345, 346, 409, 441, 443, 531, 539, 584, 593, 621, 630, 670, 680, 681, 682, 736, 737, 738, 795, 813, 814, 832, 834, 894], "version": [61, 94, 104, 109, 260, 349, 522, 539, 642, 740, 894], "follow": [61, 92, 93, 94, 103, 104, 122, 144, 145, 159, 173, 210, 237, 249, 329, 333, 338, 407, 414, 415, 416, 417, 418, 420, 421, 422, 470, 488, 532, 533, 535, 539, 540, 543, 544, 545, 568, 569, 570, 575, 586, 621, 719, 723, 728, 793, 813, 814, 886, 888, 890, 894, 897, 898, 899, 901], "depend": [61, 109, 249, 261, 262, 391, 407, 488, 506, 509, 539, 644, 645, 793, 894], "host": [61, 92, 96, 100, 106, 108], "git": 61, "lazy_fram": 62, "type_coercion": [62, 554, 556, 562, 587, 596, 597, 598, 621], "predicate_pushdown": [62, 554, 556, 562, 579, 587, 596, 597, 598, 621], "projection_pushdown": [62, 554, 556, 562, 579, 587, 596, 597, 598, 621], "simplify_express": [62, 554, 556, 562, 587, 596, 597, 598, 621], "no_optim": [62, 554, 562, 579, 587, 597, 598, 621], "slice_pushdown": [62, 554, 556, 562, 579, 587, 596, 597, 598, 621], "common_subplan_elimin": [62, 554, 556, 562, 587, 596, 621], "multipl": [62, 63, 92, 93, 103, 106, 108, 113, 115, 131, 133, 136, 144, 149, 157, 171, 174, 186, 192, 214, 217, 237, 283, 347, 389, 392, 396, 411, 414, 415, 416, 417, 418, 420, 421, 422, 437, 490, 498, 499, 505, 507, 514, 522, 531, 539, 558, 565, 569, 593, 600, 610, 614, 621, 629, 666, 735, 780, 797, 894], "graph": [62, 160, 237, 572, 611, 621], "parallel": [62, 63, 89, 100, 102, 108, 144, 159, 160, 173, 237, 266, 306, 539, 548, 569, 574, 575, 621, 649, 690, 894], "threadpool": 62, "coercion": [62, 410, 539, 554, 562, 587, 596, 597, 598, 621], "optim": [62, 100, 103, 106, 107, 108, 156, 160, 173, 177, 183, 237, 554, 556, 557, 562, 579, 587, 596, 597, 598, 612, 621], "predic": [62, 103, 105, 106, 107, 108, 136, 182, 237, 353, 485, 531, 539, 554, 562, 565, 579, 587, 590, 596, 597, 598, 612, 621, 744, 813, 814, 894], "pushdown": [62, 554, 562, 579, 587, 590, 596, 597, 598, 612, 621, 813, 814, 894], "project": [62, 103, 104, 106, 107, 108, 249, 436, 437, 539, 554, 562, 579, 587, 590, 596, 597, 598, 613, 621], "simplifi": [62, 554, 562, 587, 596, 597, 598, 621], "turn": [62, 92, 93, 103, 117, 483, 539, 554, 562, 579, 587, 597, 598, 621], "off": [62, 92, 93, 103, 117, 483, 539, 554, 562, 579, 587, 597, 598, 621], "Will": [62, 205, 237, 515, 518, 554, 562, 587, 596, 621, 894], "try": [62, 75, 77, 92, 93, 95, 96, 100, 103, 106, 108, 465, 554, 562, 587, 596, 621, 856], "branch": [62, 554, 562, 587, 596, 621], "subplan": [62, 554, 562, 587, 596, 621], "occur": [62, 396, 407, 539, 554, 562, 587, 596, 621, 780, 793, 894], "part": [62, 80, 461, 462, 554, 562, 587, 596, 611, 621, 700, 703, 709, 711, 714, 716, 717, 724, 732, 852, 853], "fashion": [62, 158, 237, 554, 562, 587, 596, 621], "alpha": [62, 344, 345, 346, 539, 554, 562, 587, 596, 621, 736, 737, 738, 894], "item": [63, 93, 184, 237, 264, 269, 271, 349, 424, 462, 539, 647, 652, 654, 740, 810, 853, 894], "iter": [63, 156, 157, 182, 183, 186, 205, 214, 216, 237, 306, 524, 539, 593, 610, 621, 690, 894], "rechunk": [63, 80, 85, 92, 93, 96, 100, 103, 106, 107, 108, 133, 237, 539, 629, 678, 781, 894], "concatmethod": 63, "vertic": [63, 133, 208, 212, 237, 440, 515, 831], "aggreg": [63, 92, 93, 138, 143, 144, 162, 163, 164, 167, 169, 174, 175, 176, 193, 194, 208, 211, 217, 218, 221, 223, 237, 244, 353, 379, 383, 401, 413, 414, 415, 416, 417, 418, 420, 421, 422, 483, 498, 499, 500, 507, 512, 515, 518, 522, 528, 539, 569, 579, 580, 581, 582, 585, 588, 601, 602, 608, 614, 621, 799, 800, 801, 803, 806, 807, 808, 894], "concaten": [63, 138, 173, 237, 586, 621, 678, 781, 894], "sure": [63, 80, 85, 92, 93, 96, 102, 143, 177, 237, 489, 568, 621], "contigu": [63, 80, 85, 92, 93, 96, 103, 106, 107, 108, 177, 237], "diagon": [63, 205, 237], "strategi": [63, 92, 112, 113, 114, 115, 135, 144, 158, 159, 168, 237, 284, 352, 539, 564, 569, 574, 575, 621, 667, 743, 894], "vstack": [63, 133, 237], "find": [63, 137, 237, 425, 490, 539, 811, 894], "miss": [63, 80, 92, 93, 103, 134, 237, 286, 344, 345, 346, 357, 361, 368, 370, 525, 539, 563, 621, 736, 737, 738, 884, 894], "stack": [63, 149, 212, 237], "length": [63, 64, 90, 113, 118, 144, 145, 191, 237, 279, 306, 333, 338, 392, 413, 414, 415, 416, 417, 418, 420, 421, 422, 435, 451, 453, 457, 459, 468, 489, 539, 569, 570, 587, 599, 621, 662, 667, 678, 690, 698, 723, 728, 772, 786, 799, 800, 801, 802, 803, 804, 806, 807, 808, 826, 842, 844, 848, 850, 859, 894], "don": [63, 208, 237, 249, 266, 306, 488, 539, 649, 690, 812, 884, 894], "t": [63, 95, 103, 122, 173, 208, 237, 249, 266, 306, 343, 344, 345, 346, 385, 452, 458, 464, 465, 488, 531, 539, 586, 621, 649, 690, 734, 736, 737, 738, 812, 843, 849, 855, 856, 884, 894], "match": [63, 74, 80, 82, 83, 84, 86, 110, 111, 135, 159, 182, 237, 390, 441, 442, 445, 448, 449, 452, 455, 456, 458, 463, 464, 465, 564, 575, 621, 832, 833, 836, 839, 840, 843, 846, 847, 849, 854, 855, 856], "relev": 63, "execut": [63, 160, 237, 266, 551, 579, 587, 621, 649], "df_h1": 63, "l1": 63, "l2": 63, "df_h2": 63, "r1": 63, "r2": 63, "r3": 63, "df_d1": 63, "df_d2": 63, "bin": [64, 454, 533, 845, 888], "label": [64, 80, 413, 414, 415, 416, 417, 418, 420, 421, 422, 539, 587, 621, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "break_point_label": 64, "break_point": 64, "category_label": 64, "discret": [64, 265, 307, 343, 539, 648, 692, 734, 894], "creat": [64, 65, 80, 84, 86, 104, 113, 114, 115, 123, 124, 144, 145, 170, 174, 210, 214, 237, 312, 333, 338, 408, 459, 483, 489, 494, 501, 502, 503, 539, 552, 553, 556, 557, 569, 570, 610, 621, 679, 683, 695, 698, 723, 728, 786, 794, 850, 876, 894], "assign": [64, 113, 144, 237, 407, 461, 462, 539, 569, 621, 793, 852, 853, 894], "must": [64, 80, 81, 82, 94, 104, 144, 145, 159, 166, 182, 237, 284, 347, 383, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 579, 584, 621, 894], "len": [64, 113, 114, 157, 237, 301, 411, 451, 457, 468, 539, 797, 842, 848, 859, 894], "breakpoint": 64, "experiment": [64, 105, 186, 208, 209, 214, 237, 306, 333, 385, 414, 415, 416, 417, 418, 420, 421, 422, 539, 593, 607, 610, 621, 690, 723, 894], "being": [64, 92, 93, 103, 105, 208, 209, 237, 306, 333, 385, 414, 415, 416, 417, 418, 420, 421, 422, 504, 531, 539, 607, 621, 690, 723, 894], "consid": [64, 92, 93, 103, 105, 129, 139, 165, 206, 208, 209, 217, 237, 295, 296, 297, 306, 333, 385, 414, 415, 416, 417, 418, 420, 421, 422, 436, 498, 507, 539, 559, 571, 578, 583, 605, 607, 621, 680, 681, 682, 690, 723, 812, 813, 814, 894], "break": [64, 105, 208, 209, 237, 306, 333, 385, 414, 415, 416, 417, 418, 420, 421, 422, 539, 607, 621, 690, 723, 894], "30": [64, 133, 144, 149, 173, 179, 180, 198, 214, 237, 256, 257, 258, 260, 307, 312, 315, 319, 331, 333, 338, 342, 358, 429, 539, 569, 586, 610, 621, 692, 698, 701, 723, 728, 894], "inf": [64, 114, 115, 255, 364, 367, 539, 636, 757, 761, 788, 894], "low": [65, 144, 237, 334, 489, 569, 621], "high": [65, 144, 237, 334, 489, 569, 621], "interv": [65, 144, 145, 210, 237, 333, 334, 338, 362, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 621, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 723, 724, 726, 727, 728, 729, 730, 732], "1d": [65, 144, 145, 159, 210, 237, 311, 318, 325, 329, 333, 338, 341, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 697, 702, 704, 706, 707, 708, 713, 715, 719, 723, 726, 727, 728, 730, 731], "close": [65, 144, 145, 237, 362, 414, 415, 416, 417, 418, 420, 421, 422, 434, 539, 569, 570, 621, 825, 894], "closedinterv": [65, 144, 145, 237, 362, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 621], "lower": [65, 103, 144, 176, 229, 237, 362, 382, 406, 409, 418, 489, 521, 539, 562, 569, 588, 621, 792, 795, 804, 894], "bound": [65, 92, 93, 131, 144, 237, 269, 283, 362, 382, 482, 489, 539, 569, 621, 652, 666, 735, 894], "upper": [65, 92, 93, 131, 144, 237, 362, 482, 489, 539, 569, 621, 735, 894], "period": [65, 144, 145, 188, 189, 237, 278, 333, 338, 344, 345, 346, 402, 427, 428, 539, 569, 570, 594, 595, 621, 661, 723, 728, 736, 737, 738, 788, 817, 818, 894], "It": [65, 122, 166, 173, 219, 237, 249, 284, 391, 539, 579, 584, 615, 621, 813, 814, 894], "like": [65, 81, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 152, 154, 158, 237, 266, 394, 407, 515, 518, 528, 539, 562, 589, 621, 649, 793, 894], "durat": [65, 159, 210, 237, 315, 318, 321, 323, 325, 328, 335, 341, 478, 539, 575, 621, 701, 704, 710, 712, 715, 718, 725, 731, 878, 894], "3d12h4m25": [65, 144, 145, 159, 210, 237, 333, 338, 569, 570, 575, 621, 723, 728], "hour": [65, 144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 502, 503, 539, 569, 570, 575, 621, 719, 723, 728], "minut": [65, 144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 502, 503, 539, 569, 570, 575, 621, 719, 723, 728], "tempor": [65, 144, 145, 156, 183, 199, 237, 362, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 621], "window": [65, 144, 145, 237, 306, 333, 338, 344, 345, 346, 401, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 494, 539, 569, 570, 621, 690, 723, 728, 736, 737, 738, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 894], "granular": 65, "finer": 65, "than": [65, 79, 84, 86, 92, 93, 105, 114, 115, 122, 142, 143, 156, 159, 182, 183, 184, 208, 219, 237, 249, 374, 424, 434, 436, 451, 457, 462, 468, 515, 518, 525, 528, 539, 568, 575, 597, 598, 615, 621, 810, 825, 842, 848, 853, 859, 894], "also": [65, 83, 114, 115, 130, 143, 144, 145, 166, 169, 186, 192, 214, 237, 302, 305, 332, 347, 361, 362, 407, 414, 415, 416, 417, 418, 420, 421, 422, 498, 499, 507, 509, 522, 538, 539, 569, 570, 584, 593, 600, 610, 611, 621, 722, 793, 894], "permut": 65, "1mo": [65, 144, 145, 159, 210, 237, 313, 315, 329, 332, 333, 336, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 699, 701, 716, 719, 720, 721, 722, 723, 728, 729], "dtrang": 65, "1985": 65, "00": [65, 144, 159, 210, 237, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 465, 503, 569, 575, 621, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 856], "04": [65, 105, 144, 210, 237, 312, 313, 314, 315, 318, 324, 325, 326, 330, 332, 333, 334, 335, 336, 339, 340, 341, 465, 503, 569, 621, 699, 701, 704, 709, 711, 714, 715, 716, 717, 721, 722, 724, 725, 726, 729, 730, 731, 856], "05": [65, 105, 110, 111, 159, 210, 237, 312, 313, 315, 332, 334, 336, 575, 621, 698, 699, 700, 701, 722, 723, 728, 730], "07": [65, 312, 314, 330, 332, 333, 338, 340, 465, 509, 698, 700, 730, 856], "08": [65, 110, 111, 145, 237, 312, 333, 465, 503, 570, 621, 723, 728, 856], "zone": [65, 313, 332, 699, 722], "america": [65, 722], "new_york": [65, 722], "\u03bc": [65, 144, 145, 159, 210, 237, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 509, 569, 570, 575, 621, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], "est": [65, 722], "encount": [66, 144, 237, 398, 399, 449, 498, 507, 525, 539, 569, 621, 784, 785, 840, 894], "error": [66, 92, 93, 103, 182, 237, 271, 283, 288, 292, 374, 441, 443, 449, 465, 539, 615, 654, 666, 670, 674, 832, 834, 840, 856, 894], "duplic": [69, 152, 158, 159, 206, 237, 363, 490, 539, 574, 575, 605, 621, 755, 894], "certain": [70, 94, 104, 150, 210, 237, 347, 505, 539, 554, 587, 597, 598, 621, 894], "structur": [71, 75, 77, 133, 173, 237, 586, 621, 629, 894], "least": [72, 114, 402, 483, 539, 788, 882, 894], "expect": [72, 74, 79, 249, 488, 539, 577, 579, 621], "unexpect": [73, 237], "caus": [73, 81, 92, 93, 103, 121, 133, 237, 629, 894], "panic": 73, "combin": [75, 77, 144, 145, 146, 159, 210, 217, 237, 338, 452, 458, 464, 569, 570, 575, 596, 621, 728, 843, 849, 855], "mismatch": 75, "incompat": 77, "pa": [80, 104, 105, 237], "chunkedarrai": [80, 168, 237, 693, 894], "schema_overrid": [80, 82, 83, 84, 85, 86, 157, 237], "schemadict": [80, 82, 83, 84, 85, 86, 103, 185, 237, 579, 592, 615, 621], "zero": [80, 81, 91, 92, 93, 96, 100, 121, 135, 156, 182, 197, 202, 237, 351, 352, 425, 434, 468, 539, 564, 621, 667, 743, 825, 859, 872, 876, 877, 894], "copi": [80, 81, 121, 123, 124, 157, 197, 202, 214, 237, 350, 468, 539, 552, 553, 610, 621, 626, 679, 683, 695, 741, 859, 872, 876, 877, 894], "most": [80, 392, 396, 402, 462, 483, 539, 568, 621, 780, 788, 853, 882, 894], "closest": 80, "dimens": [80, 82, 84, 86, 237, 411, 539, 797, 894], "column_1": [80, 122, 205, 237], "pair": [80, 82, 83, 84, 86, 178, 237, 590, 621], "declar": [80, 82, 83, 84, 86, 237], "sever": [80, 82, 83, 84, 86, 237, 527], "wai": [80, 82, 83, 84, 86, 157, 173, 237, 586, 621], "As": [80, 82, 83, 84, 86, 95, 237, 523], "auto": [80, 82, 83, 84, 86, 100, 108, 205, 237], "automat": [80, 82, 83, 84, 86, 92, 93, 102, 103, 114, 115, 186, 214, 237, 452, 458, 464, 465, 593, 610, 621, 843, 849, 855, 856, 894], "equival": [80, 82, 83, 84, 86, 94, 155, 169, 237, 453, 770, 844, 857, 858, 894], "form": [80, 82, 83, 84, 86, 156, 183, 208, 237, 402, 539, 788, 894], "suppli": [80, 82, 83, 84, 86, 182, 237], "here": [80, 82, 83, 84, 86, 94, 102, 104, 113, 114, 115, 237, 449, 840], "overwrit": [80, 82, 83, 84, 86, 92, 93, 103, 121, 237, 562, 621], "them": [80, 82, 83, 84, 86, 133, 144, 145, 159, 166, 210, 237, 271, 362, 398, 399, 494, 539, 569, 570, 575, 584, 621, 629, 654, 784, 785, 894], "param": [80, 82, 83, 84, 86, 92, 93, 103, 114, 115, 182, 237], "overridden": [80, 82, 84, 86, 237], "construct": [80, 82, 83, 84, 85, 86, 237, 385, 539, 567, 589, 621, 894], "allow_copi": [81, 121], "interchang": [81, 121], "protocol": [81, 102, 121], "__dataframe__": 81, "convers": [81, 121, 157, 202, 237, 465, 548, 856, 875, 876, 877, 894], "fail": [81, 94, 104, 121, 206, 237, 284, 465, 605, 621, 630, 856, 894], "detail": [81, 102, 110, 111, 121, 901], "latest": [81, 94, 104, 121, 357, 392, 539], "index": [81, 88, 109, 121, 137, 144, 145, 150, 159, 174, 180, 182, 191, 203, 210, 215, 237, 244, 256, 257, 258, 259, 260, 261, 262, 269, 279, 283, 329, 414, 415, 416, 417, 418, 420, 421, 422, 425, 435, 447, 459, 474, 490, 539, 569, 570, 575, 599, 612, 621, 637, 638, 639, 640, 641, 642, 644, 645, 652, 662, 666, 719, 786, 811, 814, 826, 838, 850, 867, 894], "html": [81, 121], "throw": [81, 292, 449, 539, 674, 840, 894], "notimplementederror": 81, "from_panda": [81, 95], "from_arrow": 81, "effici": [81, 157, 237], "schemadefinit": [82, 83, 84, 237], "clone": [82, 83, 84, 85, 86, 123, 201, 202, 237, 552, 621, 679, 875, 876, 877, 884, 894], "two": [82, 84, 86, 102, 138, 165, 166, 174, 204, 217, 218, 219, 237, 244, 308, 312, 436, 437, 474, 486, 497, 520, 525, 527, 539, 583, 584, 615, 621, 693, 698, 894], "dimension": [82, 84, 86, 237, 894], "infer_schema_length": [83, 86, 92, 93, 95, 103, 107, 237], "mani": [83, 86, 102, 133, 237, 629, 894], "scan": [83, 86, 92, 93, 100, 103, 104, 105, 106, 107, 108, 562, 571, 578, 621], "slow": [83, 86, 92, 93, 103, 306, 539, 690, 894], "NOT": [83, 110, 111, 568, 621], "actual": [83, 95, 114, 115, 820, 894], "thei": [83, 110, 119, 160, 237, 347, 413, 539, 621, 799, 894], "appear": [83, 110, 481, 539, 881, 894], "typic": 83, "clearer": 83, "after": [83, 91, 92, 93, 96, 100, 103, 106, 107, 108, 133, 207, 236, 237, 407, 468, 539, 606, 621, 629, 722, 793, 859, 894], "load": [83, 94, 104, 237, 548, 571, 578, 621], "want": [83, 122, 133, 169, 237, 295, 296, 297, 353, 383, 385, 414, 415, 416, 417, 418, 420, 421, 422, 498, 507, 539, 554, 571, 578, 621, 629, 680, 681, 682, 876, 894], "some": [83, 92, 93, 103, 129, 237, 559, 621, 760, 894], "_partial_": [83, 237], "omit": [83, 113, 114, 115, 169, 237], "similarli": 83, "ad": [83, 121, 144, 205, 214, 237, 248, 350, 498, 499, 539, 569, 610, 621, 741, 894], "partial": 83, "present": [83, 110, 114, 366, 539, 884, 894], "np": [84, 237, 757, 761, 762, 763, 799, 894], "ndarrai": [84, 136, 201, 237, 474, 539, 693, 811, 814, 867, 876, 894], "numpi": [84, 109, 136, 172, 201, 202, 237, 398, 399, 474, 539, 757, 761, 762, 763, 784, 785, 799, 811, 867, 876, 877, 884, 894], "columnar": [84, 86, 156, 183, 237], "interpret": [84, 86, 92, 93, 103, 237], "yield": [84, 86, 92, 93, 103, 131, 133, 205, 237, 629, 735, 894], "conclus": [84, 86, 237], "pd": [85, 95, 237, 478, 539, 878, 894], "nan_to_nul": [85, 237, 894], "datetimeindex": [85, 693, 894], "panda": [85, 95, 109, 202, 237, 478, 539, 877, 878, 894], "instal": [85, 92, 93, 96, 100, 102, 104, 109, 172, 201, 202, 237, 596, 621, 877, 894], "nan": [85, 110, 111, 114, 121, 134, 202, 237, 309, 310, 351, 361, 368, 370, 371, 372, 386, 395, 398, 399, 525, 539, 563, 621, 632, 636, 694, 742, 762, 763, 784, 785, 799, 877, 894], "convert": [85, 87, 94, 95, 104, 121, 198, 199, 200, 201, 204, 237, 284, 313, 465, 667, 699, 856, 863, 864, 875, 876, 877, 884, 894], "pd_df": 85, "pd_seri": 85, "dummi": [87, 200, 237, 873, 894], "subset": [87, 129, 169, 200, 206, 237, 559, 605, 621], "to_dummi": [87, 237, 894], "foo_1": [87, 200, 237], "foo_2": [87, 200, 237], "bar_3": [87, 200, 237], "bar_4": [87, 200, 237], "ham_a": [87, 200, 237], "ham_b": [87, 200, 237], "get": [88, 97, 101, 116, 125, 130, 140, 141, 144, 145, 147, 148, 152, 154, 161, 168, 182, 185, 187, 191, 195, 200, 213, 222, 231, 237, 244, 256, 257, 258, 259, 260, 268, 272, 273, 285, 301, 302, 303, 304, 305, 316, 354, 359, 363, 365, 373, 376, 378, 386, 387, 388, 391, 393, 395, 398, 399, 406, 435, 439, 450, 453, 472, 473, 480, 484, 506, 511, 515, 516, 517, 518, 526, 529, 530, 539, 555, 560, 566, 569, 570, 571, 576, 578, 592, 599, 603, 609, 616, 617, 621, 637, 638, 639, 640, 641, 642, 651, 655, 656, 668, 678, 686, 687, 688, 689, 702, 747, 750, 755, 758, 768, 773, 776, 778, 779, 781, 784, 785, 789, 790, 792, 826, 829, 841, 844, 866, 872, 873, 880, 883, 884, 894], "uint32": [88, 109, 131, 237, 258, 260, 261, 262, 273, 314, 317, 320, 322, 324, 326, 327, 330, 331, 334, 339, 340, 410, 442, 450, 453, 474, 478, 539, 640, 644, 645, 656, 674, 700, 703, 709, 711, 714, 716, 717, 720, 721, 724, 729, 730, 735, 812, 833, 878, 894], "regular": [88, 156, 182, 183, 210, 237, 347, 493, 505, 515, 518, 528, 539], "uint64": [88, 146, 237, 261, 262, 358, 409, 539, 644, 645, 749, 795, 894], "bigidx": 88, "read": [89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 133, 237, 383, 539, 562, 567, 589, 621, 629, 894], "over": [89, 92, 93, 94, 103, 114, 122, 133, 143, 156, 157, 182, 183, 205, 216, 219, 237, 249, 306, 352, 361, 383, 384, 413, 414, 415, 416, 417, 418, 420, 421, 422, 488, 498, 499, 507, 514, 522, 539, 615, 629, 630, 690, 799, 800, 801, 803, 807, 894], "avail": [89, 94, 104, 113, 236, 407, 532, 533, 535, 538, 539, 540, 543, 544, 545, 548, 549, 562, 620, 621, 793, 886, 888, 890, 894, 897, 898, 899], "fetch": [89, 103, 160, 237, 552, 554, 571, 578, 606, 621], "ideal": 89, "read_csv_batch": [89, 549], "tpch": [89, 93], "tables_scale_100": [89, 93], "lineitem": [89, 93, 102], "tbl": [89, 93], "parse_d": [89, 92, 93, 103], "polarsdatatyp": [90, 92, 93, 97, 101, 112, 113, 114, 115, 118, 122, 130, 237, 249, 292, 347, 383, 539, 560, 621, 630, 674, 894], "new": [90, 118, 119, 122, 127, 129, 149, 150, 169, 170, 178, 179, 196, 208, 214, 237, 245, 312, 349, 361, 384, 455, 456, 461, 462, 469, 470, 475, 539, 548, 559, 590, 604, 610, 615, 621, 626, 630, 695, 698, 740, 786, 796, 846, 847, 852, 853, 860, 862, 868, 874, 885, 894], "In": [90, 94, 104, 108, 114, 115, 118, 122, 131, 133, 144, 145, 169, 237, 249, 391, 436, 437, 539, 569, 570, 621, 629, 735, 794, 894], "probabl": [90, 118, 343, 539, 734, 894], "n_row": [91, 92, 93, 96, 100, 103, 106, 107, 108, 157, 237, 562, 621], "accept": [91, 92, 93, 94, 96, 100, 186, 192, 214, 237, 593, 610, 621], "start": [91, 92, 93, 96, 100, 103, 106, 107, 108, 143, 144, 160, 191, 210, 215, 237, 279, 291, 314, 316, 317, 319, 324, 326, 330, 331, 333, 334, 337, 338, 339, 340, 342, 347, 362, 435, 441, 445, 459, 463, 493, 498, 505, 507, 531, 539, 568, 569, 587, 599, 612, 621, 662, 673, 697, 699, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 826, 836, 850, 854, 894], "stop": [91, 92, 93, 96, 100, 103, 106, 107, 108, 314, 316, 317, 319, 324, 326, 330, 331, 333, 334, 337, 338, 339, 340, 342, 697, 699, 700, 702, 703, 709, 711, 714, 716, 717, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732], "textio": 92, "new_column": [92, 93, 95], "comment_char": [92, 93, 103], "quote_char": [92, 93, 103], "skip_row": [92, 93, 103], "missing_utf8_is_empty_str": [92, 93, 103], "ignore_error": [92, 93, 103], "n_thread": [92, 93], "8192": 92, "csvencod": [92, 93, 103], "low_memori": [92, 93, 100, 103, 107, 108], "storage_opt": [92, 94, 96, 100, 104, 106, 108], "skip_rows_after_head": [92, 93, 103], "row_count_nam": [92, 93, 96, 100, 103, 106, 107, 108], "row_count_offset": [92, 93, 96, 100, 103, 106, 107, 108], "sample_s": [92, 93], "eol_char": [92, 93, 103], "By": [92, 93, 95, 103, 159, 192, 237, 454, 513, 575, 621, 829, 845, 876, 883, 894], "we": [92, 93, 95, 103, 143, 159, 192, 237, 266, 454, 513, 531, 575, 579, 600, 621, 630, 649, 845, 894], "handler": [92, 93, 95], "g": [92, 93, 94, 95, 96, 100, 104, 106, 108, 208, 237, 347, 426, 429, 505, 539, 590, 621, 812, 815, 876, 894], "via": [92, 93, 95, 103, 106, 108, 156, 183, 237], "builtin": [92, 93, 95], "open": [92, 93, 95, 96, 100, 106, 108], "stringio": [92, 93], "fsspec": [92, 93, 96, 100, 104, 106, 108, 109], "remot": [92, 93, 96, 100], "first": [92, 93, 95, 103, 107, 122, 142, 144, 147, 159, 161, 168, 173, 174, 195, 205, 206, 210, 222, 237, 258, 259, 260, 266, 269, 270, 306, 329, 333, 359, 365, 378, 385, 425, 447, 449, 455, 456, 465, 490, 492, 498, 507, 511, 539, 554, 569, 571, 575, 578, 586, 605, 611, 616, 621, 639, 642, 649, 652, 653, 667, 690, 691, 719, 723, 750, 758, 773, 811, 838, 840, 846, 847, 856, 894], "dataset": [92, 93, 103, 105, 375, 539, 548, 579, 621, 771, 894], "autogener": [92, 93, 103], "column_x": [92, 93, 103], "enumer": [92, 93, 103, 157, 237], "everi": [92, 93, 103, 144, 196, 199, 210, 237, 261, 262, 265, 267, 269, 270, 279, 282, 301, 302, 303, 304, 305, 306, 333, 338, 349, 446, 475, 498, 499, 539, 562, 569, 604, 621, 644, 645, 648, 650, 652, 653, 662, 665, 686, 687, 688, 689, 690, 723, 728, 740, 837, 868, 894], "shorter": [92, 93], "remain": [92, 93, 103, 131, 143, 237, 249, 461, 462, 539, 568, 579, 621, 735, 852, 853, 894], "comment": [92, 93, 103], "instanc": [92, 93, 103, 114, 115, 133, 138, 237, 284, 292, 392, 414, 415, 416, 417, 418, 420, 421, 422, 498, 507, 539, 579, 612, 621, 629, 674, 894], "special": [92, 93, 103, 630, 894], "handl": [92, 93, 103, 105, 265, 307, 468, 539, 648, 692, 859, 894], "escap": [92, 93, 103], "dure": [92, 93, 103, 119, 133, 237, 629, 894], "provid": [92, 93, 94, 102, 103, 104, 114, 115, 284, 288, 289, 443, 444, 447, 449, 509, 548, 597, 598, 621, 670, 671, 834, 835, 838, 840, 901], "equal": [92, 93, 103, 110, 111, 117, 139, 144, 159, 166, 237, 413, 414, 415, 416, 417, 418, 420, 421, 422, 450, 451, 457, 468, 489, 539, 569, 575, 584, 621, 799, 800, 801, 802, 803, 804, 806, 807, 808, 812, 841, 842, 848, 859, 894], "would": [92, 93, 103, 258, 260, 269, 391, 407, 490, 539, 579, 621, 639, 642, 652, 793, 876, 894], "prefer": [92, 93, 94, 103, 122, 133, 156, 183, 219, 237, 249, 413, 539, 615, 621, 629, 799, 894], "treat": [92, 93, 103, 441, 455, 456, 832, 846, 847], "check": [92, 93, 103, 110, 111, 139, 153, 155, 237, 246, 247, 264, 287, 290, 291, 362, 366, 441, 445, 463, 539, 579, 621, 627, 628, 647, 669, 672, 673, 753, 754, 756, 759, 760, 766, 767, 769, 770, 812, 832, 836, 854, 894], "might": [92, 93, 103, 202, 237, 391, 481, 539, 877, 894], "issu": [92, 93, 95, 103, 304, 305, 472, 539, 688, 689, 865, 894], "alwai": [92, 122, 219, 237, 249, 391, 539, 579, 615, 621], "physic": [92, 93, 159, 237, 293, 478, 539, 551, 574, 575, 621, 676, 878, 894], "cpu": [92, 93], "your": [92, 93, 110, 111, 156, 186, 214, 237, 465, 554, 571, 578, 579, 593, 610, 621, 856], "system": [92, 93], "done": [92, 93, 103, 105, 142, 159, 237, 248, 292, 451, 457, 539, 575, 600, 614, 621, 674, 842, 848, 894], "buffer": [92, 93, 131, 156, 237, 735, 894], "onc": [92, 93, 95, 121, 184, 237, 424, 539, 551, 621, 810, 894], "modifi": [92, 93, 103, 119, 149, 156, 212, 237, 332, 341, 722, 731, 796, 857, 858, 894], "multi": [92, 93], "lossi": [92, 93, 103], "replac": [92, 93, 103, 134, 135, 180, 205, 214, 237, 312, 332, 385, 456, 539, 563, 610, 621, 698, 722, 813, 814, 847, 894], "decod": [92, 93], "im": [92, 93], "usag": [92, 93, 103, 114, 115, 190, 237, 820, 894], "expens": [92, 93, 100, 103, 107, 108, 143, 156, 182, 183, 205, 206, 237, 249, 539, 568, 605, 621, 629, 894], "nativ": [92, 96, 100, 122, 156, 183, 199, 219, 237, 249, 539, 615], "parser": 92, "even": 92, "possibl": [92, 122, 156, 183, 219, 237, 249, 382, 391, 462, 482, 539, 615, 853, 894], "differ": [92, 105, 110, 133, 144, 145, 156, 183, 199, 205, 237, 265, 307, 314, 329, 330, 332, 339, 385, 398, 399, 465, 481, 506, 509, 515, 518, 539, 569, 570, 621, 629, 648, 692, 700, 719, 720, 722, 729, 784, 785, 812, 856, 894], "regard": [92, 525], "sens": [92, 96, 100, 106, 108, 144, 145, 166, 210, 237, 569, 570, 584, 621], "particular": [92, 96, 100, 106, 108, 131, 237, 735, 894], "storag": [92, 94, 96, 100, 104, 106, 108], "connect": [92, 96, 100, 102, 105, 106, 108, 549], "port": [92, 96, 100, 102, 106, 108], "usernam": [92, 96, 100, 102, 106, 108], "password": [92, 96, 100, 102, 106, 108], "skip": [92, 93, 95, 103, 208, 237, 630, 894], "insert": [92, 93, 96, 100, 103, 106, 107, 108, 150, 179, 205, 207, 237, 425, 440, 465, 468, 539, 606, 621, 811, 831, 856, 859, 894], "count": [92, 93, 96, 100, 103, 106, 107, 108, 126, 144, 145, 159, 169, 170, 174, 205, 209, 210, 215, 219, 228, 237, 301, 329, 377, 397, 400, 414, 415, 416, 417, 418, 420, 421, 422, 442, 481, 483, 519, 539, 569, 570, 575, 607, 612, 615, 621, 691, 719, 782, 787, 833, 881, 882, 894], "offset": [92, 93, 96, 100, 103, 106, 107, 108, 144, 145, 191, 210, 215, 237, 279, 329, 333, 338, 435, 459, 465, 539, 569, 570, 599, 612, 621, 662, 719, 723, 728, 826, 850, 856, 894], "row_count": [92, 93, 96, 100, 103, 106, 107, 108], "sampl": [92, 93, 219, 237, 434, 539, 615, 825, 894], "estim": [92, 93, 131, 237, 345, 346, 375, 539, 735, 737, 738, 771, 894], "alloc": [92, 93, 131, 177, 237, 735, 894], "need": [92, 93, 95, 110, 111, 144, 145, 190, 201, 237, 284, 385, 429, 450, 539, 569, 570, 614, 621, 819, 841, 894], "end": [92, 93, 100, 103, 144, 237, 279, 290, 333, 347, 362, 441, 445, 459, 463, 493, 505, 539, 569, 571, 578, 587, 621, 662, 672, 723, 836, 850, 854], "scan_csv": [92, 93, 597, 598, 614, 621], "glob": [92, 93, 103, 106, 108], "pattern": [92, 93, 103, 106, 108, 156, 237, 390, 441, 442, 447, 448, 455, 456, 813, 814, 832, 833, 838, 839, 846, 847, 894], "store": [92, 100, 133, 156, 183, 237, 629, 894], "continu": [92, 100, 434, 539, 825, 894], "benchmark": [92, 100], "50000": 93, "batchedcsvread": [93, 548], "batch": [93, 107, 579, 621], "upon": 93, "creation": 93, "gather": 93, "work": [93, 95, 143, 145, 179, 237, 266, 294, 295, 296, 297, 356, 453, 470, 480, 539, 568, 570, 621, 649, 677, 680, 681, 682, 746, 844, 880, 894], "next_batch": 93, "call": [93, 114, 115, 160, 236, 237, 302, 305, 539, 549, 568, 620, 621, 630, 894], "big": 93, "interest": 93, "seen_group": 93, "big_fil": 93, "while": [93, 94, 95, 104, 114, 115, 156, 165, 205, 237, 583, 621], "df_current_batch": 93, "concat": [93, 494, 495, 678, 781, 894], "partition_df": 93, "partition_bi": [93, 157, 237], "as_dict": [93, 171, 237], "fh": 93, "write_csv": [93, 103, 237], "els": 93, "table_uri": [94, 104], "delta_table_opt": [94, 104], "lake": [94, 104, 548], "uri": [94, 102, 104], "root": [94, 104, 374, 384, 393, 404, 438, 471, 538, 539, 828, 894], "For": [94, 95, 102, 104, 133, 145, 158, 159, 192, 219, 237, 284, 292, 344, 345, 346, 392, 409, 434, 498, 507, 508, 539, 570, 575, 600, 615, 621, 629, 736, 737, 738, 795, 825, 876, 894], "filesystem": [94, 104], "absolut": [94, 104, 110, 111, 243, 344, 345, 346, 539, 625, 736, 737, 738, 894], "rel": [94, 104, 110, 111, 329, 344, 345, 346, 539, 719, 736, 737, 738, 894], "But": [94, 104], "gc": [94, 104], "azur": [94, 104], "thu": [94, 103, 104, 133, 237, 525, 629, 894], "backend": [94, 102, 104], "deltalak": [94, 104], "cloud": [94, 104, 105], "configur": [94, 104], "authent": [94, 104], "keyword": [94, 100, 104, 172, 173, 182, 186, 214, 237, 524, 586, 593, 610, 621, 894], "sinc": [94, 104, 260, 316, 349, 509, 539, 642, 702, 740, 894], "table_path": [94, 104], "partit": [94, 100, 102, 104, 105, 157, 171, 237], "avoid": 94, "year": [94, 104, 144, 145, 159, 210, 237, 319, 329, 330, 333, 338, 339, 414, 415, 416, 417, 418, 420, 421, 422, 501, 502, 539, 569, 570, 575, 621, 705, 719, 720, 723, 728, 729], "2021": [94, 104, 126, 142, 144, 210, 237, 465, 513, 569, 621, 705, 754, 856, 894], "aw": [94, 104], "see": [94, 95, 102, 104, 110, 111, 114, 115, 158, 172, 173, 237, 295, 296, 297, 336, 352, 361, 375, 383, 434, 522, 539, 680, 681, 682, 726, 771, 825, 894, 901], "bucket": [94, 104, 333, 338, 723, 728], "aws_access_key_id": [94, 104], "the_aws_access_key_id": [94, 104], "aws_secret_access_kei": [94, 104], "the_aws_secret_access_kei": [94, 104], "googl": [94, 104], "service_account": [94, 104], "service_account_json_absolute_path": [94, 104], "az": [94, 104], "adl": [94, 104], "abf": [94, 104], "azure_storage_account_nam": [94, 104], "azure_storage_account_kei": [94, 104], "without_fil": [94, 104], "track": [94, 104, 122, 237], "sheet_id": 95, "sheet_nam": 95, "xlsx2csv_option": 95, "read_csv_opt": 95, "excel": [95, 548], "xlsx": 95, "sheet": 95, "xlsx2csv": [95, 109], "read_csv": [95, 103], "skip_empty_lin": 95, "my": [95, 104, 105], "datasheet": 95, "excel_fil": 95, "correct": [95, 345, 346, 375, 419, 434, 539, 579, 621, 737, 738, 771, 805, 825, 894], "look": [95, 284, 287, 669], "document": [95, 102, 449, 465, 840, 856], "fix": [95, 113, 114, 341, 414, 415, 416, 417, 418, 420, 421, 422, 539, 731], "whole": [95, 436, 437, 447, 539, 838], "twice": 95, "With": 95, "1000": [95, 131, 237, 320, 321, 468, 710], "spreadsheet": [95, 174, 237], "xl": 95, "xlsm": 95, "xlsb": 95, "odf": 95, "od": [95, 464, 855], "odt": 95, "memory_map": [96, 100, 106], "v2": [96, 106], "valid": [96, 100, 115, 119, 131, 237, 306, 436, 441, 442, 447, 448, 449, 539, 690, 735, 748, 832, 833, 838, 839, 840, 846, 847, 894], "greatli": [96, 106], "repeat": [96, 106, 408, 410, 539], "o": [96, 106, 306, 446, 479, 539, 690, 837, 879, 894], "page": [96, 106, 237, 539, 548, 598, 621, 894], "give": [96, 100, 106, 107, 108, 165, 237, 316, 375, 410, 539, 548, 583, 621, 702, 771, 894], "read_ndjson": 98, "parallelstrategi": [100, 108], "directori": 100, "awar": [100, 156, 183, 199, 237, 465, 856], "stabl": 100, "increas": [100, 306, 539, 690, 894], "row_group": [100, 108], "direct": [100, 102, 108, 208, 237], "read_tabl": 100, "connection_uri": 102, "partition_on": 102, "partition_rang": 102, "partition_num": 102, "databas": 102, "postgresql": 102, "redshift": 102, "mysql": 102, "mariadb": 102, "clickhous": 102, "oracl": 102, "bigqueri": 102, "server": 102, "pleas": [102, 104], "connectorx": [102, 109], "doc": 102, "github": 102, "com": [102, 344, 345, 346, 447, 539, 736, 737, 738, 838, 894], "sfu": 102, "db": 102, "connector": 102, "destin": 102, "raw": 102, "transfer": 102, "partition_col": 102, "explicitli": [102, 113, 114, 527], "with_column_nam": 103, "push": [103, 105, 106, 107, 108], "down": [103, 105, 106, 107, 108, 356, 539, 746, 894], "therebi": [103, 106, 107, 108], "potenti": [103, 106, 107, 108], "overhead": [103, 106, 107, 108], "updat": [103, 237, 621], "just": [103, 165, 237, 583, 621], "befor": [103, 119, 133, 144, 159, 207, 237, 304, 305, 306, 402, 413, 414, 415, 416, 417, 418, 420, 421, 422, 468, 472, 539, 569, 572, 575, 606, 621, 629, 688, 689, 690, 788, 799, 800, 801, 802, 803, 804, 806, 807, 808, 859, 865, 894], "realloc": [103, 106, 107, 133, 237, 629, 894], "my_long_fil": 103, "doesn": [103, 343, 539, 734, 884, 894], "thing": [103, 486, 506], "less": [103, 159, 237, 451, 457, 462, 468, 575, 621, 842, 848, 853, 859], "limit": [103, 135, 237, 286, 295, 296, 297, 352, 357, 539, 564, 571, 598, 621, 680, 681, 682, 743, 894], "breezah": 103, "languag": [103, 144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719, 723, 728], "terribl": 103, "mydf": 103, "lambda": [103, 122, 138, 173, 219, 237, 249, 284, 344, 345, 346, 383, 384, 413, 500, 528, 539, 579, 586, 615, 621, 630, 667, 736, 737, 738, 894], "raw_filesystem": 104, "adjust": [104, 344, 345, 346, 434, 539, 736, 737, 738, 825, 894], "subtreefilesystem": 104, "reli": 104, "mention": 104, "ensur": [104, 114, 115, 117, 182, 237, 362, 483, 539, 579, 621, 876, 882, 894], "gcsf": 104, "pyfilesystem": 104, "fsspechandl": 104, "gcsfilesystem": 104, "id": [104, 219, 455, 456, 481, 483, 539, 615, 881, 894], "token": 104, "pa_f": 104, "adlf": 104, "azureblobfilesystem": 104, "account_nam": 104, "account_kei": 104, "allow_pyarrow_filt": 105, "lead": [105, 237, 426, 452, 464, 468, 474, 483, 515, 518, 525, 539, 579, 615, 621, 815, 843, 855, 859, 894], "comparison": 105, "dset": 105, "folder": 105, "out": [105, 109, 145, 237, 269, 283, 288, 364, 367, 441, 443, 539, 570, 597, 598, 621, 652, 666, 670, 832, 834], "1970": 105, "stdout": [109, 142, 237], "14": [109, 122, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 319, 361, 539, 723], "platform": 109, "linux": 109, "microsoft": 109, "standard": [109, 193, 237, 319, 345, 420, 434, 439, 449, 526, 539, 601, 621, 705, 737, 825, 829, 840, 894], "wsl2": 109, "x86_64": 109, "glibc2": 109, "main": 109, "jul": [109, 465, 856], "56": [109, 476, 539], "gcc": 109, "20210110": 109, "23": [109, 144, 145, 237, 312, 317, 333, 502, 569, 570, 621, 698, 703], "check_dtyp": [110, 111], "check_exact": [110, 111], "rtol": [110, 111], "1e": [110, 111], "atol": [110, 111], "nans_compare_equ": [110, 111], "check_column_ord": 110, "check_row_ord": 110, "assertionerror": [110, 111], "compar": [110, 111, 139, 237, 812, 894], "exactli": [110, 111, 114, 115, 461, 462, 820, 852, 853, 894], "toler": [110, 111, 159, 237, 575, 621], "inexact": [110, 111], "assert": [110, 111, 113, 114, 115, 145, 237, 548, 570, 621, 748, 894], "irrespect": 110, "unsort": 110, "check_nam": 111, "s1": [111, 138, 237, 877, 885, 894], "searchstrategi": [112, 114, 115], "null_prob": [112, 114, 115], "percentag": [112, 114, 115, 402, 539, 788, 894], "chanc": [112, 114, 115], "flag": [112, 426, 539, 557, 579, 621, 815, 894], "hypothesi": [112, 113, 114, 115, 901], "sampled_from": 112, "unique_small_int": 112, "ccy": 112, "gbp": 112, "eur": [112, 126, 142, 237], "jpy": 112, "min_col": [113, 114], "max_col": [113, 114], "suitabl": [113, 425, 539, 811, 894], "standalon": [113, 114], "itself": [113, 577, 621], "explicit": [113, 489, 522], "random": [113, 114, 115, 146, 184, 237, 358, 407, 424, 430, 539, 749, 793, 810, 821, 894], "mincol": 113, "exact": [113, 114, 115, 190, 237, 465, 856], "especi": 113, "punctuat": 113, "test_special_char_colname_init": 113, "z": [113, 114, 131, 152, 154, 158, 165, 237, 263, 293, 358, 410, 465, 539, 574, 583, 599, 621, 676, 743, 856, 894], "test_unique_xyz": 113, "assert_someth": 113, "min_siz": [114, 115], "max_siz": [114, 115], "include_col": 114, "allow_infin": [114, 115], "allowed_dtyp": [114, 115], "excluded_dtyp": [114, 115], "describ": [114, 142, 237, 614, 894], "desir": 114, "ignor": [114, 115, 163, 194, 237, 265, 307, 332, 344, 345, 346, 398, 399, 539, 648, 692, 722, 736, 737, 738, 784, 785, 894], "n_chunk": [114, 115, 237, 894], "randomis": 114, "individu": [114, 145, 237, 249, 448, 539, 570, 598, 621, 678, 839, 894], "append": [114, 133, 158, 159, 237, 408, 539, 574, 575, 621, 894], "onto": 114, "independ": [114, 115], "either": [114, 145, 160, 163, 182, 194, 237, 570, 577, 621], "basi": 114, "pct": 114, "take": [114, 138, 166, 173, 196, 237, 329, 475, 504, 506, 539, 584, 604, 621, 719, 868, 885, 894], "preced": 114, "disallow": [114, 115], "exclud": [114, 115, 302, 305, 362, 493, 525, 539], "deploi": [114, 115], "characterist": [114, 115], "develop": [114, 115], "directli": [114, 115, 344, 345, 346, 539, 736, 737, 738, 894], "concret": [114, 115], "test_repr": [114, 115], "isinst": [114, 115, 237], "repr": [114, 115], "known": [114, 615], "colnam": [114, 130, 237, 384, 539, 560, 621], "df_strategi": 114, "15836": 114, "1755e": 114, "38": 114, "575050513": 114, "constructor": 115, "max_data_s": 115, "distinct": [115, 171, 237, 285, 407, 501, 502, 503, 539, 668, 793, 894], "54666": 115, "35": [115, 307, 539, 692, 894], "6414": 115, "63290": 115, "pool": 116, "toggl": [117, 465, 856], "scope": 119, "lifetim": 119, "initi": [119, 498, 507], "whatev": 119, "were": 119, "enter": 119, "set_verbos": 119, "do_various_th": 119, "restor": 119, "nan_as_nul": 121, "_pyarrowdatafram": 121, "effect": [121, 138, 237, 612, 621], "nullabl": 121, "extens": [121, 202, 237, 877, 894], "propag": [121, 163, 194, 237, 398, 399, 539, 784, 785, 894], "return_dtyp": [122, 237, 249, 383, 488, 514, 539, 630, 894], "inference_s": [122, 237], "256": [122, 237, 788, 894], "user": [122, 173, 219, 237, 249, 426, 488, 539, 586, 615, 621, 630, 815, 894], "udf": [122, 173, 219, 237, 249, 488, 539, 586, 615, 621, 630, 894], "logic": [122, 219, 237, 249, 478, 539, 567, 574, 589, 613, 615, 621, 878, 894], "almost": [122, 219, 237, 249, 539, 615], "_significantly_": [122, 219, 237, 249, 539, 615], "intens": [122, 219, 237, 249, 539, 615], "becaus": [122, 131, 144, 160, 208, 219, 237, 249, 266, 539, 569, 615, 621, 630, 649, 735, 894], "engin": [122, 219, 237, 249, 539, 579, 615, 621], "forc": [122, 159, 219, 237, 249, 539, 574, 575, 615, 621], "materi": [122, 219, 237, 249, 539, 587, 615, 621], "parallelis": [122, 219, 237, 249, 539, 615], "optimis": [122, 219, 237, 249, 539, 615, 813, 814, 894], "wherev": [122, 219, 237, 249, 539, 615], "strongli": [122, 219, 237, 249, 539, 615], "achiev": [122, 219, 237, 249, 539, 615], "best": [122, 219, 237, 249, 539, 615], "tri": [122, 237], "arbitrarili": [122, 237], "rearrang": [122, 237], "preserv": [122, 202, 237, 431, 539, 822, 877, 894], "syntax": [122, 169, 192, 237, 470, 568, 596, 600, 621, 894], "15": [122, 144, 145, 150, 237, 306, 307, 333, 338, 349, 539, 569, 570, 621, 690, 692, 723, 728, 740, 894], "better": [122, 219, 237, 249, 483, 539, 615, 813, 814, 894], "scalar": [122, 155, 237, 425, 488, 539, 770, 811, 894], "ident": [123, 124, 237, 552, 553, 621, 679, 683, 894], "cheap": [123, 124, 237, 552, 553, 621, 629, 679, 683, 894], "deepcopi": [123, 124, 237, 552, 553, 621, 679, 683, 894], "13": [123, 124, 134, 135, 141, 145, 150, 160, 168, 214, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 413, 415, 494, 530, 539, 552, 553, 563, 564, 570, 577, 610, 621, 630, 723, 728, 729, 894], "clear": [124, 237, 553, 621, 683, 894], "properti": [125, 130, 148, 185, 187, 213, 237, 548, 555, 560, 592, 609, 621], "appl": [125, 149, 158, 178, 180, 198, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 404, 412, 445, 463, 471, 539, 574, 590, 621, 836, 854], "banana": [125, 198, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 404, 412, 471, 539], "summari": [126, 237, 691, 894], "glimps": [126, 147, 237], "usd": [126, 142, 237], "2020": [126, 142, 145, 237, 313, 315, 318, 320, 321, 323, 325, 328, 332, 335, 336, 570, 621, 699, 701, 704, 710, 712, 715, 718, 722, 725], "null_count": [126, 129, 237, 306, 539, 690, 691, 894], "266667": [126, 237], "666667": [126, 163, 211, 225, 237, 344, 539, 608, 621], "std": [126, 237, 413, 539, 621, 691, 806, 894], "101514": [126, 237], "707107": [126, 237, 345, 539, 737, 894], "57735": [126, 237], "median": [126, 174, 237, 416, 539, 611, 621, 802, 894], "snippet": [129, 237, 559, 621], "is_nul": [129, 237, 539, 559, 621, 894], "height": [129, 237], "sizeunit": [131, 237, 735, 894], "total": [131, 237, 735, 894], "heap": [131, 237, 735, 894], "its": [131, 207, 237, 312, 333, 338, 606, 621, 698, 723, 728, 735, 894], "bitmap": [131, 237, 735, 894], "therefor": [131, 237, 284, 735, 894], "structarrai": [131, 237, 735, 894], "constant": [131, 145, 237, 350, 539, 570, 621, 735, 741, 894], "unchang": [131, 237, 249, 478, 539, 579, 615, 621, 735, 878, 894], "visibl": [131, 237, 735, 894], "capac": [131, 190, 237, 735, 820, 894], "ffi": [131, 237, 735, 894], "kb": [131, 237, 735, 894], "mb": [131, 237, 735, 894], "gb": [131, 237, 735, 894], "tb": [131, 237, 735, 894], "scale": [131, 237, 735, 894], "1_000_000": [131, 237, 735, 894], "25888898": [131, 237], "689577102661133": [131, 237], "long": [132, 165, 208, 237, 561, 583, 621], "largelist": [132, 237], "letter": [132, 222, 231, 237, 347, 505, 539, 561, 616, 617, 621], "locat": [133, 180, 203, 207, 237, 425, 539, 606, 621, 629, 811, 814, 867, 894], "faster": [133, 208, 237, 249, 413, 453, 481, 539, 597, 598, 621, 629, 630, 799, 844, 894], "onlin": [133, 237, 629, 894], "rerun": [133, 237, 629, 894], "latter": [133, 237, 629, 894], "20": [133, 149, 150, 173, 175, 179, 180, 237, 256, 257, 258, 260, 307, 333, 338, 358, 361, 509, 513, 539, 586, 621, 692, 728, 894], "40": [133, 173, 237, 333, 338, 358, 539, 586, 621, 705, 728], "50": [133, 237, 295, 296, 297, 333, 338, 539, 680, 728, 894], "60": [133, 237, 334, 335, 465, 720, 724, 725, 856], "fill_valu": [134, 189, 208, 237, 351, 428, 539, 563, 595, 621, 742, 818, 894], "Not": [134, 237, 368, 370, 385, 539, 563, 621], "To": [134, 237, 309, 310, 352, 515, 518, 528, 539, 563, 621], "fillnullstrategi": [135, 237, 352, 539, 564, 621, 743, 894], "matches_supertyp": [135, 237, 564, 621], "forward": [135, 159, 237, 352, 357, 539, 564, 575, 621, 743, 894], "consecut": [135, 237, 286, 352, 357, 440, 539, 564, 621, 743, 831, 894], "supertyp": [135, 237, 248, 539, 564, 621], "fill_nan": [135, 237, 539, 621, 894], "OR": [136, 237, 487, 565, 621], "reduct": [138, 237], "supercast": [138, 237], "similar": [138, 159, 237, 401, 539, 575, 621], "parent": [138, 237], "rule": [138, 237, 336, 726], "arithmet": [138, 237], "zip_with": [138, 237, 894], "foo11": [138, 237], "bar22": [138, 237], "null_equ": [139, 237, 812, 894], "retriev": [140, 237, 261, 262, 469, 644, 645, 860], "return_as_str": [142, 237], "preview": [142, 237], "wide": [142, 165, 208, 237, 583, 621], "nice": [142, 237], "few": [142, 237], "rather": [142, 159, 237, 468, 575, 621, 859], "head": [142, 161, 195, 237, 248, 378, 539, 578, 621, 773, 894], "tail": [142, 147, 217, 237, 248, 434, 539, 621, 825, 894], "maintain_ord": [143, 171, 174, 206, 210, 217, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 244, 249, 474, 480, 496, 539, 554, 557, 562, 568, 587, 596, 597, 598, 605, 621, 880, 894], "consist": [143, 237, 568, 621], "agg": [143, 144, 145, 237, 244, 249, 353, 355, 436, 474, 485, 496, 539, 554, 557, 562, 568, 569, 570, 587, 596, 621], "loop": [143, 237], "sub_df": [143, 237], "index_column": [144, 145, 237, 569, 570, 621], "truncat": [144, 237, 569, 587, 621], "include_boundari": [144, 237, 569, 621], "start_bi": [144, 237, 569, 621], "startbi": [144, 237, 569, 621], "dynamicgroupbi": [144, 237], "normal": [144, 237, 343, 375, 434, 539, 569, 621, 734, 771, 825, 894], "groupbi": [144, 145, 169, 237, 244, 249, 266, 306, 353, 355, 401, 436, 437, 474, 485, 488, 496, 539, 554, 557, 562, 569, 570, 587, 596, 621, 649, 690, 894], "member": [144, 237, 569, 621, 760, 894], "seen": [144, 237, 286, 357, 539, 569, 621], "roll": [144, 145, 237, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 494, 539, 569, 570, 621, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 894], "slot": [144, 237, 265, 306, 307, 539, 569, 621, 648, 690, 692, 894], "1n": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719, 723, 728], "nanosecond": [144, 145, 159, 210, 237, 329, 333, 334, 338, 414, 415, 416, 417, 418, 420, 421, 422, 503, 539, 569, 570, 575, 621, 719, 723, 724, 728], "1u": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719, 723, 728], "microsecond": [144, 145, 159, 210, 237, 329, 333, 334, 338, 414, 415, 416, 417, 418, 420, 421, 422, 502, 503, 539, 569, 570, 575, 587, 621, 719, 723, 728], "1m": [144, 145, 159, 210, 237, 320, 321, 323, 328, 329, 333, 335, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 710, 712, 718, 719, 723, 725, 728], "millisecond": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 503, 539, 569, 570, 575, 621, 719, 723, 728], "1h": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 703, 719, 723, 728], "1w": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719, 723, 728], "week": [144, 145, 159, 210, 237, 329, 333, 338, 340, 414, 415, 416, 417, 418, 420, 421, 422, 503, 539, 569, 570, 575, 621, 719, 723, 728, 730], "month": [144, 145, 159, 210, 237, 314, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 501, 502, 539, 569, 570, 575, 621, 700, 719, 723, 728], "1y": [144, 145, 159, 210, 237, 329, 333, 338, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719, 723, 728, 732], "1i": [144, 145, 159, 210, 237, 329, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 570, 575, 621, 719], "Or": [144, 145, 159, 210, 237, 401, 531, 539, 569, 570, 575, 621], "10i": [144, 145, 237, 569, 570, 621], "ascend": [144, 145, 237, 490, 569, 570, 621], "often": [144, 145, 237, 410, 539, 569, 570, 621], "dynam": [144, 237, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 621], "matter": [144, 145, 156, 183, 199, 237, 569, 570, 621], "neg": [144, 147, 188, 189, 191, 195, 237, 278, 279, 427, 428, 435, 459, 539, 569, 594, 595, 599, 612, 621, 661, 662, 817, 818, 826, 850, 894], "_lower_bound": [144, 237, 569, 621], "_upper_bound": [144, 237, 569, 621], "impact": [144, 237, 569, 621], "harder": [144, 237, 569, 621], "side": [144, 145, 237, 362, 414, 415, 416, 417, 418, 420, 421, 422, 425, 539, 569, 570, 621, 811, 894], "inclus": [144, 145, 237, 362, 414, 415, 416, 417, 418, 420, 421, 422, 460, 461, 539, 569, 570, 621, 851, 852], "datapoint": [144, 237, 569, 621], "mondai": [144, 237, 340, 569, 621, 730], "date_rang": [144, 210, 237, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 569, 621, 697, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], "30m": [144, 237, 333, 338, 569, 621, 723, 728], "time_min": [144, 237, 569, 621], "time_max": [144, 237, 569, 621], "boundari": [144, 237, 295, 296, 297, 539, 569, 621, 680, 681, 682, 894], "time_count": [144, 237, 569, 621], "_lower_boundari": [144, 237, 569, 621], "_upper_boundari": [144, 237, 569, 621], "lower_bound": [144, 237, 539, 569, 621], "upper_bound": [144, 237, 284, 539, 569, 621], "time_agg_list": [144, 237, 569, 621], "idx": [144, 157, 237, 284, 569, 621, 667, 814, 894], "arang": [144, 208, 219, 237, 569, 615, 621], "2i": [144, 237, 569, 621], "3i": [144, 237, 569, 621], "a_agg_list": [144, 237, 569, 621], "rollinggroupbi": [145, 237], "dynamic_groupbi": [145, 237, 570, 621], "groupby_dynam": [145, 237, 570, 621], "45": [145, 237, 312, 333, 338, 442, 448, 570, 621, 698, 723, 728, 833, 839], "48": [145, 237, 570, 621], "18": [145, 237, 305, 333, 338, 341, 361, 374, 539, 570, 587, 621, 731], "19": [145, 159, 237, 333, 570, 575, 621, 723, 728], "43": [145, 237, 305, 539, 570, 621], "strptime": [145, 237, 336, 570, 621, 726], "2d": [145, 201, 237, 570, 621, 700], "sum_a": [145, 237, 570, 621], "min_a": [145, 237, 570, 621], "max_a": [145, 237, 570, 621], "to_list": [145, 237, 284, 570, 621, 667, 894], "seed": [146, 184, 237, 358, 424, 430, 539, 749, 810, 821, 894], "seed_1": [146, 237, 358, 539, 749, 894], "seed_2": [146, 237, 358, 539, 749, 894], "seed_3": [146, 237, 358, 539, 749, 894], "hash": [146, 237, 539, 894], "u64": [146, 237, 358, 409, 539, 587, 621, 749, 894], "10783150408545073287": [146, 237], "1438741209321515184": [146, 237], "10047419486152048166": [146, 237], "2047317070637311557": [146, 237], "last": [147, 159, 174, 192, 195, 206, 231, 237, 258, 260, 269, 282, 306, 314, 330, 339, 462, 473, 529, 539, 568, 575, 600, 603, 605, 617, 621, 639, 642, 652, 665, 690, 700, 720, 729, 853, 866, 894], "_except_": [147, 195, 237], "ab": [147, 195, 214, 237, 515, 518, 539, 610, 621, 894], "grown": [149, 237], "baz": [150, 151, 174, 207, 237, 460, 462, 573, 606, 621, 853], "intermedi": [151, 237, 573, 621, 752, 894], "linear": [151, 176, 229, 237, 263, 361, 388, 406, 418, 494, 495, 521, 539, 573, 588, 621, 646, 752, 792, 804, 894], "mask": [152, 154, 237, 264, 287, 288, 363, 365, 373, 441, 443, 539, 647, 669, 670, 744, 755, 758, 768, 789, 790, 813, 832, 834, 885, 894], "visual": [152, 154, 237], "buffer_s": [156, 237], "500": [156, 209, 237, 562, 607, 621, 709, 711, 717, 724, 800, 801, 803, 894], "veri": [156, 205, 237, 553, 621, 683, 894], "fit": [156, 190, 208, 237, 429, 539, 819, 820, 894], "speedup": [156, 237], "signific": [156, 237], "4x": [156, 237], "disabl": [156, 237], "export": [156, 157, 183, 199, 237, 512], "materialis": [156, 157, 182, 183, 237], "10000": [157, 237, 468], "iter_row": [157, 182, 183, 237], "17_500": [157, 237], "2023": [157, 237, 312, 698], "klmnoopqrstuvwxyz": [157, 237], "__name__": [157, 237], "7500": [157, 237], "recordbatch": [157, 237], "15_000": [157, 237], "record_batch": [157, 237], "to_arrow": [157, 237, 894], "to_batch": [157, 237], "date32": [157, 237], "large_str": [157, 197, 202, 237], "15000": [157, 237], "2500": [157, 237], "left_on": [158, 159, 237, 574, 575, 621], "right_on": [158, 159, 237, 574, 575, 621], "joinstrategi": [158, 237, 574, 621], "suffix": [158, 159, 186, 214, 217, 237, 290, 368, 370, 371, 372, 412, 445, 465, 539, 574, 575, 593, 610, 611, 621, 672, 836, 856], "_right": [158, 159, 237, 574, 575, 621], "outer": [158, 237, 574, 621], "semi": [158, 237, 574, 621], "anti": [158, 237, 574, 621, 813, 814, 894], "cross": [158, 237, 574, 621], "join_asof": [158, 237, 574, 621], "stringcach": [158, 237, 548], "other_df": [158, 237, 574, 621], "by_left": [159, 237, 575, 621], "by_right": [159, 237, 575, 621], "asofjoinstrategi": [159, 237, 575, 621], "allow_parallel": [159, 237, 574, 575, 621], "force_parallel": [159, 237, 574, 575, 621], "asof": [159, 237, 575, 621], "asof_join": [159, 237], "search": [159, 237, 575, 621], "greater": [159, 237, 434, 462, 539, 575, 621, 825, 853, 894], "numer": [159, 237, 295, 296, 297, 362, 410, 429, 539, 548, 575, 621, 680, 681, 682, 766, 812, 819, 894], "distanc": [159, 237, 575, 621], "plan": [159, 160, 237, 551, 556, 557, 567, 574, 575, 589, 596, 613, 621], "gdp": [159, 237, 575, 621], "2016": [159, 237, 575, 621], "2017": [159, 237, 575, 621], "2018": [159, 237, 575, 621], "2019": [159, 237, 575, 621], "record": [159, 237, 575, 621], "jan": [159, 237, 575, 621], "1st": [159, 237, 575, 621], "4164": [159, 237, 575, 621], "4411": [159, 237, 575, 621], "4566": [159, 237, 575, 621], "4696": [159, 237, 575, 621], "popul": [159, 237, 575, 621], "12th": [159, 237, 575, 621], "82": [159, 237, 575, 621], "66": [159, 237, 575, 621, 804, 894], "83": [159, 237, 575, 621], "52": [159, 214, 237, 423, 539, 575, 610, 621], "request": [160, 237], "small": [160, 237, 333, 436, 437, 539, 562, 621], "describe_plan": [160, 237, 621], "unoptim": [160, 237, 557, 621], "describe_optimized_plan": [160, 237, 557, 621], "show_graph": [160, 237, 621], "un": [160, 237], "graphviz": [160, 237, 596, 621], "advis": [160, 237], "axi": [162, 163, 165, 167, 194, 237, 583, 621], "null_strategi": [163, 194, 237], "nullstrategi": [163, 194, 237], "spam": [163, 237], "id_var": [165, 237, 583, 621], "value_var": [165, 237, 583, 621], "variable_nam": [165, 237, 583, 621], "value_nam": [165, 237, 583, 621], "unpivot": [165, 237, 583, 621], "leav": [165, 237, 583, 621], "identifi": [165, 206, 237, 583, 605, 621], "massag": [165, 237, 583, 621], "measur": [165, 237, 583, 621], "merg": [166, 237, 584, 621], "caller": [166, 237, 284, 579, 584, 615, 621], "respons": [166, 237, 584, 621], "One": [169, 174, 237, 894], "what": [169, 237, 876, 884, 894], "struct": [169, 186, 204, 207, 214, 237, 284, 385, 461, 462, 483, 498, 499, 500, 539, 593, 606, 610, 621, 667, 852, 853], "pack": [169, 237], "expr_unique_subset": [169, 237], "df_nuniqu": [169, 237], "df_agg_nuniqu": [169, 237], "simpl": [169, 237], "predict": [171, 174, 177, 210, 237], "k": [171, 237, 293, 375, 479, 539, 676, 771, 879, 894], "l": [171, 237], "pearson": [172, 237, 375, 434, 520, 539, 771, 825, 894], "correl": [172, 237, 520, 525], "coeffici": [172, 237, 434, 539, 825, 894], "corrcoef": [172, 237], "func": [173, 237, 586, 621, 630, 894], "offer": [173, 237, 586, 621], "recommend": [173, 237], "fulli": [173, 237, 465, 856], "advantag": [173, 237], "cast_str_to_int": [173, 237, 586, 621], "col_nam": [173, 237, 586, 621], "tdf": [173, 237, 586, 621], "aggregate_fn": [174, 237], "pivotagg": [174, 237], "sort_column": [174, 237], "well": [174, 237, 362, 539], "predefin": [174, 237], "transpos": [174, 237], "discoveri": [174, 237], "interpol": [176, 229, 237, 352, 388, 406, 418, 521, 539, 588, 621, 792, 804, 894], "rollinginterpolationmethod": [176, 229, 237, 406, 418, 521, 539, 588, 621, 792, 804, 894], "midpoint": [176, 229, 237, 406, 418, 521, 539, 588, 621, 792, 804, 894], "subsequ": [177, 237], "old": [178, 237, 590, 621], "new_col": [179, 237], "val": [181, 237, 293, 478, 539, 591, 621, 676], "by_pred": [182, 237], "accord": [182, 237, 385, 539, 705], "mutual": [182, 237], "exclus": [182, 237], "addition": [182, 237], "clariti": [182, 237], "anyth": [182, 237], "toomanyrowsreturn": [182, 237, 548], "norowsreturn": [182, 237, 548], "inherit": [182, 237], "rowsexcept": [182, 237, 548], "frac": [184, 237, 344, 345, 346, 424, 434, 479, 539, 736, 737, 738, 810, 825, 879, 894], "with_replac": [184, 237, 424, 539, 810, 894], "shuffl": [184, 219, 237, 424, 539, 615, 810, 894], "modul": [184, 237, 424, 430, 538, 539, 810, 821, 894], "polarsexprtyp": [186, 214, 237, 524, 593, 610, 621], "pythonliter": [186, 214, 237, 524, 593, 610, 621, 741, 894], "more_expr": [186, 214, 237, 524, 593, 610, 621], "named_expr": [186, 214, 237, 524, 593, 610, 621], "posit": [186, 214, 237, 344, 345, 346, 454, 524, 539, 593, 610, 621, 736, 737, 738, 845, 894], "threshold": [186, 237, 593, 621], "instanti": [186, 214, 237, 593, 610, 621], "set_auto_structifi": [186, 214, 237, 593, 610, 621], "integer_dtyp": [186, 237, 593, 621], "is_odd": [186, 237, 593, 621], "_is_odd": [186, 237, 593, 621], "shift_and_fil": [188, 237, 539, 621, 894], "shift": [189, 237, 265, 307, 402, 428, 494, 539, 595, 621, 648, 692, 788, 818, 894], "shrink": [190, 237, 429, 539, 819, 820, 894], "hold": [190, 237, 493], "nulls_last": [192, 237, 258, 260, 436, 539, 600, 621, 639, 642, 894], "ddof": [193, 211, 237, 439, 484, 520, 525, 526, 530, 539, 601, 608, 621, 829, 883, 894], "deviat": [193, 237, 345, 420, 439, 526, 539, 601, 621, 737, 829, 894], "degre": [193, 211, 237, 439, 484, 520, 525, 539, 829, 883, 894], "freedom": [193, 211, 237, 439, 484, 520, 525, 539, 829, 883, 894], "816497": [193, 237], "21": [194, 237, 509], "16a": [194, 237], "27b": [194, 237], "38c": [194, 237], "nth": [196, 237, 462, 475, 539, 604, 621, 853, 868, 894], "mostli": [197, 237, 353, 539], "categoricaltyp": [197, 237], "as_seri": [198, 237], "fruit": [198, 237, 404, 412, 445, 463, 471, 539, 836, 854], "car": [198, 237, 404, 412, 471, 539], "beetl": [198, 237, 404, 412, 471, 539], "audi": [198, 237, 404, 412, 471, 539], "28": [198, 237, 341, 731], "300": [198, 237, 800, 801, 803, 894], "hot": [200, 237], "re": [201, 237, 512], "ll": [201, 237], "numpy_arrai": [201, 237], "use_pyarrow_extension_arrai": [202, 237, 877, 894], "further": [202, 237, 877, 894], "trigger": [202, 237, 877, 894], "sent": [202, 237, 876, 877, 894], "pandas_df1": [202, 237], "pandas_df2": [202, 237], "pandas_df2_pa": [202, 237], "na": [202, 237, 877, 894], "three": [204, 237, 425, 527, 539], "four": [204, 237, 527], "five": [204, 237], "num": [204, 237, 362, 365, 468, 539], "include_head": [205, 237], "header_nam": [205, 237], "column_nam": [205, 237], "perhap": [205, 237], "column_2": [205, 237], "name_gener": [205, 237, 284, 667], "base_nam": [205, 237], "my_column_": [205, 237], "my_column_0": [205, 237], "my_column_1": [205, 237], "my_column_2": [205, 237], "uniquekeepstrategi": [206, 237, 605, 621], "decompos": [207, 237, 606, 621], "t_a": [207, 237, 606, 621], "t_b": [207, 237, 606, 621], "t_c": [207, 237, 606, 621], "t_d": [207, 237, 606, 621], "womp": [207, 237, 606, 621], "t_": [207, 237, 606, 621], "t_struct": [207, 237, 606, 621], "step": [208, 237, 489], "unstackdirect": [208, 237], "much": [208, 237, 283, 306, 539, 666, 690, 894], "pivot": [208, 237], "phase": [208, 237], "subject": [208, 237], "ascii_uppercas": [208, 237], "col1": [208, 237], "col2": [208, 237], "h": [208, 237, 336, 429, 539], "col1_0": [208, 237], "col1_1": [208, 237], "col1_2": [208, 237], "col2_0": [208, 237], "col2_1": [208, 237], "col2_2": [208, 237], "syntact": [209, 237, 500, 505, 506, 510, 521, 524, 528, 607, 621, 828, 894], "sugar": [209, 237, 500, 505, 506, 510, 521, 524, 528, 607, 621, 828, 894], "coalesc": [209, 237, 607, 621], "400": [209, 237, 607, 621, 800, 801, 803, 894], "600": [209, 237, 607, 621], "700": [209, 237, 607, 621], "new_df": [209, 237, 607, 621], "time_column": [210, 237], "frequenc": [210, 237], "forward_fil": [210, 237, 302, 305, 539], "06": [210, 237, 312, 319, 331, 332, 342, 723, 730], "varianc": [211, 237, 346, 375, 422, 484, 530, 539, 608, 621, 738, 771, 808, 883, 894], "grow": [212, 237], "is_not": [214, 237, 539, 610, 621], "not_c": [214, 237, 610, 621], "diff": [214, 237, 315, 318, 321, 323, 325, 328, 335, 539, 610, 621, 701, 704, 710, 712, 715, 718, 725, 894], "_diff": [214, 237, 610, 621], "row_nr": [215, 237, 385, 539, 612, 621, 814, 894], "complet": [217, 876, 894], "idiomat": 217, "_sum": 217, "_tail_sum": 217, "bar_sum": 217, "bar_tail_sum": 217, "sub": [219, 290, 291, 445, 463, 672, 673, 836, 854], "triangl": [219, 615], "group_df": [219, 615], "nr": [222, 231, 616, 617], "maxim": [224, 256, 539, 637, 894], "833333": 225, "minim": [227, 257, 262, 429, 539, 638, 645, 779, 819, 894], "overview": [237, 539, 548, 621, 894], "public": [237, 539, 548, 621, 894], "variou": [237, 539, 621, 894], "entri": 237, "prevent": [237, 304, 305, 374, 472, 539, 688, 689, 865, 894], "come": [237, 375, 539, 549, 620, 771, 894], "behavior": [237, 249, 283, 488, 515, 518, 539, 666], "mydatafram": 237, "notic": [237, 894], "df4": 237, "df5": 237, "df6": 237, "drop_in_plac": 237, "drop_nul": [237, 309, 539, 621, 894], "estimated_s": [237, 894], "explod": [237, 355, 539, 621, 894], "find_idx_by_nam": 237, "fold": [237, 392, 492, 498, 499, 522, 528], "frame_equ": [237, 333, 338], "get_column": [237, 528], "groupby_rol": [237, 414, 415, 416, 417, 418, 420, 421, 422, 539, 569, 621], "hash_row": 237, "hstack": 237, "insert_at_idx": 237, "is_dupl": [237, 539, 894], "is_empti": [237, 894], "is_uniqu": [237, 539, 894], "iter_slic": 237, "melt": [237, 621], "merge_sort": [237, 621], "n_uniqu": [237, 539, 614, 894], "pearson_corr": 237, "pipe": [237, 621], "quantil": [237, 418, 539, 621, 804, 894], "replace_at_idx": 237, "shrink_to_fit": [237, 894], "take_everi": [237, 539, 621, 894], "to_dict": 237, "to_numpi": [237, 383, 539, 894], "to_panda": [237, 894], "to_struct": [237, 469, 470], "unnest": [237, 461, 462, 621, 852, 853], "unstack": 237, "upsampl": 237, "var": [237, 539, 621, 894], "write_avro": 237, "write_ipc": 237, "write_json": [237, 589, 621], "write_parquet": 237, "94": [244, 539], "confus": [246, 368, 370, 539], "tt": [246, 539], "tf": [246, 247, 539], "ff": [246, 247, 539], "upcast": [248, 539], "skip_nul": [249, 539, 630, 894], "pass_nam": [249, 539], "assum": [249, 539, 579, 615, 621], "a_times_2": [249, 539], "invers": [250, 251, 252, 253, 254, 255, 539, 631, 632, 633, 634, 635, 636, 894], "cosin": [250, 251, 298, 299, 383, 539, 631, 632, 684, 685, 894], "570796": [250, 252, 539, 631, 633, 894], "hyperbol": [251, 253, 255, 299, 433, 477, 539, 632, 634, 636, 685, 824, 870, 894], "sine": [252, 253, 383, 432, 433, 539, 633, 634, 823, 824, 894], "881374": [253, 539, 634, 894], "tangent": [254, 255, 476, 477, 539, 635, 636, 869, 870, 894], "785398": [254, 539, 635, 894], "arg_sort": [260, 539, 642, 894], "deprec": [260, 349, 539, 642, 740, 894], "favour": [260, 349, 539, 642, 740, 894], "sublist": [261, 262, 264, 265, 268, 269, 270, 271, 272, 279, 282, 283, 644, 645, 647, 648, 651, 652, 653, 654, 655, 662, 665, 666, 667, 760, 894], "membership": [264, 647], "null_behavior": [265, 307, 539, 648, 692, 894], "nullbehavior": [265, 307, 539, 648, 692, 894], "th": [265, 307, 434, 539, 648, 692, 825, 894], "against": [266, 621, 649, 900], "blindli": [266, 649], "worth": [266, 649], "enough": [266, 434, 539, 649, 825, 894], "alreadi": [266, 306, 539, 649, 690, 894], "concat_list": [266, 504, 649], "rank": [266, 504, 525, 539, 649, 894], "taken": [279, 459, 474, 539, 662, 850], "null_on_oob": [283, 666], "anoth": [283, 306, 311, 437, 539, 611, 621, 630, 666, 690, 697, 812, 894], "cheaper": [283, 666], "n_field_strategi": [284, 667], "tostructstrategi": [284, 667], "first_non_nul": [284, 667], "max_width": [284, 667], "field_0": [284, 667], "field_1": [284, 667], "field_n": [284, 667], "know": [284, 453, 844, 876, 884, 894], "incorrectli": 284, "downstream": [284, 426, 539, 815, 894], "advic": 284, "col_name_": [284, 667], "col_name_0": [284, 667], "col_name_1": [284, 667], "col_name_2": [284, 667], "substr": [287, 290, 291, 441, 445, 455, 456, 460, 461, 462, 463, 669, 672, 673, 832, 836, 846, 847, 851, 852, 853, 854], "transferencod": [288, 289, 443, 444, 670, 671, 834, 835], "strict": [288, 292, 441, 443, 465, 539, 670, 674, 812, 832, 834, 856, 894], "hex": [288, 289, 443, 444, 454, 670, 671, 834, 835, 845], "base64": [288, 289, 443, 444, 670, 671, 834, 835], "prefix": [291, 463, 468, 539, 673, 854, 859], "due": [292, 539, 674, 894], "overflow": [292, 304, 305, 472, 539, 674, 688, 689, 865, 894], "categoricalord": [293, 676], "lexic": [293, 676], "min_val": [295, 297, 539, 680, 682, 894], "max_val": [295, 296, 539, 680, 681, 894], "foo_clip": [295, 296, 297, 539], "clip": [296, 297, 539, 681, 682, 894], "543081": [299, 539, 685, 894], "cumul": [301, 302, 303, 304, 305, 498, 499, 500, 539, 686, 687, 688, 689, 894], "a_revers": [301, 302, 303, 304, 305, 384, 412, 471, 539], "value_cummax": [302, 539], "value_cummax_all_fil": [302, 539], "uint16": [304, 305, 472, 539, 688, 689, 865, 894], "value_cumsum": [305, 539], "value_cumsum_all_fil": [305, 539], "min_period": [306, 344, 345, 346, 413, 414, 415, 416, 417, 418, 420, 421, 422, 539, 690, 736, 737, 738, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "slide": [306, 539, 690, 894], "realli": [306, 539, 690, 894], "complex": [306, 479, 539, 690, 879, 894], "visit": [306, 539, 690, 894], "44": [308, 539], "drop_nan": [310, 539, 894], "tu": [311, 312, 316, 337, 341, 697, 698, 702, 722, 727, 731], "lose": [311, 697], "2001": [311, 314, 316, 317, 319, 324, 326, 329, 330, 331, 333, 334, 337, 338, 339, 340, 341, 342, 465, 697, 700, 702, 703, 706, 707, 708, 709, 711, 713, 714, 716, 717, 719, 720, 721, 723, 724, 726, 727, 728, 729, 730, 731, 732, 856], "tu_m": [311, 697], "tu_n": [311, 697], "tm": [312, 698], "naiv": [312, 698], "compon": [312, 334, 465, 501, 502, 503, 698, 724], "resolv": 312, "dtm": [312, 698], "59": [312, 324, 334, 502, 698, 714, 724], "456000": [312, 698], "101000": 312, "456": [312, 698, 874, 894], "101": [312, 454, 845], "d1": 312, "d2": 312, "d3": 312, "utc": [313, 332, 465, 699, 722, 856], "tz": [313, 332, 699, 722], "europ": [313, 332, 699, 722], "london": [313, 332, 699, 722], "gmt": [313, 332, 699, 722], "bst": [313, 332, 699, 722], "extract": [314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 334, 335, 339, 340, 342, 448, 449, 700, 701, 703, 704, 705, 709, 710, 711, 712, 714, 715, 716, 717, 718, 720, 721, 724, 725, 729, 730, 732, 839, 840], "weekdai": [314, 330], "day_of_month": [314, 330, 340], "ordinal_dai": [314, 340], "day_of_year": [314, 330, 340], "days_diff": 315, "epochtimeunit": [316, 702], "unix": [316, 509, 702], "epoch_n": [316, 702], "epoch_": [316, 702], "978307200000000": [316, 337, 702, 727], "978307200": [316, 702], "978393600000000": [316, 337, 702, 727], "978393600": [316, 702], "978480000000000": [316, 337, 702, 727], "978480000": [316, 702], "hours_diff": 318, "iso": [319, 339, 340, 705, 729, 730], "correspond": [319, 407, 539, 705, 793, 894], "2006": [319, 329, 719], "180": [319, 331, 342], "2002": [319, 329, 331, 342, 719, 732], "2004": [319, 329, 719], "2005": [319, 329, 719], "1001": [320, 321, 323, 328], "002": [320, 321, 323, 328, 503, 710, 712, 718], "2000": [320, 329, 719], "003": [320, 321, 323, 328], "3000": 320, "997": [320, 321, 323, 328], "997000": 320, "998": [320, 321, 323, 328], "998000": 320, "999": [320, 321, 323, 328], "999000": 320, "microseconds_diff": 321, "milliseconds_diff": 323, "minutes_diff": 325, "1440": [325, 715], "nanoseconds_diff": 328, "1000000": [328, 468, 718], "leap": [329, 719], "account": [329, 344, 345, 346, 539, 719, 736, 737, 738, 894], "minu": [329, 719], "dictat": [329, 719], "date_plus_1i": [329, 719], "1y2mo": [329, 719], "date_min": 329, "1998": [329, 719], "1999": [329, 719], "2003": [329, 509, 719], "ordin": [330, 407, 539, 720, 793, 894], "366": [330, 720], "convert_time_zon": [332, 465, 722, 856], "timestamp": [332, 509, 722], "unset": [332, 722], "london_timezon": 332, "amsterdam": 332, "london_to_amsterdam": 332, "cet": 332, "cest": 332, "half": [333, 344, 345, 346, 539, 723, 736, 737, 738, 894], "eg": [333, 465], "225": [333, 338], "to_fram": [333, 338, 465, 469, 470, 813, 814, 852, 853, 856, 894], "10m": [333, 338, 723, 728], "milli": [334, 724], "micro": [334, 724], "456789": 334, "654321": 334, "111110": 334, "765431": 334, "sec": 334, "11111": 334, "seconds_diff": 335, "timestamp_n": [337, 727], "timestamp_m": 337, "978307200000": 337, "978393600000": 337, "978480000000": 337, "53": [339, 729], "sundai": [340, 730], "incorrect": [341, 426, 539, 615, 731, 815, 894], "tu_u": [341, 731], "32971": [341, 731], "32974": [341, 731], "32976": [341, 731], "718281828459045": [343, 380, 539, 734, 774, 894], "formula": [343, 539, 734, 894], "pk": [343, 539, 734, 894], "459148": [343, 539], "754888": [343, 539], "span": [344, 345, 346, 539, 736, 737, 738, 894], "half_lif": [344, 345, 346, 539, 736, 737, 738, 894], "ignore_nul": [344, 345, 346, 539, 736, 737, 738, 884, 894], "exponenti": [344, 345, 346, 348, 539, 736, 737, 738, 739, 894], "weight": [344, 345, 346, 413, 414, 415, 416, 417, 418, 420, 421, 422, 434, 539, 736, 737, 738, 799, 800, 801, 802, 803, 804, 806, 807, 808, 825, 894], "averag": [344, 345, 346, 407, 539, 736, 737, 738, 793, 894], "decai": [344, 345, 346, 539, 736, 737, 738, 894], "term": [344, 345, 346, 450, 453, 539, 736, 737, 738, 841, 844, 894], "mass": [344, 345, 346, 539, 736, 737, 738, 894], "gamma": [344, 345, 346, 539, 736, 737, 738, 894], "foral": [344, 345, 346, 539, 736, 737, 738, 894], "geq": [344, 345, 346, 539, 736, 737, 738, 894], "theta": [344, 345, 346, 539, 736, 737, 738, 894], "life": [344, 345, 346, 539, 736, 737, 738, 894], "exp": [344, 345, 346, 539, 736, 737, 738, 894], "ln": [344, 345, 346, 539, 736, 737, 738, 894], "smooth": [344, 345, 346, 539, 736, 737, 738, 894], "factor": [344, 345, 346, 478, 539, 736, 737, 738, 878, 894], "leq": [344, 345, 346, 539, 736, 737, 738, 894], "begin": [344, 345, 346, 447, 539, 736, 737, 738, 838, 894], "imbal": [344, 345, 346, 539, 736, 737, 738, 894], "ew": [344, 345, 346, 539, 736, 737, 738, 894], "w_i": [344, 345, 346, 539, 736, 737, 738, 894], "recurs": [344, 345, 346, 539, 736, 737, 738, 894], "y_0": [344, 345, 346, 539, 736, 737, 738, 894], "x_0": [344, 345, 346, 539, 736, 737, 738, 894], "y_t": [344, 345, 346, 539, 736, 737, 738, 894], "y_": [344, 345, 346, 539, 736, 737, 738, 894], "x_t": [344, 345, 346, 539, 736, 737, 738, 894], "observ": [344, 345, 346, 539, 736, 737, 738, 894], "x_2": [344, 345, 346, 539, 736, 737, 738, 894], "428571": [344, 539], "bia": [345, 346, 375, 419, 434, 539, 737, 738, 771, 805, 825, 894], "unbias": [345, 346, 539, 737, 738, 894], "963624": [345, 539, 737, 894], "928571": [346, 539, 738, 894], "frozenset": [347, 493, 505, 539], "wildcard": [347, 486, 493, 498, 499, 505, 507, 522, 539], "regex": [347, 390, 441, 442, 445, 447, 448, 455, 456, 463, 493, 505, 515, 518, 528, 539, 832, 833, 836, 838, 839, 846, 847, 854], "aa": [347, 505, 539], "ba": [347, 505, 539], "cc": [347, 505, 539], "718282": [348, 539], "389056": [348, 539], "54": [348, 539], "59815": [348, 539], "expand": [349, 389, 390, 410, 539, 740, 894], "arr": [349, 504, 532, 539, 740, 876, 886, 894], "exprlistnamespac": [349, 355, 539], "exprstringnamespac": [349, 539], "extrem": [350, 539, 741, 894], "group_col": [353, 485, 539], "g1": [353, 401, 485, 539], "g2": [353, 401, 485, 539], "lt": [353, 485, 539, 894], "gte": [353, 485, 539], "9774092659964970114": [358, 539], "13614470193936745724": [358, 539], "1101441246220388612": [358, 539], "11638928888656214026": [358, 539], "13382926553367784577": [358, 539], "cumsum": [360, 539, 572, 621, 894], "interpolationmethod": [361, 539, 752, 894], "regrid": [361, 539], "grid": [361, 539], "df_original_grid": [361, 539], "grid_point": [361, 539], "df_new_grid": [361, 539], "conflat": [362, 539], "finit": [364, 525, 539, 757, 894], "primit": [366, 539, 876, 894], "optional_memb": [366, 539, 760, 894], "infinit": [367, 539, 761, 894], "_isnan": [368, 539], "b_isnan": [368, 539], "negat": [369, 539], "_is_not_nan": [370, 539], "b_is_not_nan": [370, 539], "_not_nul": [371, 539], "a_not_nul": [371, 539], "b_not_nul": [371, 539], "_isnul": [372, 539], "a_isnul": [372, 539], "b_isnul": [372, 539], "undo": [374, 394, 539], "duplicateerror": [374, 539, 548], "occurr": [374, 539], "333333": [374, 422, 539, 788, 808, 894], "fisher": [375, 434, 539, 771, 825, 894], "fourth": [375, 539, 771, 894], "central": [375, 434, 539, 771, 825, 894], "definit": [375, 539, 771, 894], "subtract": [375, 539, 771, 894], "distribut": [375, 434, 539, 771, 825, 894], "elimin": [375, 539, 771, 894], "bias": [375, 434, 539, 771, 825, 894], "scipi": [375, 434, 539, 771, 825, 894], "stat": [375, 434, 539, 771, 825, 894], "153061": [375, 539], "logarithm": [380, 381, 539, 774, 775, 894], "584963": [380, 539], "30103": [381, 539], "60206": [381, 539], "lowest": [382, 539], "9223372036854775808": [382, 539], "agg_list": [383, 539], "elementwis": [383, 413, 414, 415, 416, 417, 418, 420, 421, 422, 486, 487, 539, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "third": [383, 539], "parti": [383, 539], "book": [383, 539], "argmax": [383, 539], "_revers": [384, 412, 471, 539], "b_revers": [384, 412, 471, 539], "remap": [385, 539], "country_code_dict": [385, 539], "ca": [385, 539], "canada": [385, 539], "de": [385, 539], "germani": [385, 539], "fr": [385, 539], "franc": [385, 539], "country_cod": [385, 539], "couldn": [385, 539], "unknown": [385, 513, 539], "rest": [385, 539], "computeerror": [391, 548], "keep_nam": [394, 539], "poison": [398, 399, 539, 784, 785, 894], "nanmax": [398, 399, 539, 784, 785, 894], "wherea": [398, 399, 539, 571, 578, 621, 784, 785, 894], "subgroup": [401, 539], "postgr": [401, 539], "max_by_group": [401, 539], "recent": [402, 539, 568, 621, 788, 894], "percent": [402, 539, 788, 894], "090909": [402, 539], "expon": [403, 539], "power": [403, 539], "reverse_": [404, 539], "reverse_a": [404, 539], "reverse_fruit": [404, 539], "reverse_b": [404, 539], "reverse_car": [404, 539], "rankmethod": [407, 539, 793, 894], "ti": [407, 539, 793, 894], "appropri": [407, 539, 793, 894], "competit": [407, 539, 793, 894], "highest": [407, 482, 525, 539, 793, 894], "immedi": [407, 527, 539, 793, 894], "64bit": [409, 539, 795, 894], "safe": [409, 539, 795, 876, 894], "coerc": [410, 539], "dim": [411, 539, 797, 894], "flat": [411, 539, 797, 894], "fruits_revers": [412, 471, 539], "cars_revers": [412, 471, 539], "window_s": [413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 539, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 894], "rolling_min": [413, 539, 799, 894], "rolling_max": [413, 539, 799, 894], "rolling_mean": [413, 539, 799, 894], "rolling_sum": [413, 539, 799, 894], "multipli": [413, 414, 415, 416, 417, 418, 420, 421, 422, 539, 799, 800, 801, 802, 803, 804, 806, 807, 808, 894], "358899": [413, 539], "041452": [413, 539], "567764": [413, 539], "travers": [414, 415, 417, 420, 421, 422, 539, 800, 801, 803, 806, 807, 808, 894], "vector": [414, 415, 417, 420, 421, 422, 539, 800, 801, 803, 806, 807, 808, 894], "5h": [414, 415, 416, 417, 418, 420, 421, 422, 539], "33": [418, 423, 493, 539, 804, 894], "skew": [419, 539, 805, 894], "527525": [420, 539, 806, 894], "digit": [423, 468, 539, 809, 833, 859, 894], "17": [423, 509, 539, 684, 723, 894], "searchsortedsid": [425, 539, 811, 894], "maintain": [425, 480, 539, 597, 598, 621, 811, 880, 894], "leftmost": [425, 539, 811, 894], "rightmost": [425, 539, 811, 894], "six": [425, 539], "code": [426, 539, 577, 621, 815, 894], "care": [426, 539, 815, 894], "extrema": [429, 539, 819, 894], "112": [429, 539], "129": [429, 539], "i8": [429, 539, 692, 798, 894], "8589934592": [429, 539], "1073741824": [429, 539], "content": [430, 483, 539, 821, 894], "175201": [433, 539, 824, 894], "about": [434, 539, 825, 894], "unimod": [434, 539, 825, 894], "skewtest": [434, 539, 825, 894], "speak": [434, 539, 825, 894], "g_1": [434, 539, 825, 894], "m_3": [434, 539, 825, 894], "m_2": [434, 539, 825, 894], "m_i": [434, 539, 825, 894], "sum_": [434, 539, 825, 894], "texttt": [434, 539, 825, 894], "k_3": [434, 539, 825, 894], "k_2": [434, 539, 825, 894], "sqrt": [434, 539, 825, 894], "343622": [434, 539], "larg": [436, 437, 539], "larger": [436, 525, 539, 597, 598, 621], "414214": [438, 539, 828, 894], "ends_with": [441, 463, 854], "crab": [441, 832], "dog": [441, 466, 467, 495, 832], "rab": [441, 832], "success": [442, 448, 833, 839], "overlap": [442, 448, 833, 839], "captur": [442, 447, 448, 833, 838, 839], "123": [442, 448, 456, 833, 839, 847, 874, 894], "bla": [442, 448, 833, 839], "asd": [442, 448, 833, 839], "678": [442, 448, 833, 839], "910t": [442, 448, 833, 839], "r": [442, 446, 447, 448, 455, 833, 837, 838, 839, 846], "count_digit": 442, "666f6f": [444, 835], "626172": [444, 835], "mango": [445, 463, 836, 854], "go": [445, 836], "has_suffix": 445, "group_index": [447, 838], "vote": [447, 838], "ballon_dor": [447, 838], "candid": [447, 838], "messi": [447, 838], "ref": [447, 838], "candidat": [447, 838], "jorginho": [447, 838], "ronaldo": [447, 838], "w": [447, 838], "extracted_nr": 448, "910": [448, 839], "json_path": [449, 840], "jsonpath": [449, 840], "regardless": [449, 840], "json_val": [449, 840], "n_char": [450, 841], "caf\u00e9": [450, 453, 841, 844], "345": [450, 453, 841, 844], "\u6771\u4eac": [450, 453, 841, 844], "nchar": [450, 453], "fillchar": [451, 457, 842, 848], "justifi": [451, 457, 842, 848], "pad": [451, 457, 468, 842, 848, 859], "cow": [451, 457, 842, 848], "monkei": [451, 457, 842, 848], "hippopotamu": [451, 457, 842, 848], "strip": [452, 458, 843, 849], "whitespac": [452, 458, 464, 843, 849, 855], "tworld": [452, 464, 843, 855], "wod": [452, 458, 843, 849], "rld": [452, 843], "text": [453, 455, 456, 844], "radix": [454, 845], "110": [454, 845], "010": [454, 845], "fa1e": [454, 845], "ff00": [454, 845], "cafe": [454, 845], "64030": [454, 845], "65280": [454, 845], "51966": [454, 845], "replace_al": [455, 846], "123abc": [455, 846], "abc456": [455, 846], "abcabc": [456, 847], "123a123": [456, 847], "bc": [456, 528, 847], "trail": [458, 464, 849, 855], "worl": [458, 464, 849, 855], "subslic": [459, 850], "pear": [459, 850], "papaya": [459, 850], "dragonfruit": [459, 850], "s_slice": 459, "ear": [459, 850], "aya": [459, 850], "uit": [459, 850], "ya": [459, 850], "onf": [459, 850], "a_1": [461, 852, 873, 894], "d_4": [461, 852], "rename_field": [461, 462, 852, 853], "first_part": [461, 462, 852, 853], "second_part": [461, 462, 852, 853], "remaind": [462, 853], "app": [463, 854], "has_prefix": 463, "polarstemporaltyp": [465, 856], "tz_awar": [465, 856], "strftime": [465, 856], "zulu": [465, 856], "iso8601": [465, 856], "yet": [465, 856], "anywher": [465, 856], "3f": 465, "sun": [465, 856], "34": [465, 856], "lowercas": [466, 857], "variant": [466, 467], "uppercas": [467, 858], "100000": 468, "0010": 468, "0001": 468, "00000": 468, "00001": 468, "my_struct": [469, 470, 527], "longer": 470, "structfieldnotfounderror": [470, 548], "761594": [477, 539, 870, 894], "replic": [478, 539, 878, 894], "vals_phys": [478, 539], "largest": [479, 539, 879, 894], "smallest": [479, 539, 879, 894], "bottom_k": [479, 539], "value_count": [481, 539, 894], "9223372036854775807": [482, 539], "multithread": [483, 539], "columnwis": [486, 487], "AND": 486, "bitwis": [486, 487], "returns_scalar": 488, "Be": 489, "argsort": [490, 539, 894], "hamburg": 493, "lag": 494, "mimic": 494, "a_lag_": 494, "a_rol": 494, "plai": 495, "swim": 495, "walk": 495, "full_sent": 495, "covari": 497, "acc": [498, 499, 507, 522], "intoexpr": [498, 507], "include_init": 498, "accumul": [498, 499, 507, 522], "fn": [498, 499, 507, 522], "new_valu": [498, 499, 507, 522], "simpli": [498, 507], "cumreduc": 498, "across": [500, 528], "cumfold": 500, "999999": 502, "add_week": 503, "add_dai": 503, "add_second": 503, "add_millisecond": 503, "add_hour": 503, "add_millisec": 503, "ond": 503, "eval": 504, "mathemat": 504, "a_b_doubl": 504, "fstring": 508, "placehold": 508, "hello_": 508, "_world": 508, "foo_": 508, "_bar_": 508, "foo_a_bar_1": 508, "foo_b_bar_2": 508, "foo_c_bar_3": 508, "epoch": [509, 722], "timestep": 509, "1666683077": 509, "1666683099": 509, "39": 509, "12345": [509, 677, 746, 809, 894], "12346": 509, "agg_group": [510, 539], "allow_object": 513, "valueexcept": 513, "selector": [515, 518, 528], "544705": 520, "mode": [523, 539, 894], "propagate_nan": 525, "spearman": 525, "605551": 526, "605551275463989": 526, "a_and_b": 527, "isn": 531, "thens": 531, "chain": 531, "sometim": 538, "arcco": [539, 894], "arccosh": [539, 894], "arcsin": [539, 894], "arcsinh": [539, 894], "arctan": [539, 894], "arctanh": [539, 894], "arg_max": [539, 894], "arg_min": [539, 894], "arg_uniqu": [539, 894], "backward_fil": 539, "clip_max": [539, 894], "clip_min": [539, 894], "co": [539, 894], "cosh": [539, 894], "cumcount": 539, "cummax": [539, 894], "cummin": [539, 894], "cumprod": [539, 894], "cumulative_ev": [539, 894], "entropi": [539, 894], "ewm_mean": [539, 894], "ewm_std": [539, 894], "ewm_var": [539, 894], "extend_const": [539, 894], "flatten": 539, "inspect": [539, 621], "is_between": 539, "is_finit": [539, 894], "is_first": [539, 894], "is_in": [539, 894], "is_infinit": [539, 894], "is_nan": [539, 894], "is_not_nan": [539, 894], "is_not_nul": [539, 894], "kurtosi": [539, 894], "log10": [539, 894], "map_alia": 539, "map_dict": 539, "nan_max": [539, 894], "nan_min": [539, 894], "pct_chang": [539, 894], "pow": 539, "reinterpret": [539, 894], "repeat_bi": 539, "reshap": [539, 894], "rolling_appli": [539, 894], "rolling_median": [539, 894], "rolling_quantil": [539, 894], "rolling_skew": [539, 894], "rolling_std": [539, 894], "rolling_var": [539, 894], "search_sort": [539, 894], "set_sort": [539, 894], "shrink_dtyp": [539, 894], "sin": [539, 894], "sinh": [539, 894], "sort_bi": 539, "tan": [539, 894], "tanh": [539, 894], "to_phys": [539, 894], "top_k": [539, 894], "unique_count": [539, 894], "expos": 548, "registr": 548, "miscellan": 548, "arrowerror": 548, "columnnotfounderror": 548, "invalidoperationerror": 548, "nodataerror": 548, "panicexcept": 548, "schemaerror": 548, "schemafieldnotfounderror": 548, "shapeerror": 548, "build_info": 548, "show_vers": 548, "sqlcontext": [548, 900], "hit": [551, 621], "node": [551, 572, 579, 587, 590, 621], "huge": [554, 621], "saver": [554, 621], "purpos": [562, 621], "help": [562, 621], "influenc": [562, 579, 621], "read_json": [567, 613, 621], "lazygroupbi": [568, 569, 570, 621], "traceback": [568, 621], "typeerror": [568, 621], "subscript": [568, 621], "validate_output_schema": [579, 621], "streamabl": [579, 621], "past": [579, 621], "paramount": [579, 621], "hard": [579, 621], "bug": [579, 615, 621], "elig": [579, 621], "ot": [579, 621], "That": [579, 621], "exectut": [579, 621], "invari": [579, 621], "upheld": [579, 621], "prune": [579, 621], "show_plot": [587, 621], "truncate_nod": [587, 621], "figsiz": [587, 596, 621], "gantt": [587, 621], "chart": [587, 621], "matplotlib": [587, 596, 621], "plot": [587, 596, 621], "groupby_partit": [587, 621], "470": [587, 621], "475": [587, 621], "1964": [587, 621], "from_json": [589, 621], "swap": [590, 621], "output_path": [596, 621], "raw_output": [596, 621], "figur": [596, 621], "persist": [597, 598, 621], "ram": [597, 598, 621], "slightli": [597, 598, 621], "my_larger_than_ram_fil": [597, 598, 621], "data_pagesize_limit": [598, 621], "290994": [601, 621], "118034": [601, 621], "433013": [601, 621], "1875": [608, 621], "extern": [611, 621], "df_a": [611, 621], "df_other": [611, 621], "afoo": [611, 621], "cfoo": [611, 621], "train_df": [611, 621], "feature_0": [611, 621], "feature_1": [611, 621], "test_df": [611, 621], "_train": [611, 621], "feature_0_train": [611, 621], "dataframescan": [613, 621], "output_schema": [613, 621], "unique_nam": 614, "profil": 621, "sink_ipc": 621, "sink_parquet": 621, "with_context": 621, "sr": [626, 894], "new_aliased_sr": [626, 894], "append_chunk": [629, 894], "super": [629, 894], "141593": [631, 894], "292432": [632, 894], "549306": [636, 894], "listnamespac": [643, 740, 894], "catnamespac": 675, "56789": [677, 746, 809, 894], "901234": [677, 746, 809, 894], "pi": [684, 823, 869, 894], "1232e": [684, 894], "quick": [691, 894], "series_num": [691, 894], "581139": [691, 894], "series_str": [691, 894], "datetimenamespac": 696, "500m": [709, 711, 717, 724], "500000": 709, "2m": 714, "500000000": 717, "date_minus_1y_2mon": 719, "1583020800": 722, "1585699200": 722, "1588291200": 722, "nyc": 722, "edt": 722, "1583038800": 722, "1585717200": 722, "1588309200": 722, "165": [723, 728], "series_equ": [723, 728, 894], "timestamp_u": 727, "978307200000000000": 727, "978393600000000000": 727, "978480000000000000": 727, "005": [734, 894], "06293300616044681": [734, 894], "65": [734, 894], "8568409950394724": [734, 894], "4000000": [735, 894], "814697265625": [735, 894], "stringnamespac": [740, 830, 894], "bitmask": [748, 894], "swiftli": [748, 894], "10734580197236529959": [749, 894], "3022416320763508302": [749, 894], "13756996518000038261": [749, 894], "datelik": [754, 894], "166667": [788, 894], "142857": [788, 894], "512": [788, 894], "peak": [789, 790, 894], "nanstd": [799, 894], "858612": [799, 894], "200": [800, 801, 803, 894], "150": [801, 894], "250": [801, 894], "350": [801, 894], "450": [801, 894], "381802": [805, 894], "dev": [806, 894], "57": [809, 894], "frequent": [813, 814, 894], "mutat": [814, 894], "2246e": [823, 869, 894], "divisor": [829, 883, 894], "6331e16": [869, 894], "lib": [872, 894], "int64arrai": [872, 894], "a_2": [873, 894], "a_3": [873, 894], "zero_copy_onli": [876, 894], "writabl": [876, 894], "view": [876, 894], "presenc": [876, 894], "immut": [876, 894], "made": [876, 894], "seriesview": [884, 894], "arraylik": 894, "dtype_if_empti": 894, "position": 894, "scenario": 894, "through": 894, "arg_tru": 894, "chunk_length": 894, "eq": 894, "ge": 894, "get_chunk": 894, "gt": 894, "has_valid": 894, "is_boolean": 894, "is_datelik": 894, "is_float": 894, "is_numer": 894, "is_sort": 894, "is_utf8": 894, "le": 894, "ne": 894, "new_from_index": 894, "peak_max": 894, "peak_min": 894, "set_at_idx": 894, "readthedoc": 901}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [30, 0, 1, "", "DataType"], [31, 0, 1, "", "Date"], [32, 0, 1, "", "Datetime"], [33, 0, 1, "", "Duration"], [34, 0, 1, "", "Float32"], [35, 0, 1, "", "Float64"], [36, 0, 1, "", "Int16"], [37, 0, 1, "", "Int32"], [38, 0, 1, "", "Int64"], [39, 0, 1, "", "Int8"], [40, 0, 1, "", "List"], [41, 0, 1, "", "Null"], [42, 0, 1, "", "Object"], [900, 0, 1, "", "SQLContext"], [46, 0, 1, "", "StringCache"], [47, 0, 1, "", "Struct"], [48, 0, 1, "", "Time"], [49, 0, 1, "", "UInt16"], [50, 0, 1, "", "UInt32"], [51, 0, 1, "", "UInt64"], [52, 0, 1, "", "UInt8"], [53, 0, 1, "", "Unknown"], [54, 0, 1, "", "Utf8"], [55, 4, 1, "", "align_frames"], [486, 4, 1, "", "all"], [487, 4, 1, "", "any"], [488, 4, 1, "", "apply"], [489, 4, 1, "", "arange"], [490, 4, 1, "", "arg_sort_by"], [60, 4, 1, "", "arg_where"], [491, 4, 1, "", "avg"], [61, 4, 1, "", "build_info"], [492, 4, 1, "", "coalesce"], [493, 4, 1, "", "col"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "concat"], [494, 4, 1, "", "concat_list"], [495, 4, 1, "", "concat_str"], [496, 4, 1, "", "count"], [497, 4, 1, "", "cov"], [498, 4, 1, "", "cumfold"], [499, 4, 1, "", "cumreduce"], [500, 4, 1, "", "cumsum"], [64, 4, 1, "", "cut"], [501, 4, 1, "", "date"], [65, 4, 1, "", "date_range"], [502, 4, 1, "", "datetime"], [503, 4, 1, "", "duration"], [504, 4, 1, "", "element"], [505, 4, 1, "", "exclude"], [506, 4, 1, "", "first"], [507, 4, 1, "", "fold"], [508, 4, 1, "", "format"], [80, 4, 1, "", "from_arrow"], [81, 4, 1, "", "from_dataframe"], [82, 4, 1, "", "from_dict"], [83, 4, 1, "", "from_dicts"], [509, 4, 1, "", "from_epoch"], [84, 4, 1, "", "from_numpy"], [85, 4, 1, "", "from_pandas"], [86, 4, 1, "", "from_records"], [87, 4, 1, "", "get_dummies"], [88, 4, 1, "", "get_idx_type"], [510, 4, 1, "", "groups"], [511, 4, 1, "", "head"], [512, 4, 1, "", "list"], [513, 4, 1, "", "lit"], [514, 4, 1, "", "map"], [515, 4, 1, "", "max"], [516, 4, 1, "", "mean"], [517, 4, 1, "", "median"], [518, 4, 1, "", "min"], [519, 4, 1, "", "n_unique"], [90, 4, 1, "", "ones"], [520, 4, 1, "", "pearson_corr"], [521, 4, 1, "", "quantile"], [91, 4, 1, "", "read_avro"], [92, 4, 1, "", "read_csv"], [93, 4, 1, "", "read_csv_batched"], [94, 4, 1, "", "read_delta"], [95, 4, 1, "", "read_excel"], [96, 4, 1, "", "read_ipc"], [97, 4, 1, "", "read_ipc_schema"], [98, 4, 1, "", "read_json"], [99, 4, 1, "", "read_ndjson"], [100, 4, 1, "", "read_parquet"], [101, 4, 1, "", "read_parquet_schema"], [102, 4, 1, "", "read_sql"], [522, 4, 1, "", "reduce"], [523, 4, 1, "", "repeat"], [103, 4, 1, "", "scan_csv"], [104, 4, 1, "", "scan_delta"], [105, 4, 1, "", "scan_ds"], [106, 4, 1, "", "scan_ipc"], [107, 4, 1, "", "scan_ndjson"], [108, 4, 1, "", "scan_parquet"], [524, 4, 1, "", "select"], [109, 4, 1, "", "show_versions"], [525, 4, 1, "", "spearman_rank_corr"], [526, 4, 1, "", "std"], [527, 4, 1, "", "struct"], [528, 4, 1, "", "sum"], [529, 4, 1, "", "tail"], [116, 4, 1, "", "threadpool_size"], [117, 4, 1, "", "toggle_string_cache"], [530, 4, 1, "", "var"], [531, 4, 1, "", "when"], [118, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[121, 1, 1, "", "__dataframe__"], [122, 1, 1, "", "apply"], [123, 1, 1, "", "cleared"], [124, 1, 1, "", "clone"], [125, 2, 1, "", "columns"], [126, 1, 1, "", "describe"], [127, 1, 1, "", "drop"], [128, 1, 1, "", "drop_in_place"], [129, 1, 1, "", "drop_nulls"], [130, 2, 1, "", "dtypes"], [131, 1, 1, "", "estimated_size"], [132, 1, 1, "", "explode"], [133, 1, 1, "", "extend"], [134, 1, 1, "", "fill_nan"], [135, 1, 1, "", "fill_null"], [136, 1, 1, "", "filter"], [137, 1, 1, "", "find_idx_by_name"], [138, 1, 1, "", "fold"], [139, 1, 1, "", "frame_equal"], [140, 1, 1, "", "get_column"], [141, 1, 1, "", "get_columns"], [142, 1, 1, "", "glimpse"], [143, 1, 1, "", "groupby"], [144, 1, 1, "", "groupby_dynamic"], [145, 1, 1, "", "groupby_rolling"], [146, 1, 1, "", "hash_rows"], [147, 1, 1, "", "head"], [148, 2, 1, "", "height"], [149, 1, 1, "", "hstack"], [150, 1, 1, "", "insert_at_idx"], [151, 1, 1, "", "interpolate"], [152, 1, 1, "", "is_duplicated"], [153, 1, 1, "", "is_empty"], [154, 1, 1, "", "is_unique"], [155, 1, 1, "", "item"], [156, 1, 1, "", "iter_rows"], [157, 1, 1, "", "iter_slices"], [158, 1, 1, "", "join"], [159, 1, 1, "", "join_asof"], [160, 1, 1, "", "lazy"], [161, 1, 1, "", "limit"], [162, 1, 1, "", "max"], [163, 1, 1, "", "mean"], [164, 1, 1, "", "median"], [165, 1, 1, "", "melt"], [166, 1, 1, "", "merge_sorted"], [167, 1, 1, "", "min"], [168, 1, 1, "", "n_chunks"], [169, 1, 1, "", "n_unique"], [170, 1, 1, "", "null_count"], [171, 1, 1, "", "partition_by"], [172, 1, 1, "", "pearson_corr"], [173, 1, 1, "", "pipe"], [174, 1, 1, "", "pivot"], [175, 1, 1, "", "product"], [176, 1, 1, "", "quantile"], [177, 1, 1, "", "rechunk"], [178, 1, 1, "", "rename"], [179, 1, 1, "", "replace"], [180, 1, 1, "", "replace_at_idx"], [181, 1, 1, "", "reverse"], [182, 1, 1, "", "row"], [183, 1, 1, "", "rows"], [184, 1, 1, "", "sample"], [185, 2, 1, "", "schema"], [186, 1, 1, "", "select"], [187, 2, 1, "", "shape"], [188, 1, 1, "", "shift"], [189, 1, 1, "", "shift_and_fill"], [190, 1, 1, "", "shrink_to_fit"], [191, 1, 1, "", "slice"], [192, 1, 1, "", "sort"], [193, 1, 1, "", "std"], [194, 1, 1, "", "sum"], [195, 1, 1, "", "tail"], [196, 1, 1, "", "take_every"], [197, 1, 1, "", "to_arrow"], [198, 1, 1, "", "to_dict"], [199, 1, 1, "", "to_dicts"], [200, 1, 1, "", "to_dummies"], [201, 1, 1, "", "to_numpy"], [202, 1, 1, "", "to_pandas"], [203, 1, 1, "", "to_series"], [204, 1, 1, "", "to_struct"], [205, 1, 1, "", "transpose"], [206, 1, 1, "", "unique"], [207, 1, 1, "", "unnest"], [208, 1, 1, "", "unstack"], [209, 1, 1, "", "update"], [210, 1, 1, "", "upsample"], [211, 1, 1, "", "var"], [212, 1, 1, "", "vstack"], [213, 2, 1, "", "width"], [214, 1, 1, "", "with_columns"], [215, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_ipc"], [27, 1, 1, "", "write_json"], [28, 1, 1, "", "write_ndjson"], [29, 1, 1, "", "write_parquet"]], "polars.DataType": [[30, 1, 1, "", "__init__"]], "polars.Date": [[31, 1, 1, "", "__init__"]], "polars.Datetime": [[32, 1, 1, "", "__init__"]], "polars.Duration": [[33, 1, 1, "", "__init__"]], "polars.Expr": [[243, 1, 1, "", "abs"], [244, 1, 1, "", "agg_groups"], [245, 1, 1, "", "alias"], [246, 1, 1, "", "all"], [247, 1, 1, "", "any"], [248, 1, 1, "", "append"], [249, 1, 1, "", "apply"], [250, 1, 1, "", "arccos"], [251, 1, 1, "", "arccosh"], [252, 1, 1, "", "arcsin"], [253, 1, 1, "", "arcsinh"], [254, 1, 1, "", "arctan"], [255, 1, 1, "", "arctanh"], [256, 1, 1, "", "arg_max"], [257, 1, 1, "", "arg_min"], [258, 1, 1, "", "arg_sort"], [259, 1, 1, "", "arg_unique"], [260, 1, 1, "", "argsort"], [286, 1, 1, "", "backward_fill"], [292, 1, 1, "", "cast"], [294, 1, 1, "", "ceil"], [295, 1, 1, "", "clip"], [296, 1, 1, "", "clip_max"], [297, 1, 1, "", "clip_min"], [298, 1, 1, "", "cos"], [299, 1, 1, "", "cosh"], [300, 1, 1, "", "count"], [301, 1, 1, "", "cumcount"], [302, 1, 1, "", "cummax"], [303, 1, 1, "", "cummin"], [304, 1, 1, "", "cumprod"], [305, 1, 1, "", "cumsum"], [306, 1, 1, "", "cumulative_eval"], [307, 1, 1, "", "diff"], [308, 1, 1, "", "dot"], [309, 1, 1, "", "drop_nans"], [310, 1, 1, "", "drop_nulls"], [343, 1, 1, "", "entropy"], [344, 1, 1, "", "ewm_mean"], [345, 1, 1, "", "ewm_std"], [346, 1, 1, "", "ewm_var"], [347, 1, 1, "", "exclude"], [348, 1, 1, "", "exp"], [349, 1, 1, "", "explode"], [350, 1, 1, "", "extend_constant"], [351, 1, 1, "", "fill_nan"], [352, 1, 1, "", "fill_null"], [353, 1, 1, "", "filter"], [354, 1, 1, "", "first"], [355, 1, 1, "", "flatten"], [356, 1, 1, "", "floor"], [357, 1, 1, "", "forward_fill"], [358, 1, 1, "", "hash"], [359, 1, 1, "", "head"], [360, 1, 1, "", "inspect"], [361, 1, 1, "", "interpolate"], [362, 1, 1, "", "is_between"], [363, 1, 1, "", "is_duplicated"], [364, 1, 1, "", "is_finite"], [365, 1, 1, "", "is_first"], [366, 1, 1, "", "is_in"], [367, 1, 1, "", "is_infinite"], [368, 1, 1, "", "is_nan"], [369, 1, 1, "", "is_not"], [370, 1, 1, "", "is_not_nan"], [371, 1, 1, "", "is_not_null"], [372, 1, 1, "", "is_null"], [373, 1, 1, "", "is_unique"], [374, 1, 1, "", "keep_name"], [375, 1, 1, "", "kurtosis"], [376, 1, 1, "", "last"], [377, 1, 1, "", "len"], [378, 1, 1, "", "limit"], [379, 1, 1, "", "list"], [380, 1, 1, "", "log"], [381, 1, 1, "", "log10"], [382, 1, 1, "", "lower_bound"], [383, 1, 1, "", "map"], [384, 1, 1, "", "map_alias"], [385, 1, 1, "", "map_dict"], [386, 1, 1, "", "max"], [387, 1, 1, "", "mean"], [388, 1, 1, "", "median"], [395, 1, 1, "", "min"], [396, 1, 1, "", "mode"], [397, 1, 1, "", "n_unique"], [398, 1, 1, "", "nan_max"], [399, 1, 1, "", "nan_min"], [400, 1, 1, "", "null_count"], [401, 1, 1, "", "over"], [402, 1, 1, "", "pct_change"], [403, 1, 1, "", "pow"], [404, 1, 1, "", "prefix"], [405, 1, 1, "", "product"], [406, 1, 1, "", "quantile"], [407, 1, 1, "", "rank"], [408, 1, 1, "", "rechunk"], [409, 1, 1, "", "reinterpret"], [410, 1, 1, "", "repeat_by"], [411, 1, 1, "", "reshape"], [412, 1, 1, "", "reverse"], [413, 1, 1, "", "rolling_apply"], [414, 1, 1, "", "rolling_max"], [415, 1, 1, "", "rolling_mean"], [416, 1, 1, "", "rolling_median"], [417, 1, 1, "", "rolling_min"], [418, 1, 1, "", "rolling_quantile"], [419, 1, 1, "", "rolling_skew"], [420, 1, 1, "", "rolling_std"], [421, 1, 1, "", "rolling_sum"], [422, 1, 1, "", "rolling_var"], [423, 1, 1, "", "round"], [424, 1, 1, "", "sample"], [425, 1, 1, "", "search_sorted"], [426, 1, 1, "", "set_sorted"], [427, 1, 1, "", "shift"], [428, 1, 1, "", "shift_and_fill"], [429, 1, 1, "", "shrink_dtype"], [430, 1, 1, "", "shuffle"], [431, 1, 1, "", "sign"], [432, 1, 1, "", "sin"], [433, 1, 1, "", "sinh"], [434, 1, 1, "", "skew"], [435, 1, 1, "", "slice"], [436, 1, 1, "", "sort"], [437, 1, 1, "", "sort_by"], [438, 1, 1, "", "sqrt"], [439, 1, 1, "", "std"], [471, 1, 1, "", "suffix"], [472, 1, 1, "", "sum"], [473, 1, 1, "", "tail"], [474, 1, 1, "", "take"], [475, 1, 1, "", "take_every"], [476, 1, 1, "", "tan"], [477, 1, 1, "", "tanh"], [478, 1, 1, "", "to_physical"], [479, 1, 1, "", "top_k"], [480, 1, 1, "", "unique"], [481, 1, 1, "", "unique_counts"], [482, 1, 1, "", "upper_bound"], [483, 1, 1, "", "value_counts"], [484, 1, 1, "", "var"], [485, 1, 1, "", "where"]], "polars.Expr.arr": [[261, 1, 1, "", "arg_max"], [262, 1, 1, "", "arg_min"], [263, 1, 1, "", "concat"], [264, 1, 1, "", "contains"], [265, 1, 1, "", "diff"], [266, 1, 1, "", "eval"], [267, 1, 1, "", "explode"], [268, 1, 1, "", "first"], [269, 1, 1, "", "get"], [270, 1, 1, "", "head"], [271, 1, 1, "", "join"], [272, 1, 1, "", "last"], [273, 1, 1, "", "lengths"], [274, 1, 1, "", "max"], [275, 1, 1, "", "mean"], [276, 1, 1, "", "min"], [277, 1, 1, "", "reverse"], [278, 1, 1, "", "shift"], [279, 1, 1, "", "slice"], [280, 1, 1, "", "sort"], [281, 1, 1, "", "sum"], [282, 1, 1, "", "tail"], [283, 1, 1, "", "take"], [284, 1, 1, "", "to_struct"], [285, 1, 1, "", "unique"]], "polars.Expr.bin": [[287, 1, 1, "", "contains"], [288, 1, 1, "", "decode"], [289, 1, 1, "", "encode"], [290, 1, 1, "", "ends_with"], [291, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[293, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[311, 1, 1, "", "cast_time_unit"], [312, 1, 1, "", "combine"], [313, 1, 1, "", "convert_time_zone"], [314, 1, 1, "", "day"], [315, 1, 1, "", "days"], [316, 1, 1, "", "epoch"], [317, 1, 1, "", "hour"], [318, 1, 1, "", "hours"], [319, 1, 1, "", "iso_year"], [320, 1, 1, "", "microsecond"], [321, 1, 1, "", "microseconds"], [322, 1, 1, "", "millisecond"], [323, 1, 1, "", "milliseconds"], [324, 1, 1, "", "minute"], [325, 1, 1, "", "minutes"], [326, 1, 1, "", "month"], [327, 1, 1, "", "nanosecond"], [328, 1, 1, "", "nanoseconds"], [329, 1, 1, "", "offset_by"], [330, 1, 1, "", "ordinal_day"], [331, 1, 1, "", "quarter"], [332, 1, 1, "", "replace_time_zone"], [333, 1, 1, "", "round"], [334, 1, 1, "", "second"], [335, 1, 1, "", "seconds"], [336, 1, 1, "", "strftime"], [337, 1, 1, "", "timestamp"], [338, 1, 1, "", "truncate"], [339, 1, 1, "", "week"], [340, 1, 1, "", "weekday"], [341, 1, 1, "", "with_time_unit"], [342, 1, 1, "", "year"]], "polars.Expr.meta": [[389, 1, 1, "", "has_multiple_outputs"], [390, 1, 1, "", "is_regex_projection"], [391, 1, 1, "", "output_name"], [392, 1, 1, "", "pop"], [393, 1, 1, "", "root_names"], [394, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[440, 1, 1, "", "concat"], [441, 1, 1, "", "contains"], [442, 1, 1, "", "count_match"], [443, 1, 1, "", "decode"], [444, 1, 1, "", "encode"], [445, 1, 1, "", "ends_with"], [446, 1, 1, "", "explode"], [447, 1, 1, "", "extract"], [448, 1, 1, "", "extract_all"], [449, 1, 1, "", "json_path_match"], [450, 1, 1, "", "lengths"], [451, 1, 1, "", "ljust"], [452, 1, 1, "", "lstrip"], [453, 1, 1, "", "n_chars"], [454, 1, 1, "", "parse_int"], [455, 1, 1, "", "replace"], [456, 1, 1, "", "replace_all"], [457, 1, 1, "", "rjust"], [458, 1, 1, "", "rstrip"], [459, 1, 1, "", "slice"], [460, 1, 1, "", "split"], [461, 1, 1, "", "split_exact"], [462, 1, 1, "", "splitn"], [463, 1, 1, "", "starts_with"], [464, 1, 1, "", "strip"], [465, 1, 1, "", "strptime"], [466, 1, 1, "", "to_lowercase"], [467, 1, 1, "", "to_uppercase"], [468, 1, 1, "", "zfill"]], "polars.Expr.struct": [[469, 1, 1, "", "field"], [470, 1, 1, "", "rename_fields"]], "polars.Float32": [[34, 1, 1, "", "__init__"]], "polars.Float64": [[35, 1, 1, "", "__init__"]], "polars.Int16": [[36, 1, 1, "", "__init__"]], "polars.Int32": [[37, 1, 1, "", "__init__"]], "polars.Int64": [[38, 1, 1, "", "__init__"]], "polars.Int8": [[39, 1, 1, "", "__init__"]], "polars.LazyFrame": [[551, 1, 1, "", "cache"], [552, 1, 1, "", "cleared"], [553, 1, 1, "", "clone"], [554, 1, 1, "", "collect"], [555, 2, 1, "", "columns"], [556, 1, 1, "", "describe_optimized_plan"], [557, 1, 1, "", "describe_plan"], [558, 1, 1, "", "drop"], [559, 1, 1, "", "drop_nulls"], [560, 2, 1, "", "dtypes"], [561, 1, 1, "", "explode"], [562, 1, 1, "", "fetch"], [563, 1, 1, "", "fill_nan"], [564, 1, 1, "", "fill_null"], [565, 1, 1, "", "filter"], [566, 1, 1, "", "first"], [567, 1, 1, "", "from_json"], [568, 1, 1, "", "groupby"], [569, 1, 1, "", "groupby_dynamic"], [570, 1, 1, "", "groupby_rolling"], [571, 1, 1, "", "head"], [572, 1, 1, "", "inspect"], [573, 1, 1, "", "interpolate"], [574, 1, 1, "", "join"], [575, 1, 1, "", "join_asof"], [576, 1, 1, "", "last"], [577, 1, 1, "", "lazy"], [578, 1, 1, "", "limit"], [579, 1, 1, "", "map"], [580, 1, 1, "", "max"], [581, 1, 1, "", "mean"], [582, 1, 1, "", "median"], [583, 1, 1, "", "melt"], [584, 1, 1, "", "merge_sorted"], [585, 1, 1, "", "min"], [586, 1, 1, "", "pipe"], [587, 1, 1, "", "profile"], [588, 1, 1, "", "quantile"], [589, 1, 1, "", "read_json"], [590, 1, 1, "", "rename"], [591, 1, 1, "", "reverse"], [592, 2, 1, "", "schema"], [593, 1, 1, "", "select"], [594, 1, 1, "", "shift"], [595, 1, 1, "", "shift_and_fill"], [596, 1, 1, "", "show_graph"], [597, 1, 1, "", "sink_ipc"], [598, 1, 1, "", "sink_parquet"], [599, 1, 1, "", "slice"], [600, 1, 1, "", "sort"], [601, 1, 1, "", "std"], [602, 1, 1, "", "sum"], [603, 1, 1, "", "tail"], [604, 1, 1, "", "take_every"], [605, 1, 1, "", "unique"], [606, 1, 1, "", "unnest"], [607, 1, 1, "", "update"], [608, 1, 1, "", "var"], [609, 2, 1, "", "width"], [610, 1, 1, "", "with_columns"], [611, 1, 1, "", "with_context"], [612, 1, 1, "", "with_row_count"], [613, 1, 1, "", "write_json"]], "polars.List": [[40, 1, 1, "", "__init__"]], "polars.Null": [[41, 1, 1, "", "__init__"]], "polars.Object": [[42, 1, 1, "", "__init__"]], "polars.SQLContext": [[43, 1, 1, "", "execute"], [44, 1, 1, "", "query"], [45, 1, 1, "", "register"]], "polars.Series": [[625, 1, 1, "", "abs"], [626, 1, 1, "", "alias"], [627, 1, 1, "", "all"], [628, 1, 1, "", "any"], [629, 1, 1, "", "append"], [630, 1, 1, "", "apply"], [631, 1, 1, "", "arccos"], [632, 1, 1, "", "arccosh"], [633, 1, 1, "", "arcsin"], [634, 1, 1, "", "arcsinh"], [635, 1, 1, "", "arctan"], [636, 1, 1, "", "arctanh"], [637, 1, 1, "", "arg_max"], [638, 1, 1, "", "arg_min"], [639, 1, 1, "", "arg_sort"], [640, 1, 1, "", "arg_true"], [641, 1, 1, "", "arg_unique"], [642, 1, 1, "", "argsort"], [643, 3, 1, "", "arr"], [674, 1, 1, "", "cast"], [675, 3, 1, "", "cat"], [677, 1, 1, "", "ceil"], [678, 1, 1, "", "chunk_lengths"], [679, 1, 1, "", "cleared"], [680, 1, 1, "", "clip"], [681, 1, 1, "", "clip_max"], [682, 1, 1, "", "clip_min"], [683, 1, 1, "", "clone"], [684, 1, 1, "", "cos"], [685, 1, 1, "", "cosh"], [686, 1, 1, "", "cummax"], [687, 1, 1, "", "cummin"], [688, 1, 1, "", "cumprod"], [689, 1, 1, "", "cumsum"], [690, 1, 1, "", "cumulative_eval"], [691, 1, 1, "", "describe"], [692, 1, 1, "", "diff"], [693, 1, 1, "", "dot"], [694, 1, 1, "", "drop_nans"], [695, 1, 1, "", "drop_nulls"], [696, 3, 1, "", "dt"], [733, 3, 1, "", "dtype"], [734, 1, 1, "", "entropy"], [735, 1, 1, "", "estimated_size"], [736, 1, 1, "", "ewm_mean"], [737, 1, 1, "", "ewm_std"], [738, 1, 1, "", "ewm_var"], [739, 1, 1, "", "exp"], [740, 1, 1, "", "explode"], [741, 1, 1, "", "extend_constant"], [742, 1, 1, "", "fill_nan"], [743, 1, 1, "", "fill_null"], [744, 1, 1, "", "filter"], [745, 3, 1, "", "flags"], [746, 1, 1, "", "floor"], [747, 1, 1, "", "get_chunks"], [748, 1, 1, "", "has_validity"], [749, 1, 1, "", "hash"], [750, 1, 1, "", "head"], [751, 3, 1, "", "inner_dtype"], [752, 1, 1, "", "interpolate"], [753, 1, 1, "", "is_boolean"], [754, 1, 1, "", "is_datelike"], [755, 1, 1, "", "is_duplicated"], [756, 1, 1, "", "is_empty"], [757, 1, 1, "", "is_finite"], [758, 1, 1, "", "is_first"], [759, 1, 1, "", "is_float"], [760, 1, 1, "", "is_in"], [761, 1, 1, "", "is_infinite"], [762, 1, 1, "", "is_nan"], [763, 1, 1, "", "is_not_nan"], [764, 1, 1, "", "is_not_null"], [765, 1, 1, "", "is_null"], [766, 1, 1, "", "is_numeric"], [767, 1, 1, "", "is_sorted"], [768, 1, 1, "", "is_unique"], [769, 1, 1, "", "is_utf8"], [770, 1, 1, "", "item"], [771, 1, 1, "", "kurtosis"], [772, 1, 1, "", "len"], [773, 1, 1, "", "limit"], [774, 1, 1, "", "log"], [775, 1, 1, "", "log10"], [776, 1, 1, "", "max"], [777, 1, 1, "", "mean"], [778, 1, 1, "", "median"], [779, 1, 1, "", "min"], [780, 1, 1, "", "mode"], [781, 1, 1, "", "n_chunks"], [782, 1, 1, "", "n_unique"], [783, 3, 1, "", "name"], [784, 1, 1, "", "nan_max"], [785, 1, 1, "", "nan_min"], [786, 1, 1, "", "new_from_index"], [787, 1, 1, "", "null_count"], [788, 1, 1, "", "pct_change"], [789, 1, 1, "", "peak_max"], [790, 1, 1, "", "peak_min"], [791, 1, 1, "", "product"], [792, 1, 1, "", "quantile"], [793, 1, 1, "", "rank"], [794, 1, 1, "", "rechunk"], [795, 1, 1, "", "reinterpret"], [796, 1, 1, "", "rename"], [797, 1, 1, "", "reshape"], [798, 1, 1, "", "reverse"], [799, 1, 1, "", "rolling_apply"], [800, 1, 1, "", "rolling_max"], [801, 1, 1, "", "rolling_mean"], [802, 1, 1, "", "rolling_median"], [803, 1, 1, "", "rolling_min"], [804, 1, 1, "", "rolling_quantile"], [805, 1, 1, "", "rolling_skew"], [806, 1, 1, "", "rolling_std"], [807, 1, 1, "", "rolling_sum"], [808, 1, 1, "", "rolling_var"], [809, 1, 1, "", "round"], [810, 1, 1, "", "sample"], [811, 1, 1, "", "search_sorted"], [812, 1, 1, "", "series_equal"], [813, 1, 1, "", "set"], [814, 1, 1, "", "set_at_idx"], [815, 1, 1, "", "set_sorted"], [816, 3, 1, "", "shape"], [817, 1, 1, "", "shift"], [818, 1, 1, "", "shift_and_fill"], [819, 1, 1, "", "shrink_dtype"], [820, 1, 1, "", "shrink_to_fit"], [821, 1, 1, "", "shuffle"], [822, 1, 1, "", "sign"], [823, 1, 1, "", "sin"], [824, 1, 1, "", "sinh"], [825, 1, 1, "", "skew"], [826, 1, 1, "", "slice"], [827, 1, 1, "", "sort"], [828, 1, 1, "", "sqrt"], [829, 1, 1, "", "std"], [830, 3, 1, "", "str"], [865, 1, 1, "", "sum"], [866, 1, 1, "", "tail"], [867, 1, 1, "", "take"], [868, 1, 1, "", "take_every"], [869, 1, 1, "", "tan"], [870, 1, 1, "", "tanh"], [871, 3, 1, "", "time_unit"], [872, 1, 1, "", "to_arrow"], [873, 1, 1, "", "to_dummies"], [874, 1, 1, "", "to_frame"], [875, 1, 1, "", "to_list"], [876, 1, 1, "", "to_numpy"], [877, 1, 1, "", "to_pandas"], [878, 1, 1, "", "to_physical"], [879, 1, 1, "", "top_k"], [880, 1, 1, "", "unique"], [881, 1, 1, "", "unique_counts"], [882, 1, 1, "", "value_counts"], [883, 1, 1, "", "var"], [884, 1, 1, "", "view"], [885, 1, 1, "", "zip_with"]], "polars.Series.arr": [[644, 1, 1, "", "arg_max"], [645, 1, 1, "", "arg_min"], [646, 1, 1, "", "concat"], [647, 1, 1, "", "contains"], [648, 1, 1, "", "diff"], [649, 1, 1, "", "eval"], [650, 1, 1, "", "explode"], [651, 1, 1, "", "first"], [652, 1, 1, "", "get"], [653, 1, 1, "", "head"], [654, 1, 1, "", "join"], [655, 1, 1, "", "last"], [656, 1, 1, "", "lengths"], [657, 1, 1, "", "max"], [658, 1, 1, "", "mean"], [659, 1, 1, "", "min"], [660, 1, 1, "", "reverse"], [661, 1, 1, "", "shift"], [662, 1, 1, "", "slice"], [663, 1, 1, "", "sort"], [664, 1, 1, "", "sum"], [665, 1, 1, "", "tail"], [666, 1, 1, "", "take"], [667, 1, 1, "", "to_struct"], [668, 1, 1, "", "unique"]], "polars.Series.bin": [[669, 1, 1, "", "contains"], [670, 1, 1, "", "decode"], [671, 1, 1, "", "encode"], [672, 1, 1, "", "ends_with"], [673, 1, 1, "", "starts_with"]], "polars.Series.cat": [[676, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[697, 1, 1, "", "cast_time_unit"], [698, 1, 1, "", "combine"], [699, 1, 1, "", "convert_time_zone"], [700, 1, 1, "", "day"], [701, 1, 1, "", "days"], [702, 1, 1, "", "epoch"], [703, 1, 1, "", "hour"], [704, 1, 1, "", "hours"], [705, 1, 1, "", "iso_year"], [706, 1, 1, "", "max"], [707, 1, 1, "", "mean"], [708, 1, 1, "", "median"], [709, 1, 1, "", "microsecond"], [710, 1, 1, "", "microseconds"], [711, 1, 1, "", "millisecond"], [712, 1, 1, "", "milliseconds"], [713, 1, 1, "", "min"], [714, 1, 1, "", "minute"], [715, 1, 1, "", "minutes"], [716, 1, 1, "", "month"], [717, 1, 1, "", "nanosecond"], [718, 1, 1, "", "nanoseconds"], [719, 1, 1, "", "offset_by"], [720, 1, 1, "", "ordinal_day"], [721, 1, 1, "", "quarter"], [722, 1, 1, "", "replace_time_zone"], [723, 1, 1, "", "round"], [724, 1, 1, "", "second"], [725, 1, 1, "", "seconds"], [726, 1, 1, "", "strftime"], [727, 1, 1, "", "timestamp"], [728, 1, 1, "", "truncate"], [729, 1, 1, "", "week"], [730, 1, 1, "", "weekday"], [731, 1, 1, "", "with_time_unit"], [732, 1, 1, "", "year"]], "polars.Series.str": [[831, 1, 1, "", "concat"], [832, 1, 1, "", "contains"], [833, 1, 1, "", "count_match"], [834, 1, 1, "", "decode"], [835, 1, 1, "", "encode"], [836, 1, 1, "", "ends_with"], [837, 1, 1, "", "explode"], [838, 1, 1, "", "extract"], [839, 1, 1, "", "extract_all"], [840, 1, 1, "", "json_path_match"], [841, 1, 1, "", "lengths"], [842, 1, 1, "", "ljust"], [843, 1, 1, "", "lstrip"], [844, 1, 1, "", "n_chars"], [845, 1, 1, "", "parse_int"], [846, 1, 1, "", "replace"], [847, 1, 1, "", "replace_all"], [848, 1, 1, "", "rjust"], [849, 1, 1, "", "rstrip"], [850, 1, 1, "", "slice"], [851, 1, 1, "", "split"], [852, 1, 1, "", "split_exact"], [853, 1, 1, "", "splitn"], [854, 1, 1, "", "starts_with"], [855, 1, 1, "", "strip"], [856, 1, 1, "", "strptime"], [857, 1, 1, "", "to_lowercase"], [858, 1, 1, "", "to_uppercase"], [859, 1, 1, "", "zfill"]], "polars.Series.struct": [[860, 1, 1, "", "field"], [861, 3, 1, "", "fields"], [862, 1, 1, "", "rename_fields"], [863, 1, 1, "", "to_frame"], [864, 1, 1, "", "unnest"]], "polars.StringCache": [[46, 1, 1, "", "__init__"]], "polars.Struct": [[47, 1, 1, "", "__init__"]], "polars.Time": [[48, 1, 1, "", "__init__"]], "polars.UInt16": [[49, 1, 1, "", "__init__"]], "polars.UInt32": [[50, 1, 1, "", "__init__"]], "polars.UInt64": [[51, 1, 1, "", "__init__"]], "polars.UInt8": [[52, 1, 1, "", "__init__"]], "polars.Unknown": [[53, 1, 1, "", "__init__"]], "polars.Utf8": [[54, 1, 1, "", "__init__"]], "polars.api": [[56, 4, 1, "", "register_dataframe_namespace"], [57, 4, 1, "", "register_expr_namespace"], [58, 4, 1, "", "register_lazyframe_namespace"], [59, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[66, 5, 1, "", "ArrowError"], [67, 5, 1, "", "ColumnNotFoundError"], [68, 5, 1, "", "ComputeError"], [69, 5, 1, "", "DuplicateError"], [70, 5, 1, "", "InvalidOperationError"], [71, 5, 1, "", "NoDataError"], [72, 5, 1, "", "NoRowsReturned"], [73, 5, 1, "", "PanicException"], [74, 5, 1, "", "RowsException"], [75, 5, 1, "", "SchemaError"], [76, 5, 1, "", "SchemaFieldNotFoundError"], [77, 5, 1, "", "ShapeError"], [78, 5, 1, "", "StructFieldNotFoundError"], [79, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[89, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[216, 1, 1, "", "__iter__"], [217, 1, 1, "", "agg"], [218, 1, 1, "", "all"], [219, 1, 1, "", "apply"], [220, 1, 1, "", "count"], [221, 1, 1, "", "first"], [222, 1, 1, "", "head"], [223, 1, 1, "", "last"], [224, 1, 1, "", "max"], [225, 1, 1, "", "mean"], [226, 1, 1, "", "median"], [227, 1, 1, "", "min"], [228, 1, 1, "", "n_unique"], [229, 1, 1, "", "quantile"], [230, 1, 1, "", "sum"], [231, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[614, 1, 1, "", "agg"], [615, 1, 1, "", "apply"], [616, 1, 1, "", "head"], [617, 1, 1, "", "tail"]], "polars.testing": [[110, 4, 1, "", "assert_frame_equal"], [111, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[112, 0, 1, "", "column"], [113, 4, 1, "", "columns"], [114, 4, 1, "", "dataframes"], [115, 4, 1, "", "series"]], "polars.testing.parametric.column": [[112, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 133], "api": [1, 56, 57, 58, 59, 548], "provid": 1, "new": 1, "function": [1, 240, 538, 547], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "binari": [2, 533, 888], "boolean": [3, 534, 889], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119], "load": [5, 119], "restore_default": 6, "save": [7, 119], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 119], "datafram": [24, 25, 26, 27, 28, 29, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237], "write_avro": 24, "write_csv": 25, "write_ipc": 26, "write_json": [27, 613], "write_ndjson": 28, "write_parquet": 29, "datatyp": 30, "date": [31, 240, 501], "datetim": [32, 502], "durat": [33, 503], "float32": 34, "float64": 35, "int16": 36, "int32": 37, "int64": 38, "int8": 39, "list": [40, 379, 512], "null": 41, "object": 42, "sqlcontext": [43, 44, 45], "execut": 43, "queri": 44, "regist": 45, "stringcach": [46, 547], "struct": [47, 469, 470, 527, 544, 860, 861, 862, 863, 864, 898], "time": [48, 240], "uint16": 49, "uint32": 50, "uint64": 51, "uint8": 52, "unknown": 53, "utf8": 54, "align_fram": 55, "register_dataframe_namespac": 56, "register_expr_namespac": 57, "register_lazyframe_namespac": 58, "register_series_namespac": 59, "arg_wher": 60, "build_info": 61, "collect_al": 62, "concat": [63, 263, 440, 646, 831], "cut": 64, "date_rang": 65, "except": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 241], "arrowerror": 66, "columnnotfounderror": 67, "computeerror": 68, "duplicateerror": 69, "invalidoperationerror": 70, "nodataerror": 71, "norowsreturn": 72, "panicexcept": 73, "rowsexcept": 74, "schemaerror": 75, "schemafieldnotfounderror": 76, "shapeerror": 77, "structfieldnotfounderror": 78, "toomanyrowsreturn": 79, "from_arrow": 80, "from_datafram": 81, "from_dict": [82, 83], "from_numpi": 84, "from_panda": 85, "from_record": 86, "get_dummi": 87, "get_idx_typ": 88, "intern": [89, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 614, 615, 616, 617], "batch": 89, "batchedcsvread": [89, 549], "next_batch": 89, "ones": 90, "read_avro": 91, "read_csv": 92, "read_csv_batch": 93, "read_delta": 94, "read_excel": 95, "read_ipc": 96, "read_ipc_schema": 97, "read_json": [98, 589], "read_ndjson": 99, "read_parquet": 100, "read_parquet_schema": 101, "read_sql": 102, "scan_csv": 103, "scan_delta": 104, "scan_d": 105, "scan_ipc": 106, "scan_ndjson": 107, "scan_parquet": 108, "show_vers": 109, "test": [110, 111, 112, 113, 114, 115, 901], "assert_frame_equ": 110, "assert_series_equ": 111, "parametr": [112, 113, 114, 115], "column": [112, 113, 125, 536, 555], "seri": [115, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894], "threadpool_s": 116, "toggle_string_cach": 117, "zero": 118, "option": 119, "current": 119, "us": 119, "context": 119, "manag": 119, "aggreg": [120, 242, 550, 624], "__dataframe__": 121, "appli": [122, 219, 249, 488, 615, 630], "clear": [123, 552, 679], "clone": [124, 553, 683], "describ": [126, 691], "drop": [127, 558], "drop_in_plac": 128, "drop_nul": [129, 310, 559, 695], "dtype": [130, 560, 733], "estimated_s": [131, 735], "explod": [132, 267, 349, 446, 561, 650, 740, 837], "fill_nan": [134, 351, 563, 742], "fill_nul": [135, 352, 564, 743], "filter": [136, 353, 565, 744], "find_idx_by_nam": 137, "fold": [138, 507], "frame_equ": 139, "get_column": [140, 141], "glimps": 142, "groupbi": [143, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 568, 614, 615, 616, 617, 620], "groupby_dynam": [144, 569], "groupby_rol": [145, 570], "hash_row": 146, "head": [147, 222, 270, 359, 511, 571, 616, 653, 750], "height": 148, "hstack": 149, "insert_at_idx": 150, "interpol": [151, 361, 573, 752], "is_dupl": [152, 363, 755], "is_empti": [153, 756], "is_uniqu": [154, 373, 768], "item": [155, 770], "iter_row": 156, "iter_slic": 157, "join": [158, 271, 574, 654], "join_asof": [159, 575], "lazi": [160, 547, 577], "limit": [161, 378, 578, 773], "max": [162, 224, 274, 386, 515, 580, 657, 706, 776], "mean": [163, 225, 275, 387, 516, 581, 658, 707, 777], "median": [164, 226, 388, 517, 582, 708, 778], "melt": [165, 583], "merge_sort": [166, 584], "min": [167, 227, 276, 395, 518, 585, 659, 713, 779], "n_chunk": [168, 781], "n_uniqu": [169, 228, 397, 519, 782], "null_count": [170, 400, 787], "partition_bi": 171, "pearson_corr": [172, 520], "pipe": [173, 586], "pivot": 174, "product": [175, 405, 791], "quantil": [176, 229, 406, 521, 588, 792], "rechunk": [177, 408, 794], "renam": [178, 590, 796], "replac": [179, 455, 846], "replace_at_idx": 180, "revers": [181, 277, 412, 591, 660, 798], "row": [182, 183], "sampl": [184, 424, 810], "schema": [185, 592], "select": [186, 239, 524, 542, 593, 623, 896], "shape": [187, 816], "shift": [188, 278, 427, 594, 661, 817], "shift_and_fil": [189, 428, 595, 818], "shrink_to_fit": [190, 820], "slice": [191, 279, 435, 459, 599, 662, 826, 850], "sort": [192, 280, 436, 600, 663, 827], "std": [193, 439, 526, 601, 829], "sum": [194, 230, 281, 472, 528, 602, 664, 865], "tail": [195, 231, 282, 473, 529, 603, 617, 665, 866], "take_everi": [196, 475, 604, 868], "to_arrow": [197, 872], "to_dict": [198, 199], "to_dummi": [200, 873], "to_numpi": [201, 876], "to_panda": [202, 877], "to_seri": 203, "to_struct": [204, 284, 667], "transpos": 205, "uniqu": [206, 285, 480, 605, 668, 880], "unnest": [207, 606, 864], "unstack": 208, "updat": [209, 607], "upsampl": 210, "var": [211, 484, 530, 608, 883], "vstack": 212, "width": [213, 609], "with_column": [214, 610], "with_row_count": [215, 612], "__iter__": 216, "agg": [217, 614], "all": [218, 246, 486, 627], "count": [220, 300, 496], "first": [221, 268, 354, 506, 566, 651], "last": [223, 272, 376, 576, 655], "attribut": [232, 618, 887], "comput": [233, 537, 891], "descript": [234, 619, 892], "export": [235, 893], "miscellan": [238, 541, 547, 622, 895], "manipul": [239, 542, 623, 896], "data": 240, "type": 240, "numer": 240, "nest": 240, "other": 240, "expr": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485], "ab": [243, 625], "agg_group": 244, "alia": [245, 626], "ani": [247, 487, 628], "append": [248, 629], "arcco": [250, 631], "arccosh": [251, 632], "arcsin": [252, 633], "arcsinh": [253, 634], "arctan": [254, 635], "arctanh": [255, 636], "arg_max": [256, 261, 637, 644], "arg_min": [257, 262, 638, 645], "arg_sort": [258, 639], "arg_uniqu": [259, 641], "argsort": [260, 642], "arr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668], "contain": [264, 287, 441, 647, 669, 832], "diff": [265, 307, 648, 692], "eval": [266, 649], "get": [269, 652], "length": [273, 450, 656, 841], "take": [283, 474, 666, 867], "backward_fil": 286, "bin": [287, 288, 289, 290, 291, 669, 670, 671, 672, 673], "decod": [288, 443, 670, 834], "encod": [289, 444, 671, 835], "ends_with": [290, 445, 672, 836], "starts_with": [291, 463, 673, 854], "cast": [292, 674], "cat": [293, 675, 676], "set_ord": [293, 676], "ceil": [294, 677], "clip": [295, 680], "clip_max": [296, 681], "clip_min": [297, 682], "co": [298, 684], "cosh": [299, 685], "cumcount": 301, "cummax": [302, 686], "cummin": [303, 687], "cumprod": [304, 688], "cumsum": [305, 500, 689], "cumulative_ev": [306, 690], "dot": [308, 693], "drop_nan": [309, 694], "dt": [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732], "cast_time_unit": [311, 697], "combin": [312, 698], "convert_time_zon": [313, 699], "dai": [314, 315, 700, 701], "epoch": [316, 702], "hour": [317, 318, 703, 704], "iso_year": [319, 705], "microsecond": [320, 321, 709, 710], "millisecond": [322, 323, 711, 712], "minut": [324, 325, 714, 715], "month": [326, 716], "nanosecond": [327, 328, 717, 718], "offset_bi": [329, 719], "ordinal_dai": [330, 720], "quarter": [331, 721], "replace_time_zon": [332, 722], "round": [333, 423, 723, 809], "second": [334, 335, 724, 725], "strftime": [336, 726], "timestamp": [337, 727], "truncat": [338, 728], "week": [339, 729], "weekdai": [340, 730], "with_time_unit": [341, 731], "year": [342, 732], "entropi": [343, 734], "ewm_mean": [344, 736], "ewm_std": [345, 737], "ewm_var": [346, 738], "exclud": [347, 505], "exp": [348, 739], "extend_const": [350, 741], "flatten": 355, "floor": [356, 746], "forward_fil": 357, "hash": [358, 749], "inspect": [360, 572], "is_between": 362, "is_finit": [364, 757], "is_first": [365, 758], "is_in": [366, 760], "is_infinit": [367, 761], "is_nan": [368, 762], "is_not": 369, "is_not_nan": [370, 763], "is_not_nul": [371, 764], "is_nul": [372, 765], "keep_nam": 374, "kurtosi": [375, 771], "len": [377, 772], "log": [380, 774], "log10": [381, 775], "lower_bound": 382, "map": [383, 514, 579], "map_alia": 384, "map_dict": 385, "meta": [389, 390, 391, 392, 393, 394, 540], "has_multiple_output": 389, "is_regex_project": 390, "output_nam": 391, "pop": 392, "root_nam": 393, "undo_alias": 394, "mode": [396, 780], "nan_max": [398, 784], "nan_min": [399, 785], "over": 401, "pct_chang": [402, 788], "pow": 403, "prefix": 404, "rank": [407, 793], "reinterpret": [409, 795], "repeat_bi": 410, "reshap": [411, 797], "rolling_appli": [413, 799], "rolling_max": [414, 800], "rolling_mean": [415, 801], "rolling_median": [416, 802], "rolling_min": [417, 803], "rolling_quantil": [418, 804], "rolling_skew": [419, 805], "rolling_std": [420, 806], "rolling_sum": [421, 807], "rolling_var": [422, 808], "search_sort": [425, 811], "set_sort": [426, 815], "shrink_dtyp": [429, 819], "shuffl": [430, 821], "sign": [431, 822], "sin": [432, 823], "sinh": [433, 824], "skew": [434, 825], "sort_bi": 437, "sqrt": [438, 828], "str": [440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859], "count_match": [442, 833], "extract": [447, 838], "extract_al": [448, 839], "json_path_match": [449, 840], "ljust": [451, 842], "lstrip": [452, 843], "n_char": [453, 844], "parse_int": [454, 845], "replace_al": [456, 847], "rjust": [457, 848], "rstrip": [458, 849], "split": [460, 851], "split_exact": [461, 852], "splitn": [462, 853], "strip": [464, 855], "strptime": [465, 856], "to_lowercas": [466, 857], "to_uppercas": [467, 858], "zfill": [468, 859], "field": [469, 860, 861], "rename_field": [470, 862], "suffix": 471, "tan": [476, 869], "tanh": [477, 870], "to_phys": [478, 878], "top_k": [479, 879], "unique_count": [481, 881], "upper_bound": 482, "value_count": [483, 882], "where": 485, "arang": 489, "arg_sort_bi": 490, "avg": 491, "coalesc": 492, "col": 493, "concat_list": 494, "concat_str": 495, "cov": 497, "cumfold": 498, "cumreduc": 499, "element": 504, "format": 508, "from_epoch": 509, "group": 510, "lit": 513, "reduc": 522, "repeat": 523, "spearman_rank_corr": 525, "when": 531, "arrai": [532, 886], "categori": [535, 890], "name": [536, 783], "express": 539, "string": [543, 897], "tempor": [545, 899], "window": 546, "convers": 547, "eager": 547, "parallel": 547, "refer": 548, "input": 549, "output": 549, "csv": 549, "feather": 549, "ipc": 549, "parquet": 549, "sql": [549, 900], "json": 549, "avro": 549, "excel": 549, "delta": 549, "lake": 549, "dataset": 549, "lazyfram": [551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 621], "cach": 551, "collect": 554, "describe_optimized_plan": 556, "describe_plan": 557, "fetch": 562, "from_json": 567, "profil": 587, "show_graph": 596, "sink_ipc": 597, "sink_parquet": 598, "with_context": 611, "lazygroupbi": [614, 615, 616, 617], "read": 622, "write": 622, "logic": 622, "plan": 622, "arg_tru": 640, "chunk_length": 678, "flag": 745, "get_chunk": 747, "has_valid": 748, "inner_dtyp": 751, "is_boolean": 753, "is_datelik": 754, "is_float": 759, "is_numer": 766, "is_sort": 767, "is_utf8": 769, "new_from_index": 786, "peak_max": 789, "peak_min": 790, "series_equ": 812, "set": 813, "set_at_idx": 814, "to_fram": [863, 874], "time_unit": 871, "to_list": 875, "view": 884, "zip_with": 885, "method": 900, "assert": 901, "properti": 901, "base": 901, "strategi": 901, "helper": 901, "util": 902}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.concat": [[63, "polars-concat"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.Int8": [[39, "polars-int8"]], "polars.Binary": [[2, "polars-binary"]], "polars.Duration": [[33, "polars-duration"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.arg_where": [[60, "polars-arg-where"]], "polars.DataFrame.write_ipc": [[26, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.Datetime": [[32, "polars-datetime"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.build_info": [[61, "polars-build-info"]], "polars.List": [[40, "polars-list"]], "polars.Struct": [[47, "polars-struct"]], "polars.api.register_series_namespace": [[59, "polars-api-register-series-namespace"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Float64": [[35, "polars-float64"]], "polars.Null": [[41, "polars-null"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Float32": [[34, "polars-float32"]], "polars.api.register_lazyframe_namespace": [[58, "polars-api-register-lazyframe-namespace"]], "polars.cut": [[64, "polars-cut"]], "polars.DataFrame.write_parquet": [[29, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.SQLContext.register": [[45, "polars-sqlcontext-register"]], "polars.UInt32": [[50, "polars-uint32"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.api.register_expr_namespace": [[57, "polars-api-register-expr-namespace"]], "polars.SQLContext.execute": [[43, "polars-sqlcontext-execute"]], "polars.DataType": [[30, "polars-datatype"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Int32": [[37, "polars-int32"]], "polars.collect_all": [[62, "polars-collect-all"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.Utf8": [[54, "polars-utf8"]], "polars.date_range": [[65, "polars-date-range"]], "polars.DataFrame.write_ndjson": [[28, "polars-dataframe-write-ndjson"]], "polars.Object": [[42, "polars-object"]], "polars.UInt8": [[52, "polars-uint8"]], "polars.Int16": [[36, "polars-int16"]], "polars.Time": [[48, "polars-time"]], "polars.exceptions.ArrowError": [[66, "polars-exceptions-arrowerror"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Date": [[31, "polars-date"]], "polars.Unknown": [[53, "polars-unknown"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.align_frames": [[55, "polars-align-frames"]], "polars.UInt16": [[49, "polars-uint16"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.SQLContext.query": [[44, "polars-sqlcontext-query"]], "polars.UInt64": [[51, "polars-uint64"]], "polars.api.register_dataframe_namespace": [[56, "polars-api-register-dataframe-namespace"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.DataFrame.write_json": [[27, "polars-dataframe-write-json"]], "polars.Int64": [[38, "polars-int64"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.exceptions.SchemaFieldNotFoundError": [[76, "polars-exceptions-schemafieldnotfounderror"]], "polars.scan_ipc": [[106, "polars-scan-ipc"]], "polars.testing.parametric.dataframes": [[114, "polars-testing-parametric-dataframes"]], "polars.exceptions.NoDataError": [[71, "polars-exceptions-nodataerror"]], "polars.get_dummies": [[87, "polars-get-dummies"]], "polars.testing.parametric.column": [[112, "polars-testing-parametric-column"]], "polars.DataFrame.apply": [[122, "polars-dataframe-apply"]], "polars.show_versions": [[109, "polars-show-versions"]], "polars.DataFrame.explode": [[132, "polars-dataframe-explode"]], "polars.read_excel": [[95, "polars-read-excel"]], "polars.exceptions.NoRowsReturned": [[72, "polars-exceptions-norowsreturned"]], "polars.get_idx_type": [[88, "polars-get-idx-type"]], "polars.DataFrame.clone": [[124, "polars-dataframe-clone"]], "polars.read_ndjson": [[99, "polars-read-ndjson"]], "polars.read_sql": [[102, "polars-read-sql"]], "polars.read_csv": [[92, "polars-read-csv"]], "polars.from_arrow": [[80, "polars-from-arrow"]], "polars.from_records": [[86, "polars-from-records"]], "polars.testing.assert_series_equal": [[111, "polars-testing-assert-series-equal"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[89, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.DataFrame.drop": [[127, "polars-dataframe-drop"]], "polars.exceptions.ShapeError": [[77, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[79, "polars-exceptions-toomanyrowsreturned"]], "polars.from_dicts": [[83, "polars-from-dicts"]], "polars.read_parquet": [[100, "polars-read-parquet"]], "polars.DataFrame.__dataframe__": [[121, "polars-dataframe-dataframe"]], "polars.from_dataframe": [[81, "polars-from-dataframe"]], "polars.DataFrame.columns": [[125, "polars-dataframe-columns"]], "polars.zeros": [[118, "polars-zeros"]], "polars.exceptions.ColumnNotFoundError": [[67, "polars-exceptions-columnnotfounderror"]], "polars.read_ipc": [[96, "polars-read-ipc"]], "polars.DataFrame.drop_nulls": [[129, "polars-dataframe-drop-nulls"]], "polars.from_numpy": [[84, "polars-from-numpy"]], "polars.ones": [[90, "polars-ones"]], "polars.from_dict": [[82, "polars-from-dict"]], "Config": [[119, "config"]], "Config options": [[119, "config-options"]], "Config load, save, and current state": [[119, "config-load-save-and-current-state"]], "Use as a context manager": [[119, "use-as-a-context-manager"]], "polars.DataFrame.dtypes": [[130, "polars-dataframe-dtypes"]], "polars.toggle_string_cache": [[117, "polars-toggle-string-cache"]], "polars.scan_ndjson": [[107, "polars-scan-ndjson"]], "polars.exceptions.StructFieldNotFoundError": [[78, "polars-exceptions-structfieldnotfounderror"]], "polars.read_ipc_schema": [[97, "polars-read-ipc-schema"]], "polars.threadpool_size": [[116, "polars-threadpool-size"]], "polars.testing.parametric.columns": [[113, "polars-testing-parametric-columns"]], "polars.read_parquet_schema": [[101, "polars-read-parquet-schema"]], "polars.scan_parquet": [[108, "polars-scan-parquet"]], "polars.DataFrame.estimated_size": [[131, "polars-dataframe-estimated-size"]], "polars.scan_delta": [[104, "polars-scan-delta"]], "polars.DataFrame.cleared": [[123, "polars-dataframe-cleared"]], "polars.DataFrame.drop_in_place": [[128, "polars-dataframe-drop-in-place"]], "polars.read_avro": [[91, "polars-read-avro"]], "polars.testing.parametric.series": [[115, "polars-testing-parametric-series"]], "polars.exceptions.SchemaError": [[75, "polars-exceptions-schemaerror"]], "polars.exceptions.ComputeError": [[68, "polars-exceptions-computeerror"]], "polars.exceptions.RowsException": [[74, "polars-exceptions-rowsexception"]], "Aggregation": [[120, "aggregation"], [624, "aggregation"], [550, "aggregation"], [242, "aggregation"]], "polars.DataFrame.describe": [[126, "polars-dataframe-describe"]], "polars.read_json": [[98, "polars-read-json"]], "polars.from_pandas": [[85, "polars-from-pandas"]], "polars.scan_csv": [[103, "polars-scan-csv"]], "polars.exceptions.PanicException": [[73, "polars-exceptions-panicexception"]], "polars.exceptions.DuplicateError": [[69, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[70, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.extend": [[133, "polars-dataframe-extend"]], "polars.scan_ds": [[105, "polars-scan-ds"]], "polars.testing.assert_frame_equal": [[110, "polars-testing-assert-frame-equal"]], "polars.read_delta": [[94, "polars-read-delta"]], "polars.read_csv_batched": [[93, "polars-read-csv-batched"]], "polars.Series.str.json_path_match": [[840, "polars-series-str-json-path-match"]], "polars.Series.set_at_idx": [[814, "polars-series-set-at-idx"]], "polars.Series.rolling_sum": [[807, "polars-series-rolling-sum"]], "polars.Series.str.lstrip": [[843, "polars-series-str-lstrip"]], "polars.Series.str.split_exact": [[852, "polars-series-str-split-exact"]], "polars.Series.struct.field": [[860, "polars-series-struct-field"]], "polars.Series.shrink_to_fit": [[820, "polars-series-shrink-to-fit"]], "polars.Series.str.zfill": [[859, "polars-series-str-zfill"]], "polars.Series.struct.fields": [[861, "polars-series-struct-fields"]], "polars.Series.str.encode": [[835, "polars-series-str-encode"]], "polars.Series.round": [[809, "polars-series-round"]], "polars.Series.str.strip": [[855, "polars-series-str-strip"]], "polars.Series.tanh": [[870, "polars-series-tanh"]], "polars.Series.str.decode": [[834, "polars-series-str-decode"]], "polars.Series.shift": [[817, "polars-series-shift"]], "polars.Series.shift_and_fill": [[818, "polars-series-shift-and-fill"]], "polars.Series.slice": [[826, "polars-series-slice"]], "polars.Series.str.ljust": [[842, "polars-series-str-ljust"]], "polars.Series.str.rstrip": [[849, "polars-series-str-rstrip"]], "polars.Series.shrink_dtype": [[819, "polars-series-shrink-dtype"]], "polars.Series.str.to_uppercase": [[858, "polars-series-str-to-uppercase"]], "polars.Series.rolling_std": [[806, "polars-series-rolling-std"]], "polars.Series.str.starts_with": [[854, "polars-series-str-starts-with"]], "polars.Series.rolling_var": [[808, "polars-series-rolling-var"]], "polars.Series.struct.rename_fields": [[862, "polars-series-struct-rename-fields"]], "polars.Series.sqrt": [[828, "polars-series-sqrt"]], "polars.Series.str.splitn": [[853, "polars-series-str-splitn"]], "polars.Series.struct.unnest": [[864, "polars-series-struct-unnest"]], "polars.Series.str.extract_all": [[839, "polars-series-str-extract-all"]], "polars.Series.tan": [[869, "polars-series-tan"]], "polars.Series.str.rjust": [[848, "polars-series-str-rjust"]], "polars.Series.set_sorted": [[815, "polars-series-set-sorted"]], "polars.Series.str.count_match": [[833, "polars-series-str-count-match"]], "polars.Series.tail": [[866, "polars-series-tail"]], "polars.Series.take": [[867, "polars-series-take"]], "polars.Series.str.strptime": [[856, "polars-series-str-strptime"]], "polars.Series.str.explode": [[837, "polars-series-str-explode"]], "polars.Series.str.replace_all": [[847, "polars-series-str-replace-all"]], "polars.Series.str": [[830, "polars-series-str"]], "polars.Series.shape": [[816, "polars-series-shape"]], "polars.Series.search_sorted": [[811, "polars-series-search-sorted"]], "polars.Series.rolling_quantile": [[804, "polars-series-rolling-quantile"]], "polars.Series.str.extract": [[838, "polars-series-str-extract"]], "polars.Series.str.parse_int": [[845, "polars-series-str-parse-int"]], "polars.Series.rolling_skew": [[805, "polars-series-rolling-skew"]], "polars.Series.set": [[813, "polars-series-set"]], "polars.Series.sinh": [[824, "polars-series-sinh"]], "polars.Series.std": [[829, "polars-series-std"]], "polars.Series.str.replace": [[846, "polars-series-str-replace"]], "polars.Series.str.concat": [[831, "polars-series-str-concat"]], "polars.Series.struct.to_frame": [[863, "polars-series-struct-to-frame"]], "polars.Series.sin": [[823, "polars-series-sin"]], "polars.Series.str.lengths": [[841, "polars-series-str-lengths"]], "polars.Series.str.split": [[851, "polars-series-str-split"]], "polars.Series.str.to_lowercase": [[857, "polars-series-str-to-lowercase"]], "polars.Series.str.n_chars": [[844, "polars-series-str-n-chars"]], "polars.Series.series_equal": [[812, "polars-series-series-equal"]], "polars.Series.sign": [[822, "polars-series-sign"]], "polars.Series.sum": [[865, "polars-series-sum"]], "polars.Series.sample": [[810, "polars-series-sample"]], "polars.Series.shuffle": [[821, "polars-series-shuffle"]], "polars.Series.sort": [[827, "polars-series-sort"]], "polars.Series.str.contains": [[832, "polars-series-str-contains"]], "polars.Series.skew": [[825, "polars-series-skew"]], "polars.Series.take_every": [[868, "polars-series-take-every"]], "polars.Series.str.ends_with": [[836, "polars-series-str-ends-with"]], "polars.Series.str.slice": [[850, "polars-series-str-slice"]], "polars.Series.floor": [[746, "polars-series-floor"]], "polars.Series.is_boolean": [[753, "polars-series-is-boolean"]], "polars.Series.limit": [[773, "polars-series-limit"]], "polars.Series.max": [[776, "polars-series-max"]], "polars.Series.rename": [[796, "polars-series-rename"]], "polars.Series.head": [[750, "polars-series-head"]], "polars.Series.len": [[772, "polars-series-len"]], "polars.Series.mode": [[780, "polars-series-mode"]], "polars.Series.name": [[783, "polars-series-name"]], "polars.Series.rolling_apply": [[799, "polars-series-rolling-apply"]], "polars.Series.nan_max": [[784, "polars-series-nan-max"]], "polars.Series.item": [[770, "polars-series-item"]], "polars.Series.product": [[791, "polars-series-product"]], "polars.Series.n_unique": [[782, "polars-series-n-unique"]], "polars.Series.is_float": [[759, "polars-series-is-float"]], "polars.Series.is_numeric": [[766, "polars-series-is-numeric"]], "polars.Series.is_first": [[758, "polars-series-is-first"]], "polars.Series.peak_max": [[789, "polars-series-peak-max"]], "polars.Series.rolling_mean": [[801, "polars-series-rolling-mean"]], "polars.Series.null_count": [[787, "polars-series-null-count"]], "polars.Series.is_datelike": [[754, "polars-series-is-datelike"]], "polars.Series.mean": [[777, "polars-series-mean"]], "polars.Series.peak_min": [[790, "polars-series-peak-min"]], "polars.Series.rechunk": [[794, "polars-series-rechunk"]], "polars.Series.flags": [[745, "polars-series-flags"]], "polars.Series.explode": [[740, "polars-series-explode"]], "polars.Series.log": [[774, "polars-series-log"]], "polars.Series.median": [[778, "polars-series-median"]], "polars.Series.new_from_index": [[786, "polars-series-new-from-index"]], "polars.Series.is_utf8": [[769, "polars-series-is-utf8"]], "polars.Series.reinterpret": [[795, "polars-series-reinterpret"]], "polars.Series.is_duplicated": [[755, "polars-series-is-duplicated"]], "polars.Series.fill_nan": [[742, "polars-series-fill-nan"]], "polars.Series.is_sorted": [[767, "polars-series-is-sorted"]], "polars.Series.reverse": [[798, "polars-series-reverse"]], "polars.Series.extend_constant": [[741, "polars-series-extend-constant"]], "polars.Series.kurtosis": [[771, "polars-series-kurtosis"]], "polars.Series.exp": [[739, "polars-series-exp"]], "polars.Series.is_empty": [[756, "polars-series-is-empty"]], "polars.Series.quantile": [[792, "polars-series-quantile"]], "polars.Series.is_nan": [[762, "polars-series-is-nan"]], "polars.Series.fill_null": [[743, "polars-series-fill-null"]], "polars.Series.is_not_null": [[764, "polars-series-is-not-null"]], "polars.Series.pct_change": [[788, "polars-series-pct-change"]], "polars.Series.rank": [[793, "polars-series-rank"]], "polars.Series.reshape": [[797, "polars-series-reshape"]], "polars.Series.n_chunks": [[781, "polars-series-n-chunks"]], "polars.Series.is_finite": [[757, "polars-series-is-finite"]], "polars.Series.is_not_nan": [[763, "polars-series-is-not-nan"]], "polars.Series.get_chunks": [[747, "polars-series-get-chunks"]], "polars.Series.nan_min": [[785, "polars-series-nan-min"]], "polars.Series.ewm_std": [[737, "polars-series-ewm-std"]], "polars.Series.filter": [[744, "polars-series-filter"]], "polars.Series.is_null": [[765, "polars-series-is-null"]], "polars.Series.log10": [[775, "polars-series-log10"]], "polars.Series.rolling_min": [[803, "polars-series-rolling-min"]], "polars.Series.min": [[779, "polars-series-min"]], "polars.Series.has_validity": [[748, "polars-series-has-validity"]], "polars.Series.is_unique": [[768, "polars-series-is-unique"]], "polars.Series.rolling_max": [[800, "polars-series-rolling-max"]], "polars.Series.interpolate": [[752, "polars-series-interpolate"]], "polars.Series.is_in": [[760, "polars-series-is-in"]], "polars.Series.hash": [[749, "polars-series-hash"]], "polars.Series.inner_dtype": [[751, "polars-series-inner-dtype"]], "polars.Series.is_infinite": [[761, "polars-series-is-infinite"]], "polars.Series.rolling_median": [[802, "polars-series-rolling-median"]], "polars.Series.ewm_var": [[738, "polars-series-ewm-var"]], "polars.Series.dt.hour": [[703, "polars-series-dt-hour"]], "polars.Series.dt.convert_time_zone": [[699, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.epoch": [[702, "polars-series-dt-epoch"]], "polars.Series.dt.millisecond": [[711, "polars-series-dt-millisecond"]], "polars.Series.dt.iso_year": [[705, "polars-series-dt-iso-year"]], "polars.Series.dt.weekday": [[730, "polars-series-dt-weekday"]], "polars.Series.dt.mean": [[707, "polars-series-dt-mean"]], "polars.Series.chunk_lengths": [[678, "polars-series-chunk-lengths"]], "polars.Series.bin.encode": [[671, "polars-series-bin-encode"]], "polars.Series.dt.minutes": [[715, "polars-series-dt-minutes"]], "polars.Series.bin.decode": [[670, "polars-series-bin-decode"]], "polars.Series.cosh": [[685, "polars-series-cosh"]], "polars.Series.clip": [[680, "polars-series-clip"]], "polars.Series.dt.microseconds": [[710, "polars-series-dt-microseconds"]], "polars.Series.dt.month": [[716, "polars-series-dt-month"]], "polars.Series.dt.combine": [[698, "polars-series-dt-combine"]], "polars.Series.describe": [[691, "polars-series-describe"]], "polars.Series.dt.days": [[701, "polars-series-dt-days"]], "polars.Series.dt.max": [[706, "polars-series-dt-max"]], "polars.Series.dt.ordinal_day": [[720, "polars-series-dt-ordinal-day"]], "polars.Series.dt.seconds": [[725, "polars-series-dt-seconds"]], "polars.Series.dt.year": [[732, "polars-series-dt-year"]], "polars.Series.drop_nans": [[694, "polars-series-drop-nans"]], "polars.Series.cleared": [[679, "polars-series-cleared"]], "polars.Series.dt.microsecond": [[709, "polars-series-dt-microsecond"]], "polars.Series.clip_min": [[682, "polars-series-clip-min"]], "polars.Series.cat.set_ordering": [[676, "polars-series-cat-set-ordering"]], "polars.Series.cat": [[675, "polars-series-cat"]], "polars.Series.clone": [[683, "polars-series-clone"]], "polars.Series.cumulative_eval": [[690, "polars-series-cumulative-eval"]], "polars.Series.drop_nulls": [[695, "polars-series-drop-nulls"]], "polars.Series.dt.round": [[723, "polars-series-dt-round"]], "polars.Series.dt.truncate": [[728, "polars-series-dt-truncate"]], "polars.Series.cumprod": [[688, "polars-series-cumprod"]], "polars.Series.dt.cast_time_unit": [[697, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.ends_with": [[672, "polars-series-bin-ends-with"]], "polars.Series.clip_max": [[681, "polars-series-clip-max"]], "polars.Series.dt.day": [[700, "polars-series-dt-day"]], "polars.Series.dt.min": [[713, "polars-series-dt-min"]], "polars.Series.dt.nanoseconds": [[718, "polars-series-dt-nanoseconds"]], "polars.Series.dt.timestamp": [[727, "polars-series-dt-timestamp"]], "polars.Series.dt.week": [[729, "polars-series-dt-week"]], "polars.Series.ceil": [[677, "polars-series-ceil"]], "polars.Series.dt": [[696, "polars-series-dt"]], "polars.Series.dt.replace_time_zone": [[722, "polars-series-dt-replace-time-zone"]], "polars.Series.cos": [[684, "polars-series-cos"]], "polars.Series.dt.nanosecond": [[717, "polars-series-dt-nanosecond"]], "polars.Series.dt.second": [[724, "polars-series-dt-second"]], "polars.Series.dtype": [[733, "polars-series-dtype"]], "polars.Series.cumsum": [[689, "polars-series-cumsum"]], "polars.Series.dt.strftime": [[726, "polars-series-dt-strftime"]], "polars.Series.cummax": [[686, "polars-series-cummax"]], "polars.Series.cast": [[674, "polars-series-cast"]], "polars.Series.cummin": [[687, "polars-series-cummin"]], "polars.Series.dot": [[693, "polars-series-dot"]], "polars.Series.dt.milliseconds": [[712, "polars-series-dt-milliseconds"]], "polars.Series.dt.with_time_unit": [[731, "polars-series-dt-with-time-unit"]], "polars.Series.bin.starts_with": [[673, "polars-series-bin-starts-with"]], "polars.Series.diff": [[692, "polars-series-diff"]], "polars.Series.dt.quarter": [[721, "polars-series-dt-quarter"]], "polars.Series.dt.minute": [[714, "polars-series-dt-minute"]], "polars.Series.entropy": [[734, "polars-series-entropy"]], "polars.Series.ewm_mean": [[736, "polars-series-ewm-mean"]], "polars.Series.dt.offset_by": [[719, "polars-series-dt-offset-by"]], "polars.Series.dt.median": [[708, "polars-series-dt-median"]], "polars.Series.estimated_size": [[735, "polars-series-estimated-size"]], "polars.Series.dt.hours": [[704, "polars-series-dt-hours"]], "polars.Series.time_unit": [[871, "polars-series-time-unit"]], "Struct": [[898, "struct"], [544, "struct"]], "polars.Series.value_counts": [[882, "polars-series-value-counts"]], "Utils": [[902, "utils"]], "polars.Series.top_k": [[879, "polars-series-top-k"]], "polars.Series.zip_with": [[885, "polars-series-zip-with"]], "Temporal": [[899, "temporal"], [545, "temporal"]], "polars.Series.to_frame": [[874, "polars-series-to-frame"]], "Miscellaneous": [[895, "miscellaneous"], [622, "miscellaneous"], [547, "miscellaneous"], [541, "miscellaneous"], [238, "miscellaneous"]], "Categories": [[890, "categories"], [535, "categories"]], "polars.Series.unique_counts": [[881, "polars-series-unique-counts"]], "Binary": [[888, "binary"], [533, "binary"]], "Export": [[893, "export"], [235, "export"]], "polars.Series.to_dummies": [[873, "polars-series-to-dummies"]], "polars.Series.view": [[884, "polars-series-view"]], "polars.Series.to_list": [[875, "polars-series-to-list"]], "Array": [[886, "array"], [532, "array"]], "polars.Series.to_numpy": [[876, "polars-series-to-numpy"]], "polars.Series.to_physical": [[878, "polars-series-to-physical"]], "Attributes": [[887, "attributes"], [618, "attributes"], [232, "attributes"]], "polars.Series.to_arrow": [[872, "polars-series-to-arrow"]], "Computation": [[891, "computation"], [537, "computation"], [233, "computation"]], "Series": [[894, "series"]], "Testing": [[901, "testing"]], "Asserts": [[901, "asserts"]], "Property-based testing": [[901, "property-based-testing"]], "Strategies": [[901, "strategies"]], "Strategy helpers": [[901, "strategy-helpers"]], "Descriptive": [[892, "descriptive"], [619, "descriptive"], [234, "descriptive"]], "Boolean": [[889, "boolean"], [534, "boolean"]], "Strings": [[897, "strings"], [543, "strings"]], "polars.Series.to_pandas": [[877, "polars-series-to-pandas"]], "Manipulation/selection": [[896, "manipulation-selection"], [623, "manipulation-selection"], [542, "manipulation-selection"], [239, "manipulation-selection"]], "polars.Series.unique": [[880, "polars-series-unique"]], "SQL": [[900, "sql"], [549, "sql"]], "Methods": [[900, "methods"]], "polars.Series.var": [[883, "polars-series-var"]], "polars.LazyFrame.with_row_count": [[612, "polars-lazyframe-with-row-count"]], "polars.Series.arr.reverse": [[660, "polars-series-arr-reverse"]], "polars.Series.arr.unique": [[668, "polars-series-arr-unique"]], "polars.LazyFrame.var": [[608, "polars-lazyframe-var"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[614, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.write_json": [[613, "polars-lazyframe-write-json"]], "polars.Series.arr.max": [[657, "polars-series-arr-max"]], "polars.Series.arr.to_struct": [[667, "polars-series-arr-to-struct"]], "polars.Series.arccos": [[631, "polars-series-arccos"]], "polars.Series.arr.first": [[651, "polars-series-arr-first"]], "polars.Series.arctan": [[635, "polars-series-arctan"]], "polars.Series.arccosh": [[632, "polars-series-arccosh"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[617, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.width": [[609, "polars-lazyframe-width"]], "polars.Series.arg_min": [[638, "polars-series-arg-min"]], "polars.LazyFrame.unique": [[605, "polars-lazyframe-unique"]], "polars.Series.arr.arg_max": [[644, "polars-series-arr-arg-max"]], "polars.LazyFrame.update": [[607, "polars-lazyframe-update"]], "polars.Series.arr.min": [[659, "polars-series-arr-min"]], "polars.Series.arg_sort": [[639, "polars-series-arg-sort"]], "polars.Series.arr.diff": [[648, "polars-series-arr-diff"]], "polars.Series.arr.arg_min": [[645, "polars-series-arr-arg-min"]], "polars.LazyFrame.with_context": [[611, "polars-lazyframe-with-context"]], "polars.Series.arg_unique": [[641, "polars-series-arg-unique"]], "polars.Series.argsort": [[642, "polars-series-argsort"]], "polars.Series.arr.tail": [[665, "polars-series-arr-tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[616, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arr.head": [[653, "polars-series-arr-head"]], "polars.Series.alias": [[626, "polars-series-alias"]], "polars.Series.arr": [[643, "polars-series-arr"]], "polars.Series.arr.contains": [[647, "polars-series-arr-contains"]], "polars.Series.arr.explode": [[650, "polars-series-arr-explode"]], "polars.LazyFrame.unnest": [[606, "polars-lazyframe-unnest"]], "polars.Series.all": [[627, "polars-series-all"]], "polars.Series.arctanh": [[636, "polars-series-arctanh"]], "LazyFrame": [[621, "lazyframe"]], "polars.Series.arr.sort": [[663, "polars-series-arr-sort"]], "polars.Series.arcsin": [[633, "polars-series-arcsin"]], "polars.LazyFrame.with_columns": [[610, "polars-lazyframe-with-columns"]], "polars.Series.arr.get": [[652, "polars-series-arr-get"]], "polars.Series.arr.shift": [[661, "polars-series-arr-shift"]], "polars.Series.arr.take": [[666, "polars-series-arr-take"]], "GroupBy": [[620, "groupby"], [236, "groupby"]], "polars.Series.apply": [[630, "polars-series-apply"]], "polars.Series.arg_max": [[637, "polars-series-arg-max"]], "Read/write logical plan": [[622, "read-write-logical-plan"]], "polars.Series.arcsinh": [[634, "polars-series-arcsinh"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[615, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.abs": [[625, "polars-series-abs"]], "polars.Series.arr.sum": [[664, "polars-series-arr-sum"]], "polars.Series.arr.eval": [[649, "polars-series-arr-eval"]], "polars.Series.arr.mean": [[658, "polars-series-arr-mean"]], "polars.Series.append": [[629, "polars-series-append"]], "polars.Series.arg_true": [[640, "polars-series-arg-true"]], "polars.Series.arr.concat": [[646, "polars-series-arr-concat"]], "polars.Series.arr.join": [[654, "polars-series-arr-join"]], "polars.Series.arr.lengths": [[656, "polars-series-arr-lengths"]], "polars.Series.arr.slice": [[662, "polars-series-arr-slice"]], "polars.LazyFrame.tail": [[603, "polars-lazyframe-tail"]], "polars.LazyFrame.take_every": [[604, "polars-lazyframe-take-every"]], "polars.Series.any": [[628, "polars-series-any"]], "polars.Series.arr.last": [[655, "polars-series-arr-last"]], "polars.Series.bin.contains": [[669, "polars-series-bin-contains"]], "polars.quantile": [[521, "polars-quantile"]], "polars.list": [[512, "polars-list"]], "polars.var": [[530, "polars-var"]], "polars.col": [[493, "polars-col"]], "polars.pearson_corr": [[520, "polars-pearson-corr"]], "polars.format": [[508, "polars-format"]], "polars.mean": [[516, "polars-mean"]], "polars.struct": [[527, "polars-struct"]], "polars.cumreduce": [[499, "polars-cumreduce"]], "polars.max": [[515, "polars-max"]], "polars.when": [[531, "polars-when"]], "polars.count": [[496, "polars-count"]], "polars.Expr.unique_counts": [[481, "polars-expr-unique-counts"]], "polars.duration": [[503, "polars-duration"]], "polars.median": [[517, "polars-median"]], "polars.map": [[514, "polars-map"]], "polars.tail": [[529, "polars-tail"]], "polars.avg": [[491, "polars-avg"]], "polars.concat_str": [[495, "polars-concat-str"]], "polars.cumsum": [[500, "polars-cumsum"]], "polars.min": [[518, "polars-min"]], "polars.Expr.take": [[474, "polars-expr-take"]], "polars.repeat": [[523, "polars-repeat"]], "polars.apply": [[488, "polars-apply"]], "polars.arange": [[489, "polars-arange"]], "polars.coalesce": [[492, "polars-coalesce"]], "polars.Expr.suffix": [[471, "polars-expr-suffix"]], "polars.date": [[501, "polars-date"]], "polars.cov": [[497, "polars-cov"]], "polars.Expr.var": [[484, "polars-expr-var"]], "polars.arg_sort_by": [[490, "polars-arg-sort-by"]], "polars.Expr.unique": [[480, "polars-expr-unique"]], "polars.lit": [[513, "polars-lit"]], "polars.Expr.value_counts": [[483, "polars-expr-value-counts"]], "polars.all": [[486, "polars-all"]], "polars.Expr.struct.rename_fields": [[470, "polars-expr-struct-rename-fields"]], "polars.Expr.to_physical": [[478, "polars-expr-to-physical"]], "polars.select": [[524, "polars-select"]], "polars.Expr.top_k": [[479, "polars-expr-top-k"]], "polars.concat_list": [[494, "polars-concat-list"]], "polars.from_epoch": [[509, "polars-from-epoch"]], "polars.groups": [[510, "polars-groups"]], "polars.fold": [[507, "polars-fold"]], "polars.Expr.tail": [[473, "polars-expr-tail"]], "polars.Expr.sum": [[472, "polars-expr-sum"]], "polars.Expr.struct.field": [[469, "polars-expr-struct-field"]], "polars.Expr.take_every": [[475, "polars-expr-take-every"]], "polars.head": [[511, "polars-head"]], "polars.sum": [[528, "polars-sum"]], "polars.cumfold": [[498, "polars-cumfold"]], "polars.Expr.where": [[485, "polars-expr-where"]], "polars.n_unique": [[519, "polars-n-unique"]], "polars.reduce": [[522, "polars-reduce"]], "polars.Expr.tanh": [[477, "polars-expr-tanh"]], "polars.exclude": [[505, "polars-exclude"]], "polars.element": [[504, "polars-element"]], "polars.any": [[487, "polars-any"]], "polars.datetime": [[502, "polars-datetime"]], "polars.Expr.upper_bound": [[482, "polars-expr-upper-bound"]], "polars.first": [[506, "polars-first"]], "polars.spearman_rank_corr": [[525, "polars-spearman-rank-corr"]], "polars.std": [[526, "polars-std"]], "polars.Expr.tan": [[476, "polars-expr-tan"]], "polars.Expr.str.rjust": [[457, "polars-expr-str-rjust"]], "polars.Expr.sort_by": [[437, "polars-expr-sort-by"]], "polars.Expr.rolling_median": [[416, "polars-expr-rolling-median"]], "polars.Expr.shrink_dtype": [[429, "polars-expr-shrink-dtype"]], "polars.Expr.shift_and_fill": [[428, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_apply": [[413, "polars-expr-rolling-apply"]], "polars.Expr.reverse": [[412, "polars-expr-reverse"]], "polars.Expr.std": [[439, "polars-expr-std"]], "polars.Expr.str.strip": [[464, "polars-expr-str-strip"]], "polars.Expr.sign": [[431, "polars-expr-sign"]], "polars.Expr.str.extract_all": [[448, "polars-expr-str-extract-all"]], "polars.Expr.str.lengths": [[450, "polars-expr-str-lengths"]], "polars.Expr.str.splitn": [[462, "polars-expr-str-splitn"]], "polars.Expr.sqrt": [[438, "polars-expr-sqrt"]], "polars.Expr.prefix": [[404, "polars-expr-prefix"]], "polars.Expr.rolling_mean": [[415, "polars-expr-rolling-mean"]], "polars.Expr.slice": [[435, "polars-expr-slice"]], "polars.Expr.str.to_lowercase": [[466, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_sum": [[421, "polars-expr-rolling-sum"]], "polars.Expr.pct_change": [[402, "polars-expr-pct-change"]], "polars.Expr.str.concat": [[440, "polars-expr-str-concat"]], "polars.Expr.sinh": [[433, "polars-expr-sinh"]], "polars.Expr.str.rstrip": [[458, "polars-expr-str-rstrip"]], "polars.Expr.str.explode": [[446, "polars-expr-str-explode"]], "polars.Expr.rolling_skew": [[419, "polars-expr-rolling-skew"]], "polars.Expr.pow": [[403, "polars-expr-pow"]], "polars.Expr.rolling_std": [[420, "polars-expr-rolling-std"]], "polars.Expr.str.encode": [[444, "polars-expr-str-encode"]], "polars.Expr.str.replace": [[455, "polars-expr-str-replace"]], "polars.Expr.shuffle": [[430, "polars-expr-shuffle"]], "polars.Expr.str.contains": [[441, "polars-expr-str-contains"]], "polars.Expr.str.count_match": [[442, "polars-expr-str-count-match"]], "polars.Expr.quantile": [[406, "polars-expr-quantile"]], "polars.Expr.search_sorted": [[425, "polars-expr-search-sorted"]], "polars.Expr.product": [[405, "polars-expr-product"]], "polars.Expr.skew": [[434, "polars-expr-skew"]], "polars.Expr.str.lstrip": [[452, "polars-expr-str-lstrip"]], "polars.Expr.str.strptime": [[465, "polars-expr-str-strptime"]], "polars.Expr.str.to_uppercase": [[467, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_var": [[422, "polars-expr-rolling-var"]], "polars.Expr.rechunk": [[408, "polars-expr-rechunk"]], "polars.Expr.sin": [[432, "polars-expr-sin"]], "polars.Expr.str.split": [[460, "polars-expr-str-split"]], "polars.Expr.rank": [[407, "polars-expr-rank"]], "polars.Expr.rolling_max": [[414, "polars-expr-rolling-max"]], "polars.Expr.str.split_exact": [[461, "polars-expr-str-split-exact"]], "polars.Expr.rolling_min": [[417, "polars-expr-rolling-min"]], "polars.Expr.sort": [[436, "polars-expr-sort"]], "polars.Expr.round": [[423, "polars-expr-round"]], "polars.Expr.str.decode": [[443, "polars-expr-str-decode"]], "polars.Expr.sample": [[424, "polars-expr-sample"]], "polars.Expr.shift": [[427, "polars-expr-shift"]], "polars.Expr.str.starts_with": [[463, "polars-expr-str-starts-with"]], "polars.Expr.str.replace_all": [[456, "polars-expr-str-replace-all"]], "polars.Expr.str.zfill": [[468, "polars-expr-str-zfill"]], "polars.Expr.str.ends_with": [[445, "polars-expr-str-ends-with"]], "polars.Expr.repeat_by": [[410, "polars-expr-repeat-by"]], "polars.Expr.rolling_quantile": [[418, "polars-expr-rolling-quantile"]], "polars.Expr.str.extract": [[447, "polars-expr-str-extract"]], "polars.Expr.str.parse_int": [[454, "polars-expr-str-parse-int"]], "polars.Expr.set_sorted": [[426, "polars-expr-set-sorted"]], "polars.Expr.str.ljust": [[451, "polars-expr-str-ljust"]], "polars.Expr.str.n_chars": [[453, "polars-expr-str-n-chars"]], "polars.Expr.reshape": [[411, "polars-expr-reshape"]], "polars.Expr.reinterpret": [[409, "polars-expr-reinterpret"]], "polars.Expr.str.json_path_match": [[449, "polars-expr-str-json-path-match"]], "polars.Expr.str.slice": [[459, "polars-expr-str-slice"]], "polars.Expr.exp": [[348, "polars-expr-exp"]], "polars.Expr.null_count": [[400, "polars-expr-null-count"]], "polars.Expr.ewm_mean": [[344, "polars-expr-ewm-mean"]], "polars.Expr.is_not_nan": [[370, "polars-expr-is-not-nan"]], "polars.Expr.meta.is_regex_projection": [[390, "polars-expr-meta-is-regex-projection"]], "polars.Expr.fill_nan": [[351, "polars-expr-fill-nan"]], "polars.Expr.map_alias": [[384, "polars-expr-map-alias"]], "polars.Expr.dt.year": [[342, "polars-expr-dt-year"]], "polars.Expr.kurtosis": [[375, "polars-expr-kurtosis"]], "polars.Expr.dt.truncate": [[338, "polars-expr-dt-truncate"]], "polars.Expr.inspect": [[360, "polars-expr-inspect"]], "polars.Expr.meta.pop": [[392, "polars-expr-meta-pop"]], "polars.Expr.meta.undo_aliases": [[394, "polars-expr-meta-undo-aliases"]], "polars.Expr.exclude": [[347, "polars-expr-exclude"]], "polars.Expr.is_nan": [[368, "polars-expr-is-nan"]], "polars.Expr.dt.with_time_unit": [[341, "polars-expr-dt-with-time-unit"]], "polars.Expr.first": [[354, "polars-expr-first"]], "polars.Expr.interpolate": [[361, "polars-expr-interpolate"]], "polars.Expr.keep_name": [[374, "polars-expr-keep-name"]], "polars.Expr.meta.root_names": [[393, "polars-expr-meta-root-names"]], "polars.Expr.limit": [[378, "polars-expr-limit"]], "polars.Expr.meta.has_multiple_outputs": [[389, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.ewm_std": [[345, "polars-expr-ewm-std"]], "polars.Expr.is_unique": [[373, "polars-expr-is-unique"]], "polars.Expr.is_infinite": [[367, "polars-expr-is-infinite"]], "polars.Expr.dt.strftime": [[336, "polars-expr-dt-strftime"]], "polars.Expr.dt.weekday": [[340, "polars-expr-dt-weekday"]], "polars.Expr.entropy": [[343, "polars-expr-entropy"]], "polars.Expr.is_duplicated": [[363, "polars-expr-is-duplicated"]], "polars.Expr.is_null": [[372, "polars-expr-is-null"]], "polars.Expr.median": [[388, "polars-expr-median"]], "polars.Expr.max": [[386, "polars-expr-max"]], "polars.Expr.is_not": [[369, "polars-expr-is-not"]], "polars.Expr.flatten": [[355, "polars-expr-flatten"]], "polars.Expr.nan_min": [[399, "polars-expr-nan-min"]], "polars.Expr.fill_null": [[352, "polars-expr-fill-null"]], "polars.Expr.n_unique": [[397, "polars-expr-n-unique"]], "polars.Expr.hash": [[358, "polars-expr-hash"]], "polars.Expr.list": [[379, "polars-expr-list"]], "polars.Expr.extend_constant": [[350, "polars-expr-extend-constant"]], "polars.Expr.is_not_null": [[371, "polars-expr-is-not-null"]], "polars.Expr.lower_bound": [[382, "polars-expr-lower-bound"]], "polars.Expr.len": [[377, "polars-expr-len"]], "polars.Expr.last": [[376, "polars-expr-last"]], "polars.Expr.explode": [[349, "polars-expr-explode"]], "polars.Expr.log": [[380, "polars-expr-log"]], "polars.Expr.min": [[395, "polars-expr-min"]], "polars.Expr.mode": [[396, "polars-expr-mode"]], "polars.Expr.nan_max": [[398, "polars-expr-nan-max"]], "polars.Expr.forward_fill": [[357, "polars-expr-forward-fill"]], "polars.Expr.floor": [[356, "polars-expr-floor"]], "polars.Expr.dt.seconds": [[335, "polars-expr-dt-seconds"]], "polars.Expr.is_between": [[362, "polars-expr-is-between"]], "polars.Expr.mean": [[387, "polars-expr-mean"]], "polars.Expr.is_in": [[366, "polars-expr-is-in"]], "polars.Expr.is_first": [[365, "polars-expr-is-first"]], "polars.Expr.is_finite": [[364, "polars-expr-is-finite"]], "polars.Expr.map_dict": [[385, "polars-expr-map-dict"]], "polars.Expr.log10": [[381, "polars-expr-log10"]], "polars.Expr.dt.week": [[339, "polars-expr-dt-week"]], "polars.Expr.meta.output_name": [[391, "polars-expr-meta-output-name"]], "polars.Expr.over": [[401, "polars-expr-over"]], "polars.Expr.map": [[383, "polars-expr-map"]], "polars.Expr.head": [[359, "polars-expr-head"]], "polars.Expr.ewm_var": [[346, "polars-expr-ewm-var"]], "polars.Expr.filter": [[353, "polars-expr-filter"]], "polars.Expr.dt.timestamp": [[337, "polars-expr-dt-timestamp"]], "Functions": [[538, "functions"], [547, "functions"], [240, "functions"]], "polars.LazyFrame.map": [[579, "polars-lazyframe-map"]], "polars.LazyFrame.drop": [[558, "polars-lazyframe-drop"]], "polars.LazyFrame.dtypes": [[560, "polars-lazyframe-dtypes"]], "polars.LazyFrame.last": [[576, "polars-lazyframe-last"]], "polars.LazyFrame.fetch": [[562, "polars-lazyframe-fetch"]], "polars.LazyFrame.groupby": [[568, "polars-lazyframe-groupby"]], "Input/output": [[549, "input-output"]], "CSV": [[549, "csv"]], "Feather/ IPC": [[549, "feather-ipc"]], "Parquet": [[549, "parquet"]], "JSON": [[549, "json"]], "AVRO": [[549, "avro"]], "Excel": [[549, "excel"]], "Delta Lake": [[549, "delta-lake"]], "Datasets": [[549, "datasets"]], "BatchedCsvReader": [[549, "batchedcsvreader"]], "polars.LazyFrame.rename": [[590, "polars-lazyframe-rename"]], "Conversion": [[547, "conversion"]], "Eager/Lazy functions": [[547, "eager-lazy-functions"]], "Parallelization": [[547, "parallelization"]], "StringCache": [[547, "stringcache"]], "polars.LazyFrame.select": [[593, "polars-lazyframe-select"]], "polars.LazyFrame.groupby_dynamic": [[569, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.shift": [[594, "polars-lazyframe-shift"]], "polars.LazyFrame.std": [[601, "polars-lazyframe-std"]], "polars.LazyFrame.max": [[580, "polars-lazyframe-max"]], "Meta": [[540, "meta"]], "Columns / names": [[536, "columns-names"]], "polars.LazyFrame.filter": [[565, "polars-lazyframe-filter"]], "polars.LazyFrame.collect": [[554, "polars-lazyframe-collect"]], "polars.LazyFrame.min": [[585, "polars-lazyframe-min"]], "polars.LazyFrame.sink_parquet": [[598, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.sink_ipc": [[597, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.first": [[566, "polars-lazyframe-first"]], "polars.LazyFrame.columns": [[555, "polars-lazyframe-columns"]], "polars.LazyFrame.describe_plan": [[557, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.pipe": [[586, "polars-lazyframe-pipe"]], "polars.LazyFrame.head": [[571, "polars-lazyframe-head"]], "polars.LazyFrame.describe_optimized_plan": [[556, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.cache": [[551, "polars-lazyframe-cache"]], "polars.LazyFrame.melt": [[583, "polars-lazyframe-melt"]], "polars.LazyFrame.quantile": [[588, "polars-lazyframe-quantile"]], "polars.LazyFrame.explode": [[561, "polars-lazyframe-explode"]], "polars.LazyFrame.from_json": [[567, "polars-lazyframe-from-json"]], "polars.LazyFrame.cleared": [[552, "polars-lazyframe-cleared"]], "polars.LazyFrame.profile": [[587, "polars-lazyframe-profile"]], "polars.LazyFrame.sum": [[602, "polars-lazyframe-sum"]], "polars.LazyFrame.schema": [[592, "polars-lazyframe-schema"]], "polars.LazyFrame.drop_nulls": [[559, "polars-lazyframe-drop-nulls"]], "Window": [[546, "window"]], "polars.LazyFrame.groupby_rolling": [[570, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.limit": [[578, "polars-lazyframe-limit"]], "Expressions": [[539, "expressions"]], "polars.LazyFrame.fill_nan": [[563, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.read_json": [[589, "polars-lazyframe-read-json"]], "polars.LazyFrame.reverse": [[591, "polars-lazyframe-reverse"]], "polars.LazyFrame.inspect": [[572, "polars-lazyframe-inspect"]], "polars.LazyFrame.fill_null": [[564, "polars-lazyframe-fill-null"]], "polars.LazyFrame.clone": [[553, "polars-lazyframe-clone"]], "API reference": [[548, "api-reference"]], "polars.LazyFrame.slice": [[599, "polars-lazyframe-slice"]], "polars.LazyFrame.shift_and_fill": [[595, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.lazy": [[577, "polars-lazyframe-lazy"]], "polars.LazyFrame.show_graph": [[596, "polars-lazyframe-show-graph"]], "polars.LazyFrame.join": [[574, "polars-lazyframe-join"]], "polars.LazyFrame.merge_sorted": [[584, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.mean": [[581, "polars-lazyframe-mean"]], "polars.LazyFrame.median": [[582, "polars-lazyframe-median"]], "polars.LazyFrame.interpolate": [[573, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[575, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sort": [[600, "polars-lazyframe-sort"]], "polars.Expr.arr.max": [[274, "polars-expr-arr-max"]], "polars.Expr.dt.nanoseconds": [[328, "polars-expr-dt-nanoseconds"]], "polars.Expr.cat.set_ordering": [[293, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.take": [[283, "polars-expr-arr-take"]], "polars.Expr.count": [[300, "polars-expr-count"]], "polars.Expr.diff": [[307, "polars-expr-diff"]], "polars.Expr.dt.day": [[314, "polars-expr-dt-day"]], "polars.Expr.arr.join": [[271, "polars-expr-arr-join"]], "polars.Expr.dt.ordinal_day": [[330, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.last": [[272, "polars-expr-arr-last"]], "polars.Expr.ceil": [[294, "polars-expr-ceil"]], "polars.Expr.arr.sort": [[280, "polars-expr-arr-sort"]], "polars.Expr.arr.lengths": [[273, "polars-expr-arr-lengths"]], "polars.Expr.arr.min": [[276, "polars-expr-arr-min"]], "polars.Expr.arr.tail": [[282, "polars-expr-arr-tail"]], "polars.Expr.dt.cast_time_unit": [[311, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.slice": [[279, "polars-expr-arr-slice"]], "polars.Expr.dt.microsecond": [[320, "polars-expr-dt-microsecond"]], "polars.Expr.arr.unique": [[285, "polars-expr-arr-unique"]], "polars.Expr.arr.reverse": [[277, "polars-expr-arr-reverse"]], "polars.Expr.clip": [[295, "polars-expr-clip"]], "polars.Expr.clip_min": [[297, "polars-expr-clip-min"]], "polars.Expr.arr.sum": [[281, "polars-expr-arr-sum"]], "polars.Expr.bin.starts_with": [[291, "polars-expr-bin-starts-with"]], "polars.Expr.cummax": [[302, "polars-expr-cummax"]], "polars.Expr.dt.round": [[333, "polars-expr-dt-round"]], "polars.Expr.dt.second": [[334, "polars-expr-dt-second"]], "polars.Expr.dt.combine": [[312, "polars-expr-dt-combine"]], "polars.Expr.clip_max": [[296, "polars-expr-clip-max"]], "polars.Expr.dt.microseconds": [[321, "polars-expr-dt-microseconds"]], "polars.Expr.backward_fill": [[286, "polars-expr-backward-fill"]], "polars.Expr.dt.minute": [[324, "polars-expr-dt-minute"]], "polars.Expr.cos": [[298, "polars-expr-cos"]], "polars.Expr.dt.convert_time_zone": [[313, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cummin": [[303, "polars-expr-cummin"]], "polars.Expr.bin.decode": [[288, "polars-expr-bin-decode"]], "polars.Expr.dt.days": [[315, "polars-expr-dt-days"]], "polars.Expr.dt.replace_time_zone": [[332, "polars-expr-dt-replace-time-zone"]], "polars.Expr.cumcount": [[301, "polars-expr-cumcount"]], "polars.Expr.bin.ends_with": [[290, "polars-expr-bin-ends-with"]], "polars.Expr.dt.epoch": [[316, "polars-expr-dt-epoch"]], "polars.Expr.arr.to_struct": [[284, "polars-expr-arr-to-struct"]], "polars.Expr.drop_nans": [[309, "polars-expr-drop-nans"]], "polars.Expr.dt.hours": [[318, "polars-expr-dt-hours"]], "polars.Expr.bin.contains": [[287, "polars-expr-bin-contains"]], "polars.Expr.dt.quarter": [[331, "polars-expr-dt-quarter"]], "polars.Expr.arr.mean": [[275, "polars-expr-arr-mean"]], "polars.Expr.dt.iso_year": [[319, "polars-expr-dt-iso-year"]], "polars.Expr.arr.shift": [[278, "polars-expr-arr-shift"]], "polars.Expr.dot": [[308, "polars-expr-dot"]], "polars.Expr.dt.millisecond": [[322, "polars-expr-dt-millisecond"]], "polars.Expr.dt.nanosecond": [[327, "polars-expr-dt-nanosecond"]], "polars.Expr.cumulative_eval": [[306, "polars-expr-cumulative-eval"]], "polars.Expr.dt.milliseconds": [[323, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month": [[326, "polars-expr-dt-month"]], "polars.Expr.cumsum": [[305, "polars-expr-cumsum"]], "polars.Expr.arr.get": [[269, "polars-expr-arr-get"]], "polars.Expr.cosh": [[299, "polars-expr-cosh"]], "polars.Expr.drop_nulls": [[310, "polars-expr-drop-nulls"]], "polars.Expr.bin.encode": [[289, "polars-expr-bin-encode"]], "polars.Expr.arr.first": [[268, "polars-expr-arr-first"]], "polars.Expr.dt.offset_by": [[329, "polars-expr-dt-offset-by"]], "polars.Expr.arr.head": [[270, "polars-expr-arr-head"]], "polars.Expr.dt.hour": [[317, "polars-expr-dt-hour"]], "polars.Expr.cast": [[292, "polars-expr-cast"]], "polars.Expr.dt.minutes": [[325, "polars-expr-dt-minutes"]], "polars.Expr.cumprod": [[304, "polars-expr-cumprod"]], "polars.DataFrame.iter_slices": [[157, "polars-dataframe-iter-slices"]], "polars.DataFrame.groupby_rolling": [[145, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.schema": [[185, "polars-dataframe-schema"]], "polars.DataFrame.std": [[193, "polars-dataframe-std"]], "polars.DataFrame.iter_rows": [[156, "polars-dataframe-iter-rows"]], "polars.DataFrame.sort": [[192, "polars-dataframe-sort"]], "polars.DataFrame.reverse": [[181, "polars-dataframe-reverse"]], "polars.DataFrame.sample": [[184, "polars-dataframe-sample"]], "polars.DataFrame.take_every": [[196, "polars-dataframe-take-every"]], "polars.DataFrame.partition_by": [[171, "polars-dataframe-partition-by"]], "polars.DataFrame.shrink_to_fit": [[190, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.n_chunks": [[168, "polars-dataframe-n-chunks"]], "polars.DataFrame.insert_at_idx": [[150, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.pearson_corr": [[172, "polars-dataframe-pearson-corr"]], "polars.DataFrame.item": [[155, "polars-dataframe-item"]], "polars.DataFrame.select": [[186, "polars-dataframe-select"]], "polars.DataFrame.fold": [[138, "polars-dataframe-fold"]], "polars.DataFrame.fill_nan": [[134, "polars-dataframe-fill-nan"]], "polars.DataFrame.glimpse": [[142, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby": [[143, "polars-dataframe-groupby"]], "polars.DataFrame.interpolate": [[151, "polars-dataframe-interpolate"]], "polars.DataFrame.n_unique": [[169, "polars-dataframe-n-unique"]], "polars.DataFrame.null_count": [[170, "polars-dataframe-null-count"]], "polars.DataFrame.pivot": [[174, "polars-dataframe-pivot"]], "polars.DataFrame.replace": [[179, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[180, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_dicts": [[199, "polars-dataframe-to-dicts"]], "polars.DataFrame.min": [[167, "polars-dataframe-min"]], "polars.DataFrame.sum": [[194, "polars-dataframe-sum"]], "polars.DataFrame.head": [[147, "polars-dataframe-head"]], "polars.DataFrame.hash_rows": [[146, "polars-dataframe-hash-rows"]], "polars.DataFrame.to_dict": [[198, "polars-dataframe-to-dict"]], "polars.DataFrame.rows": [[183, "polars-dataframe-rows"]], "polars.DataFrame.is_duplicated": [[152, "polars-dataframe-is-duplicated"]], "polars.DataFrame.limit": [[161, "polars-dataframe-limit"]], "polars.DataFrame.mean": [[163, "polars-dataframe-mean"]], "polars.DataFrame.hstack": [[149, "polars-dataframe-hstack"]], "polars.DataFrame.frame_equal": [[139, "polars-dataframe-frame-equal"]], "polars.DataFrame.quantile": [[176, "polars-dataframe-quantile"]], "polars.DataFrame.shift": [[188, "polars-dataframe-shift"]], "polars.DataFrame.shift_and_fill": [[189, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.median": [[164, "polars-dataframe-median"]], "polars.DataFrame.product": [[175, "polars-dataframe-product"]], "polars.DataFrame.to_arrow": [[197, "polars-dataframe-to-arrow"]], "polars.DataFrame.join": [[158, "polars-dataframe-join"]], "polars.DataFrame.row": [[182, "polars-dataframe-row"]], "polars.DataFrame.max": [[162, "polars-dataframe-max"]], "polars.DataFrame.merge_sorted": [[166, "polars-dataframe-merge-sorted"]], "polars.DataFrame.slice": [[191, "polars-dataframe-slice"]], "polars.DataFrame.fill_null": [[135, "polars-dataframe-fill-null"]], "polars.DataFrame.join_asof": [[159, "polars-dataframe-join-asof"]], "polars.DataFrame.groupby_dynamic": [[144, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.melt": [[165, "polars-dataframe-melt"]], "polars.DataFrame.is_empty": [[153, "polars-dataframe-is-empty"]], "polars.DataFrame.pipe": [[173, "polars-dataframe-pipe"]], "polars.DataFrame.shape": [[187, "polars-dataframe-shape"]], "polars.DataFrame.get_column": [[140, "polars-dataframe-get-column"]], "polars.DataFrame.rename": [[178, "polars-dataframe-rename"]], "polars.DataFrame.get_columns": [[141, "polars-dataframe-get-columns"]], "polars.DataFrame.tail": [[195, "polars-dataframe-tail"]], "polars.DataFrame.is_unique": [[154, "polars-dataframe-is-unique"]], "polars.DataFrame.lazy": [[160, "polars-dataframe-lazy"]], "polars.DataFrame.filter": [[136, "polars-dataframe-filter"]], "polars.DataFrame.find_idx_by_name": [[137, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.height": [[148, "polars-dataframe-height"]], "polars.DataFrame.rechunk": [[177, "polars-dataframe-rechunk"]], "polars.DataFrame.to_dummies": [[200, "polars-dataframe-to-dummies"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[219, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[225, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.last": [[223, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.update": [[209, "polars-dataframe-update"]], "polars.Expr.arccosh": [[251, "polars-expr-arccosh"]], "polars.Expr.arctan": [[254, "polars-expr-arctan"]], "polars.DataFrame.var": [[211, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[228, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arr.eval": [[266, "polars-expr-arr-eval"]], "polars.internals.dataframe.groupby.GroupBy.head": [[222, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.arg_unique": [[259, "polars-expr-arg-unique"]], "polars.Expr.arg_sort": [[258, "polars-expr-arg-sort"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[230, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.apply": [[249, "polars-expr-apply"]], "polars.Expr.arg_min": [[257, "polars-expr-arg-min"]], "polars.Expr.arr.arg_min": [[262, "polars-expr-arr-arg-min"]], "Exceptions": [[241, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[216, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[217, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arg_max": [[256, "polars-expr-arg-max"]], "polars.Expr.all": [[246, "polars-expr-all"]], "polars.Expr.arr.explode": [[267, "polars-expr-arr-explode"]], "polars.Expr.append": [[248, "polars-expr-append"]], "polars.Expr.arccos": [[250, "polars-expr-arccos"]], "polars.Expr.abs": [[243, "polars-expr-abs"]], "polars.DataFrame.unique": [[206, "polars-dataframe-unique"]], "polars.Expr.arr.diff": [[265, "polars-expr-arr-diff"]], "polars.Expr.arcsinh": [[253, "polars-expr-arcsinh"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[231, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.DataFrame.to_pandas": [[202, "polars-dataframe-to-pandas"]], "polars.DataFrame.upsample": [[210, "polars-dataframe-upsample"]], "polars.DataFrame.unstack": [[208, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.count": [[220, "polars-internals-dataframe-groupby-groupby-count"]], "DataFrame": [[237, "dataframe"]], "polars.Expr.arr.arg_max": [[261, "polars-expr-arr-arg-max"]], "polars.DataFrame.to_struct": [[204, "polars-dataframe-to-struct"]], "polars.Expr.agg_groups": [[244, "polars-expr-agg-groups"]], "polars.internals.dataframe.groupby.GroupBy.max": [[224, "polars-internals-dataframe-groupby-groupby-max"]], "polars.DataFrame.unnest": [[207, "polars-dataframe-unnest"]], "polars.Expr.alias": [[245, "polars-expr-alias"]], "polars.Expr.arr.contains": [[264, "polars-expr-arr-contains"]], "polars.internals.dataframe.groupby.GroupBy.first": [[221, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.arctanh": [[255, "polars-expr-arctanh"]], "polars.DataFrame.vstack": [[212, "polars-dataframe-vstack"]], "polars.DataFrame.with_row_count": [[215, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.min": [[227, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[229, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.arcsin": [[252, "polars-expr-arcsin"]], "Data types": [[240, "data-types"]], "Numeric": [[240, "numeric"]], "Date / Time": [[240, "date-time"]], "Nested": [[240, "nested"]], "Other": [[240, "other"]], "polars.Expr.argsort": [[260, "polars-expr-argsort"]], "polars.DataFrame.width": [[213, "polars-dataframe-width"]], "polars.Expr.arr.concat": [[263, "polars-expr-arr-concat"]], "polars.Expr.any": [[247, "polars-expr-any"]], "polars.DataFrame.to_numpy": [[201, "polars-dataframe-to-numpy"]], "polars.DataFrame.with_columns": [[214, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.all": [[218, "polars-internals-dataframe-groupby-groupby-all"]], "polars.DataFrame.to_series": [[203, "polars-dataframe-to-series"]], "polars.internals.dataframe.groupby.GroupBy.median": [[226, "polars-internals-dataframe-groupby-groupby-median"]], "polars.DataFrame.transpose": [[205, "polars-dataframe-transpose"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[26, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[27, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[28, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[29, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[30, "polars.DataType"]], "__init__() (polars.datatype method)": [[30, "polars.DataType.__init__"]], "date (class in polars)": [[31, "polars.Date"]], "__init__() (polars.date method)": [[31, "polars.Date.__init__"]], "datetime (class in polars)": [[32, "polars.Datetime"]], "__init__() (polars.datetime method)": [[32, "polars.Datetime.__init__"]], "duration (class in polars)": [[33, "polars.Duration"]], "__init__() (polars.duration method)": [[33, "polars.Duration.__init__"]], "float32 (class in polars)": [[34, "polars.Float32"]], "__init__() (polars.float32 method)": [[34, "polars.Float32.__init__"]], "float64 (class in polars)": [[35, "polars.Float64"]], "__init__() (polars.float64 method)": [[35, "polars.Float64.__init__"]], "int16 (class in polars)": [[36, "polars.Int16"]], "__init__() (polars.int16 method)": [[36, "polars.Int16.__init__"]], "int32 (class in polars)": [[37, "polars.Int32"]], "__init__() (polars.int32 method)": [[37, "polars.Int32.__init__"]], "int64 (class in polars)": [[38, "polars.Int64"]], "__init__() (polars.int64 method)": [[38, "polars.Int64.__init__"]], "int8 (class in polars)": [[39, "polars.Int8"]], "__init__() (polars.int8 method)": [[39, "polars.Int8.__init__"]], "list (class in polars)": [[40, "polars.List"]], "__init__() (polars.list method)": [[40, "polars.List.__init__"]], "null (class in polars)": [[41, "polars.Null"]], "__init__() (polars.null method)": [[41, "polars.Null.__init__"]], "object (class in polars)": [[42, "polars.Object"]], "__init__() (polars.object method)": [[42, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[43, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[44, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[45, "polars.SQLContext.register"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "struct (class in polars)": [[47, "polars.Struct"]], "__init__() (polars.struct method)": [[47, "polars.Struct.__init__"]], "time (class in polars)": [[48, "polars.Time"]], "__init__() (polars.time method)": [[48, "polars.Time.__init__"]], "uint16 (class in polars)": [[49, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[49, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[50, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[50, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[51, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[51, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[52, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[52, "polars.UInt8.__init__"]], "unknown (class in polars)": [[53, "polars.Unknown"]], "__init__() (polars.unknown method)": [[53, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[54, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[54, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[55, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[56, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[57, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[58, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[59, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[60, "polars.arg_where"]], "build_info() (in module polars)": [[61, "polars.build_info"]], "collect_all() (in module polars)": [[62, "polars.collect_all"]], "concat() (in module polars)": [[63, "polars.concat"]], "cut() (in module polars)": [[64, "polars.cut"]], "date_range() (in module polars)": [[65, "polars.date_range"]], "arrowerror": [[66, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[67, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[68, "polars.exceptions.ComputeError"]], "duplicateerror": [[69, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[70, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[71, "polars.exceptions.NoDataError"]], "norowsreturned": [[72, "polars.exceptions.NoRowsReturned"]], "panicexception": [[73, "polars.exceptions.PanicException"]], "rowsexception": [[74, "polars.exceptions.RowsException"]], "schemaerror": [[75, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[76, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[77, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[78, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[79, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[80, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[81, "polars.from_dataframe"]], "from_dict() (in module polars)": [[82, "polars.from_dict"]], "from_dicts() (in module polars)": [[83, "polars.from_dicts"]], "from_numpy() (in module polars)": [[84, "polars.from_numpy"]], "from_pandas() (in module polars)": [[85, "polars.from_pandas"]], "from_records() (in module polars)": [[86, "polars.from_records"]], "get_dummies() (in module polars)": [[87, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[88, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[89, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[90, "polars.ones"]], "read_avro() (in module polars)": [[91, "polars.read_avro"]], "read_csv() (in module polars)": [[92, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[93, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[94, "polars.read_delta"]], "read_excel() (in module polars)": [[95, "polars.read_excel"]], "read_ipc() (in module polars)": [[96, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[97, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[98, "polars.read_json"]], "read_ndjson() (in module polars)": [[99, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[100, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[101, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[102, "polars.read_sql"]], "scan_csv() (in module polars)": [[103, "polars.scan_csv"]], "scan_delta() (in module polars)": [[104, "polars.scan_delta"]], "scan_ds() (in module polars)": [[105, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[106, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[107, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[108, "polars.scan_parquet"]], "show_versions() (in module polars)": [[109, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[110, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[111, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[112, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[112, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[113, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[114, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[115, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[116, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[117, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[118, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[121, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[122, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[123, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[124, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[125, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[126, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[127, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[128, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[129, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[130, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[131, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[132, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[133, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[134, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[135, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[136, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[137, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[138, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[139, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[140, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[141, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[142, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[143, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[144, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[145, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[146, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[147, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[148, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[149, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[150, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[151, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[152, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[153, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[154, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[155, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[156, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[157, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[158, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[159, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[160, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[161, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[162, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[163, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[164, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[165, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[166, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[167, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[168, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[169, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[170, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[171, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[172, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[173, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[174, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[175, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[176, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[177, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[178, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[179, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[180, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[181, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[182, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[183, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[184, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[185, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[186, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[187, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[188, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[189, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[190, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[191, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[192, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[193, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[194, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[195, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[196, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[197, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[198, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[199, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[200, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[201, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[202, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[203, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[204, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[205, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[206, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[207, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[208, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[209, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[210, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[211, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[212, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[213, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[214, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[215, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[243, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[244, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[245, "polars.Expr.alias"]], "all() (polars.expr method)": [[246, "polars.Expr.all"]], "any() (polars.expr method)": [[247, "polars.Expr.any"]], "append() (polars.expr method)": [[248, "polars.Expr.append"]], "apply() (polars.expr method)": [[249, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[250, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[251, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[252, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[253, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[254, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[255, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[256, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[257, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[258, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[259, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[260, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[261, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[262, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[263, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[264, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[265, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[266, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[267, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[268, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[269, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[270, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[271, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[272, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[273, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[274, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[275, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[276, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[277, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[278, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[279, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[280, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[281, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[282, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[283, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[284, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[285, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[286, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[287, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[288, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[289, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[292, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[293, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[294, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[295, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[296, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[297, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[298, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[299, "polars.Expr.cosh"]], "count() (polars.expr method)": [[300, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[301, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[302, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[303, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[304, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[305, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[306, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[307, "polars.Expr.diff"]], "dot() (polars.expr method)": [[308, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[309, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[310, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[311, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[312, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[313, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[314, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[315, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[316, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[317, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[318, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[319, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[320, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[321, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[322, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[323, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[324, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[325, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[326, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[327, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[328, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[329, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[330, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[331, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[332, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[333, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[334, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[336, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[337, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[338, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[339, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[340, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[341, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[342, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[343, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[344, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[345, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[346, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[347, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[348, "polars.Expr.exp"]], "explode() (polars.expr method)": [[349, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[350, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[351, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[352, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[353, "polars.Expr.filter"]], "first() (polars.expr method)": [[354, "polars.Expr.first"]], "flatten() (polars.expr method)": [[355, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[356, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[357, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[358, "polars.Expr.hash"]], "head() (polars.expr method)": [[359, "polars.Expr.head"]], "inspect() (polars.expr method)": [[360, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[361, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[362, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[363, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[364, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[365, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[366, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[367, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[368, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[369, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[370, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[371, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[372, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[373, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[374, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[375, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[376, "polars.Expr.last"]], "len() (polars.expr method)": [[377, "polars.Expr.len"]], "limit() (polars.expr method)": [[378, "polars.Expr.limit"]], "list() (polars.expr method)": [[379, "polars.Expr.list"]], "log() (polars.expr method)": [[380, "polars.Expr.log"]], "log10() (polars.expr method)": [[381, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[382, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[383, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[384, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[385, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[386, "polars.Expr.max"]], "mean() (polars.expr method)": [[387, "polars.Expr.mean"]], "median() (polars.expr method)": [[388, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[389, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[390, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[391, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[392, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[393, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[394, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[395, "polars.Expr.min"]], "mode() (polars.expr method)": [[396, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[397, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[398, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[399, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[400, "polars.Expr.null_count"]], "over() (polars.expr method)": [[401, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[402, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[403, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[404, "polars.Expr.prefix"]], "product() (polars.expr method)": [[405, "polars.Expr.product"]], "quantile() (polars.expr method)": [[406, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[407, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[408, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[409, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[410, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[411, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[412, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[413, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[414, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[415, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[416, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[417, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[418, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[419, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[420, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[421, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[422, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[423, "polars.Expr.round"]], "sample() (polars.expr method)": [[424, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[425, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[426, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[427, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[428, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[429, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[430, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[431, "polars.Expr.sign"]], "sin() (polars.expr method)": [[432, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[433, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[434, "polars.Expr.skew"]], "slice() (polars.expr method)": [[435, "polars.Expr.slice"]], "sort() (polars.expr method)": [[436, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[437, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[438, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[439, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[440, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[441, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[442, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[443, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[444, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[445, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[446, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[447, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[448, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[449, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[450, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[451, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[452, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[453, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[454, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[455, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[456, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[457, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[458, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[459, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[460, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[461, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[462, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[463, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[464, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[465, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[466, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[467, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[468, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[469, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[470, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[471, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[472, "polars.Expr.sum"]], "tail() (polars.expr method)": [[473, "polars.Expr.tail"]], "take() (polars.expr method)": [[474, "polars.Expr.take"]], "take_every() (polars.expr method)": [[475, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[476, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[477, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[478, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[479, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[480, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[481, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[482, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[483, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[484, "polars.Expr.var"]], "where() (polars.expr method)": [[485, "polars.Expr.where"]], "all() (in module polars)": [[486, "polars.all"]], "any() (in module polars)": [[487, "polars.any"]], "apply() (in module polars)": [[488, "polars.apply"]], "arange() (in module polars)": [[489, "polars.arange"]], "arg_sort_by() (in module polars)": [[490, "polars.arg_sort_by"]], "avg() (in module polars)": [[491, "polars.avg"]], "coalesce() (in module polars)": [[492, "polars.coalesce"]], "col() (in module polars)": [[493, "polars.col"]], "concat_list() (in module polars)": [[494, "polars.concat_list"]], "concat_str() (in module polars)": [[495, "polars.concat_str"]], "count() (in module polars)": [[496, "polars.count"]], "cov() (in module polars)": [[497, "polars.cov"]], "cumfold() (in module polars)": [[498, "polars.cumfold"]], "cumreduce() (in module polars)": [[499, "polars.cumreduce"]], "cumsum() (in module polars)": [[500, "polars.cumsum"]], "date() (in module polars)": [[501, "polars.date"]], "datetime() (in module polars)": [[502, "polars.datetime"]], "duration() (in module polars)": [[503, "polars.duration"]], "element() (in module polars)": [[504, "polars.element"]], "exclude() (in module polars)": [[505, "polars.exclude"]], "first() (in module polars)": [[506, "polars.first"]], "fold() (in module polars)": [[507, "polars.fold"]], "format() (in module polars)": [[508, "polars.format"]], "from_epoch() (in module polars)": [[509, "polars.from_epoch"]], "groups() (in module polars)": [[510, "polars.groups"]], "head() (in module polars)": [[511, "polars.head"]], "list() (in module polars)": [[512, "polars.list"]], "lit() (in module polars)": [[513, "polars.lit"]], "map() (in module polars)": [[514, "polars.map"]], "max() (in module polars)": [[515, "polars.max"]], "mean() (in module polars)": [[516, "polars.mean"]], "median() (in module polars)": [[517, "polars.median"]], "min() (in module polars)": [[518, "polars.min"]], "n_unique() (in module polars)": [[519, "polars.n_unique"]], "pearson_corr() (in module polars)": [[520, "polars.pearson_corr"]], "quantile() (in module polars)": [[521, "polars.quantile"]], "reduce() (in module polars)": [[522, "polars.reduce"]], "repeat() (in module polars)": [[523, "polars.repeat"]], "select() (in module polars)": [[524, "polars.select"]], "spearman_rank_corr() (in module polars)": [[525, "polars.spearman_rank_corr"]], "std() (in module polars)": [[526, "polars.std"]], "struct() (in module polars)": [[527, "polars.struct"]], "sum() (in module polars)": [[528, "polars.sum"]], "tail() (in module polars)": [[529, "polars.tail"]], "var() (in module polars)": [[530, "polars.var"]], "when() (in module polars)": [[531, "polars.when"]], "cache() (polars.lazyframe method)": [[551, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[552, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[553, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[554, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[555, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[556, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[557, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[558, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[559, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[560, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[561, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[562, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[563, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[564, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[565, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[566, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[567, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[568, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[569, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[570, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[571, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[572, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[573, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[574, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[575, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[576, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[577, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[578, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[579, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[580, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[581, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[582, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[583, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[584, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[585, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[586, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[587, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[588, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[589, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[590, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[591, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[592, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[593, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[594, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[595, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[596, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[597, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[598, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[599, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[600, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[601, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[602, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[603, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[604, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[605, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[606, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[607, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[608, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[609, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[610, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[611, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[612, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[613, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[614, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[615, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[616, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[617, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[625, "polars.Series.abs"]], "alias() (polars.series method)": [[626, "polars.Series.alias"]], "all() (polars.series method)": [[627, "polars.Series.all"]], "any() (polars.series method)": [[628, "polars.Series.any"]], "append() (polars.series method)": [[629, "polars.Series.append"]], "apply() (polars.series method)": [[630, "polars.Series.apply"]], "arccos() (polars.series method)": [[631, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[632, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[633, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[634, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[635, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[636, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[637, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[638, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[639, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[640, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[641, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[642, "polars.Series.argsort"]], "arr (polars.series attribute)": [[643, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[644, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[645, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[646, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[647, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[648, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[649, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[650, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[651, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[652, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[653, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[654, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[655, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[656, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[657, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[658, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[659, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[660, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[661, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[662, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[663, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[664, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[665, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[666, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[667, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[668, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[669, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[670, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[671, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[672, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[673, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[674, "polars.Series.cast"]], "cat (polars.series attribute)": [[675, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[676, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[677, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[678, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[679, "polars.Series.cleared"]], "clip() (polars.series method)": [[680, "polars.Series.clip"]], "clip_max() (polars.series method)": [[681, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[682, "polars.Series.clip_min"]], "clone() (polars.series method)": [[683, "polars.Series.clone"]], "cos() (polars.series method)": [[684, "polars.Series.cos"]], "cosh() (polars.series method)": [[685, "polars.Series.cosh"]], "cummax() (polars.series method)": [[686, "polars.Series.cummax"]], "cummin() (polars.series method)": [[687, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[688, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[689, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[690, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[691, "polars.Series.describe"]], "diff() (polars.series method)": [[692, "polars.Series.diff"]], "dot() (polars.series method)": [[693, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[694, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[695, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[696, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[697, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[698, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[699, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[700, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[701, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[702, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[703, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[704, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[705, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[706, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[707, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[708, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[709, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[710, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[711, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[712, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[713, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[714, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[715, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[716, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[717, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[718, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[719, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[720, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[721, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[722, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[723, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[724, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[725, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[726, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[727, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[728, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[729, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[730, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[731, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[732, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[733, "polars.Series.dtype"]], "entropy() (polars.series method)": [[734, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[735, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[736, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[737, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[738, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[739, "polars.Series.exp"]], "explode() (polars.series method)": [[740, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[741, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[742, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[743, "polars.Series.fill_null"]], "filter() (polars.series method)": [[744, "polars.Series.filter"]], "flags (polars.series attribute)": [[745, "polars.Series.flags"]], "floor() (polars.series method)": [[746, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[747, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[748, "polars.Series.has_validity"]], "hash() (polars.series method)": [[749, "polars.Series.hash"]], "head() (polars.series method)": [[750, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[751, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[752, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[753, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[754, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[755, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[756, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[757, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[758, "polars.Series.is_first"]], "is_float() (polars.series method)": [[759, "polars.Series.is_float"]], "is_in() (polars.series method)": [[760, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[761, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[762, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[763, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[764, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[765, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[766, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[767, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[768, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[769, "polars.Series.is_utf8"]], "item() (polars.series method)": [[770, "polars.Series.item"]], "kurtosis() (polars.series method)": [[771, "polars.Series.kurtosis"]], "len() (polars.series method)": [[772, "polars.Series.len"]], "limit() (polars.series method)": [[773, "polars.Series.limit"]], "log() (polars.series method)": [[774, "polars.Series.log"]], "log10() (polars.series method)": [[775, "polars.Series.log10"]], "max() (polars.series method)": [[776, "polars.Series.max"]], "mean() (polars.series method)": [[777, "polars.Series.mean"]], "median() (polars.series method)": [[778, "polars.Series.median"]], "min() (polars.series method)": [[779, "polars.Series.min"]], "mode() (polars.series method)": [[780, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[781, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[782, "polars.Series.n_unique"]], "name (polars.series attribute)": [[783, "polars.Series.name"]], "nan_max() (polars.series method)": [[784, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[785, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[786, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[787, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[788, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[789, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[790, "polars.Series.peak_min"]], "product() (polars.series method)": [[791, "polars.Series.product"]], "quantile() (polars.series method)": [[792, "polars.Series.quantile"]], "rank() (polars.series method)": [[793, "polars.Series.rank"]], "rechunk() (polars.series method)": [[794, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[795, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[796, "polars.Series.rename"]], "reshape() (polars.series method)": [[797, "polars.Series.reshape"]], "reverse() (polars.series method)": [[798, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[799, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[800, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[801, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[802, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[803, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[804, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[805, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[806, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[807, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[808, "polars.Series.rolling_var"]], "round() (polars.series method)": [[809, "polars.Series.round"]], "sample() (polars.series method)": [[810, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[811, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[812, "polars.Series.series_equal"]], "set() (polars.series method)": [[813, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[814, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[815, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[816, "polars.Series.shape"]], "shift() (polars.series method)": [[817, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[818, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[819, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[820, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[821, "polars.Series.shuffle"]], "sign() (polars.series method)": [[822, "polars.Series.sign"]], "sin() (polars.series method)": [[823, "polars.Series.sin"]], "sinh() (polars.series method)": [[824, "polars.Series.sinh"]], "skew() (polars.series method)": [[825, "polars.Series.skew"]], "slice() (polars.series method)": [[826, "polars.Series.slice"]], "sort() (polars.series method)": [[827, "polars.Series.sort"]], "sqrt() (polars.series method)": [[828, "polars.Series.sqrt"]], "std() (polars.series method)": [[829, "polars.Series.std"]], "str (polars.series attribute)": [[830, "polars.Series.str"]], "concat() (polars.series.str method)": [[831, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[832, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[833, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[834, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[835, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[836, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[837, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[838, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[839, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[840, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[841, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[842, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[843, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[844, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[845, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[846, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[847, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[848, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[849, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[850, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[851, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[852, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[853, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[854, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[855, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[856, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[857, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[858, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[859, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[860, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[861, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[862, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[863, "polars.Series.struct.to_frame"]], "unnest() (polars.series.struct method)": [[864, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[865, "polars.Series.sum"]], "tail() (polars.series method)": [[866, "polars.Series.tail"]], "take() (polars.series method)": [[867, "polars.Series.take"]], "take_every() (polars.series method)": [[868, "polars.Series.take_every"]], "tan() (polars.series method)": [[869, "polars.Series.tan"]], "tanh() (polars.series method)": [[870, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[871, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[872, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[873, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[874, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[875, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[876, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[877, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[878, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[879, "polars.Series.top_k"]], "unique() (polars.series method)": [[880, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[881, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[882, "polars.Series.value_counts"]], "var() (polars.series method)": [[883, "polars.Series.var"]], "view() (polars.series method)": [[884, "polars.Series.view"]], "zip_with() (polars.series method)": [[885, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[900, "polars.SQLContext"]]}})